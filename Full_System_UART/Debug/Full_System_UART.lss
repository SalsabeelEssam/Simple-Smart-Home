
Full_System_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00006e94  00006f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00005154  00000000  00000000  00006ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001012  00000000  00000000  0000c148  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000d15a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000d449  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000f48e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0001058f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00011514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00011694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00011956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	fe e6       	ldi	r31, 0x6E	; 110
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <main>
      7a:	0c 94 48 37 	jmp	0x6e90	; 0x6e90 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 11 37 	jmp	0x6e22	; 0x6e22 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e4       	ldi	r26, 0x41	; 65
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2d 37 	jmp	0x6e5a	; 0x6e5a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 11 37 	jmp	0x6e22	; 0x6e22 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e4       	ldi	r24, 0x41	; 65
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2d 37 	jmp	0x6e5a	; 0x6e5a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 19 37 	jmp	0x6e32	; 0x6e32 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	61 e4       	ldi	r22, 0x41	; 65
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 35 37 	jmp	0x6e6a	; 0x6e6a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 21 37 	jmp	0x6e42	; 0x6e42 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 3d 37 	jmp	0x6e7a	; 0x6e7a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_VoidInit>:
#include"BIT_MATH.h"
#include"ADC_Interface.h"
#include"ADC_Config.h"
#include"ADC_Private.h"

void ADC_VoidInit(void) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*SELECT  MAX VOLT*/
#if ADC_VOLTAGE_REFERENCE == AREF_INTERNAL_VREF_TURNED_OFF
	CLR_BIT(ADMUX, REFS0);
	CLR_BIT(ADMUX, REFS1);
#elif ADC_VOLTAGE_REFERENCE == AVCC_AT_AREF_PIN
	SET_BIT(ADMUX, REFS0);
     c96:	a7 e2       	ldi	r26, 0x27	; 39
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e2       	ldi	r30, 0x27	; 39
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 64       	ori	r24, 0x40	; 64
     ca2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24

	/*LEFT ADJUSTMENT */
#if ADC_PRESENTATION_CONVERSION_THE_RESULT == LEFT_ADJUST_THE_RESULT
	SET_BIT(ADMUX, ADLAR);
#elif ADC_PRESENTATION_CONVERSION_THE_RESULT == RIGHT_ADJUST_THE_RESULT
	CLR_BIT(ADMUX,ADLAR);
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	8c 93       	st	X, r24
#endif
	/* CONVERSTION MODE SIGLE CONVERSTION MODE OR FREE RUNNING*/
#if ADC_START_CONVERTION_IN_MODE ==  ADC_SINGLE_CONVERSTION_MODE
	//SET_BIT(ADCSRA, ADSC);
	CLR_BIT(ADCSRA,ADATE);
     cc0:	a6 e2       	ldi	r26, 0x26	; 38
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e2       	ldi	r30, 0x26	; 38
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8f 7d       	andi	r24, 0xDF	; 223
     ccc:	8c 93       	st	X, r24
#elif ADC_PRESCLER_SELECTION == CLCK_DIV_64
	CLR_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
	SET_BIT(ADCSRA, ADPS2);
#elif ADC_PRESCLER_SELECTION == CLCK_DIV_128
	SET_BIT(ADCSRA, ADPS0);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
     cdc:	a6 e2       	ldi	r26, 0x26	; 38
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e6 e2       	ldi	r30, 0x26	; 38
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
#endif

	/* ADC ENABLE*/
#if ADC_ENABLE_TURNED_ON == ADC_ENABLE
	SET_BIT(ADCSRA, ADEN);
     cf8:	a6 e2       	ldi	r26, 0x26	; 38
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e6 e2       	ldi	r30, 0x26	; 38
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 68       	ori	r24, 0x80	; 128
     d04:	8c 93       	st	X, r24
#elif ADC_ENABLE_TURNED_ON == ADC_DISABLE
	CLR_BIT(ADCSRA,ADEN);
#endif

}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <ADC_GetDigitalValue>:

void ADC_EnableInterrupt(void);
void ADC_DisableInterrupt(void);

void ADC_GetDigitalValue(u8 Copy_u8Channel, u16 *Copy_DigitalValue) {
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <ADC_GetDigitalValue+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <ADC_GetDigitalValue+0x8>
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	7b 83       	std	Y+3, r23	; 0x03
     d1c:	6a 83       	std	Y+2, r22	; 0x02
       /* check  that Copy_u8Channel not more than i have in data sheet */
	if ((Copy_u8Channel < 32) && (Copy_u8Channel != NULL)) {
     d1e:	89 81       	ldd	r24, Y+1	; 0x01

	}
	        ADMUX &= 0b11100000;
     d20:	a7 e2       	ldi	r26, 0x27	; 39
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e7 e2       	ldi	r30, 0x27	; 39
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 7e       	andi	r24, 0xE0	; 224
     d2c:	8c 93       	st	X, r24
		//	Copy_u8Channel &= 0b00011111;
			ADMUX |= Copy_u8Channel;
     d2e:	a7 e2       	ldi	r26, 0x27	; 39
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e2       	ldi	r30, 0x27	; 39
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	90 81       	ld	r25, Z
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	89 2b       	or	r24, r25
     d3c:	8c 93       	st	X, r24
			/*start conversion */
			SET_BIT(ADCSRA, ADSC);
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 64       	ori	r24, 0x40	; 64
     d4a:	8c 93       	st	X, r24
			/* WAIT FOR THE FALG OF ADC*/
	//		while( (GET_BIT(ADCSRA,ADIF))  == 0);
			while (!(GET_BIT(ADCSRA, ADIF))); /*POLLING*/
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	82 95       	swap	r24
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	a9 f3       	breq	.-22     	; 0xd4c <ADC_GetDigitalValue+0x40>

			/* CLEAR FLAG NOT DONE BY HARDWARE */
			SET_BIT(ADCSRA, ADIF);
     d62:	a6 e2       	ldi	r26, 0x26	; 38
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e6 e2       	ldi	r30, 0x26	; 38
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 61       	ori	r24, 0x10	; 16
     d6e:	8c 93       	st	X, r24
			/* READ THE VALUE OF REGISTER AFTER CONVERTION*/
			(*Copy_DigitalValue) = ADC;
     d70:	e4 e2       	ldi	r30, 0x24	; 36
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	ea 81       	ldd	r30, Y+2	; 0x02
     d7a:	fb 81       	ldd	r31, Y+3	; 0x03
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <DIO_SetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_PRIVATE.h"

#include "DIO_INTERFACE.h"

void DIO_SetPinDirection(u8 PORT, u8 PIN, u8 DIRECTION) {
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	29 97       	sbiw	r28, 0x09	; 9
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	6a 83       	std	Y+2, r22	; 0x02
     da6:	4b 83       	std	Y+3, r20	; 0x03
	switch (DIRECTION) {
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	39 87       	std	Y+9, r19	; 0x09
     db0:	28 87       	std	Y+8, r18	; 0x08
     db2:	88 85       	ldd	r24, Y+8	; 0x08
     db4:	99 85       	ldd	r25, Y+9	; 0x09
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	39 f0       	breq	.+14     	; 0xdc8 <DIO_SetPinDirection+0x3a>
     dba:	28 85       	ldd	r18, Y+8	; 0x08
     dbc:	39 85       	ldd	r19, Y+9	; 0x09
     dbe:	21 30       	cpi	r18, 0x01	; 1
     dc0:	31 05       	cpc	r19, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <DIO_SetPinDirection+0x38>
     dc4:	75 c0       	rjmp	.+234    	; 0xeb0 <DIO_SetPinDirection+0x122>
     dc6:	e2 c0       	rjmp	.+452    	; 0xf8c <DIO_SetPinDirection+0x1fe>
	case INPUT:
		switch (PORT) {
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3f 83       	std	Y+7, r19	; 0x07
     dd0:	2e 83       	std	Y+6, r18	; 0x06
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	59 f1       	breq	.+86     	; 0xe32 <DIO_SetPinDirection+0xa4>
     ddc:	2e 81       	ldd	r18, Y+6	; 0x06
     dde:	3f 81       	ldd	r19, Y+7	; 0x07
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <DIO_SetPinDirection+0x62>
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	69 f0       	breq	.+26     	; 0xe08 <DIO_SetPinDirection+0x7a>
     dee:	ce c0       	rjmp	.+412    	; 0xf8c <DIO_SetPinDirection+0x1fe>
     df0:	2e 81       	ldd	r18, Y+6	; 0x06
     df2:	3f 81       	ldd	r19, Y+7	; 0x07
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	89 f1       	breq	.+98     	; 0xe5c <DIO_SetPinDirection+0xce>
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	9f 81       	ldd	r25, Y+7	; 0x07
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <DIO_SetPinDirection+0x78>
     e04:	40 c0       	rjmp	.+128    	; 0xe86 <DIO_SetPinDirection+0xf8>
     e06:	c2 c0       	rjmp	.+388    	; 0xf8c <DIO_SetPinDirection+0x1fe>
		case PORTA:
			CLR_BIT(DDRA_REG, PIN);
     e08:	aa e3       	ldi	r26, 0x3A	; 58
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e3       	ldi	r30, 0x3A	; 58
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_SetPinDirection+0x98>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_SetPinDirection+0x94>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	ad c0       	rjmp	.+346    	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, PIN);
     e32:	a7 e3       	ldi	r26, 0x37	; 55
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e3       	ldi	r30, 0x37	; 55
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_SetPinDirection+0xc2>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_SetPinDirection+0xbe>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	98 c0       	rjmp	.+304    	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, PIN);
     e5c:	a4 e3       	ldi	r26, 0x34	; 52
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_SetPinDirection+0xec>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_SetPinDirection+0xe8>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	83 c0       	rjmp	.+262    	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, PIN);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_SetPinDirection+0x116>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_SetPinDirection+0x112>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	6e c0       	rjmp	.+220    	; 0xf8c <DIO_SetPinDirection+0x1fe>
			// code error
			break;
		}
		break;
	case OUTPUT:
		switch (PORT) {
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3d 83       	std	Y+5, r19	; 0x05
     eb8:	2c 83       	std	Y+4, r18	; 0x04
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	49 f1       	breq	.+82     	; 0xf16 <DIO_SetPinDirection+0x188>
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <DIO_SetPinDirection+0x14a>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	61 f0       	breq	.+24     	; 0xeee <DIO_SetPinDirection+0x160>
     ed6:	5a c0       	rjmp	.+180    	; 0xf8c <DIO_SetPinDirection+0x1fe>
     ed8:	2c 81       	ldd	r18, Y+4	; 0x04
     eda:	3d 81       	ldd	r19, Y+5	; 0x05
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <DIO_SetPinDirection+0x1b0>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	e9 f1       	breq	.+122    	; 0xf66 <DIO_SetPinDirection+0x1d8>
     eec:	4f c0       	rjmp	.+158    	; 0xf8c <DIO_SetPinDirection+0x1fe>
		case PORTA:
			SET_BIT(DDRA_REG, PIN);
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_SetPinDirection+0x17e>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_SetPinDirection+0x17a>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	3b c0       	rjmp	.+118    	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, PIN);
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetPinDirection+0x1a6>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetPinDirection+0x1a2>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	27 c0       	rjmp	.+78     	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, PIN);
     f3e:	a4 e3       	ldi	r26, 0x34	; 52
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 e3       	ldi	r30, 0x34	; 52
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_SetPinDirection+0x1ce>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_SetPinDirection+0x1ca>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <DIO_SetPinDirection+0x1fe>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, PIN);
     f66:	a1 e3       	ldi	r26, 0x31	; 49
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e1 e3       	ldi	r30, 0x31	; 49
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_SetPinDirection+0x1f6>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_SetPinDirection+0x1f2>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
		break;
	default:
		//code erroe
		break;
	}
}
     f8c:	29 96       	adiw	r28, 0x09	; 9
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <DIO_SetPinValue>:
void DIO_SetPinValue(u8 PORT, u8 PIN, u8 VALUE) {
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	29 97       	sbiw	r28, 0x09	; 9
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	6a 83       	std	Y+2, r22	; 0x02
     fb6:	4b 83       	std	Y+3, r20	; 0x03
	switch (VALUE) {
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	39 87       	std	Y+9, r19	; 0x09
     fc0:	28 87       	std	Y+8, r18	; 0x08
     fc2:	88 85       	ldd	r24, Y+8	; 0x08
     fc4:	99 85       	ldd	r25, Y+9	; 0x09
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <DIO_SetPinValue+0x3a>
     fca:	28 85       	ldd	r18, Y+8	; 0x08
     fcc:	39 85       	ldd	r19, Y+9	; 0x09
     fce:	21 30       	cpi	r18, 0x01	; 1
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <DIO_SetPinValue+0x38>
     fd4:	75 c0       	rjmp	.+234    	; 0x10c0 <DIO_SetPinValue+0x122>
     fd6:	e2 c0       	rjmp	.+452    	; 0x119c <DIO_SetPinValue+0x1fe>
	case LOW:
		switch (PORT) {
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3f 83       	std	Y+7, r19	; 0x07
     fe0:	2e 83       	std	Y+6, r18	; 0x06
     fe2:	8e 81       	ldd	r24, Y+6	; 0x06
     fe4:	9f 81       	ldd	r25, Y+7	; 0x07
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	59 f1       	breq	.+86     	; 0x1042 <DIO_SetPinValue+0xa4>
     fec:	2e 81       	ldd	r18, Y+6	; 0x06
     fee:	3f 81       	ldd	r19, Y+7	; 0x07
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <DIO_SetPinValue+0x62>
     ff6:	8e 81       	ldd	r24, Y+6	; 0x06
     ff8:	9f 81       	ldd	r25, Y+7	; 0x07
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f0       	breq	.+26     	; 0x1018 <DIO_SetPinValue+0x7a>
     ffe:	ce c0       	rjmp	.+412    	; 0x119c <DIO_SetPinValue+0x1fe>
    1000:	2e 81       	ldd	r18, Y+6	; 0x06
    1002:	3f 81       	ldd	r19, Y+7	; 0x07
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	89 f1       	breq	.+98     	; 0x106c <DIO_SetPinValue+0xce>
    100a:	8e 81       	ldd	r24, Y+6	; 0x06
    100c:	9f 81       	ldd	r25, Y+7	; 0x07
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_SetPinValue+0x78>
    1014:	40 c0       	rjmp	.+128    	; 0x1096 <DIO_SetPinValue+0xf8>
    1016:	c2 c0       	rjmp	.+388    	; 0x119c <DIO_SetPinValue+0x1fe>
		case PORTA:
			CLR_BIT(PORTA_REG, PIN);
    1018:	ab e3       	ldi	r26, 0x3B	; 59
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e3       	ldi	r30, 0x3B	; 59
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_SetPinValue+0x98>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_SetPinValue+0x94>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	ad c0       	rjmp	.+346    	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, PIN);
    1042:	a8 e3       	ldi	r26, 0x38	; 56
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e8 e3       	ldi	r30, 0x38	; 56
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_SetPinValue+0xc2>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_SetPinValue+0xbe>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	98 c0       	rjmp	.+304    	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, PIN);
    106c:	a5 e3       	ldi	r26, 0x35	; 53
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_SetPinValue+0xec>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_SetPinValue+0xe8>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	83 c0       	rjmp	.+262    	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, PIN);
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_SetPinValue+0x116>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_SetPinValue+0x112>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	6e c0       	rjmp	.+220    	; 0x119c <DIO_SetPinValue+0x1fe>
			// code error
			break;
		}
		break;
	case HIGH:
		switch (PORT) {
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3d 83       	std	Y+5, r19	; 0x05
    10c8:	2c 83       	std	Y+4, r18	; 0x04
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	49 f1       	breq	.+82     	; 0x1126 <DIO_SetPinValue+0x188>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <DIO_SetPinValue+0x14a>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <DIO_SetPinValue+0x160>
    10e6:	5a c0       	rjmp	.+180    	; 0x119c <DIO_SetPinValue+0x1fe>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	71 f1       	breq	.+92     	; 0x114e <DIO_SetPinValue+0x1b0>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	e9 f1       	breq	.+122    	; 0x1176 <DIO_SetPinValue+0x1d8>
    10fc:	4f c0       	rjmp	.+158    	; 0x119c <DIO_SetPinValue+0x1fe>
		case PORTA:
			SET_BIT(PORTA_REG, PIN);
    10fe:	ab e3       	ldi	r26, 0x3B	; 59
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e3       	ldi	r30, 0x3B	; 59
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_SetPinValue+0x17e>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_SetPinValue+0x17a>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	3b c0       	rjmp	.+118    	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, PIN);
    1126:	a8 e3       	ldi	r26, 0x38	; 56
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e8 e3       	ldi	r30, 0x38	; 56
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_SetPinValue+0x1a6>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_SetPinValue+0x1a2>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	27 c0       	rjmp	.+78     	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, PIN);
    114e:	a5 e3       	ldi	r26, 0x35	; 53
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e3       	ldi	r30, 0x35	; 53
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_SetPinValue+0x1ce>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_SetPinValue+0x1ca>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	13 c0       	rjmp	.+38     	; 0x119c <DIO_SetPinValue+0x1fe>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, PIN);
    1176:	a2 e3       	ldi	r26, 0x32	; 50
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e2 e3       	ldi	r30, 0x32	; 50
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_SetPinValue+0x1f6>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_SetPinValue+0x1f2>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
		break;
	default:
		//code erroe
		break;
	}
}
    119c:	29 96       	adiw	r28, 0x09	; 9
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_SetPullUP>:
void DIO_SetPullUP(u8 PORT, u8 PIN) {
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_SetPullUP+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_SetPullUP+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <DIO_SetPullUP+0x26>
    11d2:	3e c0       	rjmp	.+124    	; 0x1250 <DIO_SetPullUP+0xa2>
    11d4:	2b 81       	ldd	r18, Y+3	; 0x03
    11d6:	3c 81       	ldd	r19, Y+4	; 0x04
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <DIO_SetPullUP+0x3a>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	71 f0       	breq	.+28     	; 0x1202 <DIO_SetPullUP+0x54>
    11e6:	a8 c0       	rjmp	.+336    	; 0x1338 <DIO_SetPullUP+0x18a>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <DIO_SetPullUP+0x46>
    11f2:	55 c0       	rjmp	.+170    	; 0x129e <DIO_SetPullUP+0xf0>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_SetPullUP+0x52>
    11fe:	76 c0       	rjmp	.+236    	; 0x12ec <DIO_SetPullUP+0x13e>
    1200:	9b c0       	rjmp	.+310    	; 0x1338 <DIO_SetPullUP+0x18a>
	case PORTA:
		CLR_BIT(DDRA_REG, PIN);
    1202:	aa e3       	ldi	r26, 0x3A	; 58
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_SetPullUP+0x70>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	2a 95       	dec	r18
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_SetPullUP+0x6c>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
		SET_BIT(PORTA_REG,PIN);
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_SetPullUP+0x98>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_SetPullUP+0x94>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	74 c0       	rjmp	.+232    	; 0x1338 <DIO_SetPullUP+0x18a>
		break;
	case PORTB:
		CLR_BIT(DDRB_REG, PIN);
    1250:	a7 e3       	ldi	r26, 0x37	; 55
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_SetPullUP+0xbe>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	2a 95       	dec	r18
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_SetPullUP+0xba>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
		SET_BIT(PORTB_REG,PIN);
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_SetPullUP+0xe6>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_SetPullUP+0xe2>
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	4d c0       	rjmp	.+154    	; 0x1338 <DIO_SetPullUP+0x18a>
		break;
	case PORTC:
		CLR_BIT(DDRC_REG, PIN);
    129e:	a4 e3       	ldi	r26, 0x34	; 52
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e4 e3       	ldi	r30, 0x34	; 52
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_SetPullUP+0x10c>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	2a 95       	dec	r18
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_SetPullUP+0x108>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
		SET_BIT(PORTC_REG,PIN);
    12c4:	a5 e3       	ldi	r26, 0x35	; 53
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_SetPullUP+0x134>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_SetPullUP+0x130>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	26 c0       	rjmp	.+76     	; 0x1338 <DIO_SetPullUP+0x18a>
		break;
	case PORTD:
		CLR_BIT(DDRD_REG, PIN);
    12ec:	a1 e3       	ldi	r26, 0x31	; 49
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_SetPullUP+0x15a>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	2a 95       	dec	r18
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_SetPullUP+0x156>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
		SET_BIT(PORTD_REG,PIN);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_SetPullUP+0x182>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_SetPullUP+0x17e>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
	default:
		// code error
		break;
	}

}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <DIO_TogPinDirection>:

void DIO_TogPinDirection(u8 PORT, u8 PIN) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <DIO_TogPinDirection+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_TogPinDirection+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3c 83       	std	Y+4, r19	; 0x04
    135e:	2b 83       	std	Y+3, r18	; 0x03
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	49 f1       	breq	.+82     	; 0x13bc <DIO_TogPinDirection+0x76>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_TogPinDirection+0x38>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_TogPinDirection+0x4e>
    137c:	5a c0       	rjmp	.+180    	; 0x1432 <DIO_TogPinDirection+0xec>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	71 f1       	breq	.+92     	; 0x13e4 <DIO_TogPinDirection+0x9e>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	e9 f1       	breq	.+122    	; 0x140c <DIO_TogPinDirection+0xc6>
    1392:	4f c0       	rjmp	.+158    	; 0x1432 <DIO_TogPinDirection+0xec>
	case PORTA:
		TOGGLE_BIT(DDRA_REG, PIN);
    1394:	aa e3       	ldi	r26, 0x3A	; 58
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_TogPinDirection+0x6c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_TogPinDirection+0x68>
    13b6:	84 27       	eor	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3b c0       	rjmp	.+118    	; 0x1432 <DIO_TogPinDirection+0xec>
		break;
	case PORTB:
		TOGGLE_BIT(DDRB_REG, PIN);
    13bc:	a7 e3       	ldi	r26, 0x37	; 55
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_TogPinDirection+0x94>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_TogPinDirection+0x90>
    13de:	84 27       	eor	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	27 c0       	rjmp	.+78     	; 0x1432 <DIO_TogPinDirection+0xec>
		break;
	case PORTC:
		TOGGLE_BIT(DDRC_REG, PIN);
    13e4:	a4 e3       	ldi	r26, 0x34	; 52
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e4 e3       	ldi	r30, 0x34	; 52
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_TogPinDirection+0xbc>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_TogPinDirection+0xb8>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	13 c0       	rjmp	.+38     	; 0x1432 <DIO_TogPinDirection+0xec>
		break;
	case PORTD:
		TOGGLE_BIT(DDRD_REG, PIN);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_TogPinDirection+0xe4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_TogPinDirection+0xe0>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
		break;
	default:
		// code error
		break;
	}
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <DIO_TogPinValue>:
void DIO_TogPinValue(u8 PORT, u8 PIN) {
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_TogPinValue+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <DIO_TogPinValue+0x8>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3c 83       	std	Y+4, r19	; 0x04
    1458:	2b 83       	std	Y+3, r18	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	49 f1       	breq	.+82     	; 0x14b6 <DIO_TogPinValue+0x76>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_TogPinValue+0x38>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_TogPinValue+0x4e>
    1476:	5a c0       	rjmp	.+180    	; 0x152c <DIO_TogPinValue+0xec>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	71 f1       	breq	.+92     	; 0x14de <DIO_TogPinValue+0x9e>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	e9 f1       	breq	.+122    	; 0x1506 <DIO_TogPinValue+0xc6>
    148c:	4f c0       	rjmp	.+158    	; 0x152c <DIO_TogPinValue+0xec>
	case PORTA:
		TOGGLE_BIT(PORTA_REG, PIN);
    148e:	ab e3       	ldi	r26, 0x3B	; 59
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_TogPinValue+0x6c>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_TogPinValue+0x68>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	3b c0       	rjmp	.+118    	; 0x152c <DIO_TogPinValue+0xec>
		break;
	case PORTB:
		TOGGLE_BIT(PORTB_REG, PIN);
    14b6:	a8 e3       	ldi	r26, 0x38	; 56
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_TogPinValue+0x94>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_TogPinValue+0x90>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	27 c0       	rjmp	.+78     	; 0x152c <DIO_TogPinValue+0xec>
		break;
	case PORTC:
		TOGGLE_BIT(PORTC_REG, PIN);
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_TogPinValue+0xbc>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_TogPinValue+0xb8>
    1500:	84 27       	eor	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	13 c0       	rjmp	.+38     	; 0x152c <DIO_TogPinValue+0xec>
		break;
	case PORTD:
		TOGGLE_BIT(PORTD_REG, PIN);
    1506:	a2 e3       	ldi	r26, 0x32	; 50
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_TogPinValue+0xe4>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_TogPinValue+0xe0>
    1528:	84 27       	eor	r24, r20
    152a:	8c 93       	st	X, r24
		break;
	default:
		// code error
		break;
	}
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 PORT, u8 DIRECTION) {
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <DIO_SetPortDirection+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_SetPortDirection+0x8>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3c 83       	std	Y+4, r19	; 0x04
    1552:	2b 83       	std	Y+3, r18	; 0x03
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	d1 f0       	breq	.+52     	; 0x1592 <DIO_SetPortDirection+0x58>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <DIO_SetPortDirection+0x38>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <DIO_SetPortDirection+0x4e>
    1570:	1e c0       	rjmp	.+60     	; 0x15ae <DIO_SetPortDirection+0x74>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	81 f0       	breq	.+32     	; 0x159c <DIO_SetPortDirection+0x62>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <DIO_SetPortDirection+0x6c>
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <DIO_SetPortDirection+0x74>
	case PORTA:
		ASSIGN_REG(DDRA_REG, DIRECTION);
    1588:	ea e3       	ldi	r30, 0x3A	; 58
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <DIO_SetPortDirection+0x74>
		break;
	case PORTB:
		ASSIGN_REG(DDRB_REG, DIRECTION);
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	80 83       	st	Z, r24
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <DIO_SetPortDirection+0x74>
		break;
	case PORTC:
		ASSIGN_REG(DDRC_REG, DIRECTION);
    159c:	e4 e3       	ldi	r30, 0x34	; 52
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	80 83       	st	Z, r24
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <DIO_SetPortDirection+0x74>
		break;
	case PORTD:
		ASSIGN_REG(DDRD_REG, DIRECTION);
    15a6:	e1 e3       	ldi	r30, 0x31	; 49
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
		break;
	default:
		// code error
		break;
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_SetPortValue>:
void DIO_SetPortValue(u8 PORT, u8 VALUE) {
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_SetPortValue+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_SetPortValue+0x8>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3c 83       	std	Y+4, r19	; 0x04
    15d4:	2b 83       	std	Y+3, r18	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	d1 f0       	breq	.+52     	; 0x1614 <DIO_SetPortValue+0x58>
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <DIO_SetPortValue+0x38>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <DIO_SetPortValue+0x4e>
    15f2:	1e c0       	rjmp	.+60     	; 0x1630 <DIO_SetPortValue+0x74>
    15f4:	2b 81       	ldd	r18, Y+3	; 0x03
    15f6:	3c 81       	ldd	r19, Y+4	; 0x04
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <DIO_SetPortValue+0x62>
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <DIO_SetPortValue+0x6c>
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <DIO_SetPortValue+0x74>
	case PORTA:
		ASSIGN_REG(PORTA_REG, VALUE);
    160a:	eb e3       	ldi	r30, 0x3B	; 59
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <DIO_SetPortValue+0x74>
		break;
	case PORTB:
		ASSIGN_REG(PORTB_REG, VALUE);
    1614:	e8 e3       	ldi	r30, 0x38	; 56
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <DIO_SetPortValue+0x74>
		break;
	case PORTC:
		ASSIGN_REG(PORTC_REG, VALUE);
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <DIO_SetPortValue+0x74>
		break;
	case PORTD:
		ASSIGN_REG(PORTD_REG, VALUE);
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
		break;
	default:
		// code error
		break;
	}
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <DIO_GetPortValue>:

u8 DIO_GetPortValue(u8 PORT) {
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <DIO_GetPortValue+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <DIO_GetPortValue+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	8a 83       	std	Y+2, r24	; 0x02
	u8 PortValue;
	switch (PORT) {
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3c 83       	std	Y+4, r19	; 0x04
    1654:	2b 83       	std	Y+3, r18	; 0x03
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	d1 f0       	breq	.+52     	; 0x1694 <DIO_GetPortValue+0x56>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <DIO_GetPortValue+0x36>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <DIO_GetPortValue+0x4c>
    1672:	1e c0       	rjmp	.+60     	; 0x16b0 <DIO_GetPortValue+0x72>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <DIO_GetPortValue+0x60>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <DIO_GetPortValue+0x6a>
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <DIO_GetPortValue+0x72>
	case PORTA:
		PortValue = GET_REG(PINA_REG);
    168a:	e9 e3       	ldi	r30, 0x39	; 57
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <DIO_GetPortValue+0x72>
		break;
	case PORTB:
		PortValue = GET_REG(PINB_REG);
    1694:	e6 e3       	ldi	r30, 0x36	; 54
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <DIO_GetPortValue+0x72>
		break;
	case PORTC:
		PortValue = GET_REG(PINC_REG);
    169e:	e3 e3       	ldi	r30, 0x33	; 51
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <DIO_GetPortValue+0x72>
		break;
	case PORTD:
		PortValue = GET_REG(PIND_REG);
    16a8:	e0 e3       	ldi	r30, 0x30	; 48
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		// code error
		break;
	}
	return PortValue;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 PORT, u8 PIN) {
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_GetPinValue+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_GetPinValue+0x8>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 PortValue;
	switch (PORT) {
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 83       	std	Y+5, r19	; 0x05
    16da:	2c 83       	std	Y+4, r18	; 0x04
    16dc:	4c 81       	ldd	r20, Y+4	; 0x04
    16de:	5d 81       	ldd	r21, Y+5	; 0x05
    16e0:	41 30       	cpi	r20, 0x01	; 1
    16e2:	51 05       	cpc	r21, r1
    16e4:	41 f1       	breq	.+80     	; 0x1736 <DIO_GetPinValue+0x76>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	34 f4       	brge	.+12     	; 0x16fc <DIO_GetPinValue+0x3c>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	61 f0       	breq	.+24     	; 0x1712 <DIO_GetPinValue+0x52>
    16fa:	52 c0       	rjmp	.+164    	; 0x17a0 <DIO_GetPinValue+0xe0>
    16fc:	4c 81       	ldd	r20, Y+4	; 0x04
    16fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1700:	42 30       	cpi	r20, 0x02	; 2
    1702:	51 05       	cpc	r21, r1
    1704:	51 f1       	breq	.+84     	; 0x175a <DIO_GetPinValue+0x9a>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	b9 f1       	breq	.+110    	; 0x177e <DIO_GetPinValue+0xbe>
    1710:	47 c0       	rjmp	.+142    	; 0x17a0 <DIO_GetPinValue+0xe0>
	case PORTA:
		PortValue = GET_BIT(PINA_REG, PIN);
    1712:	e9 e3       	ldi	r30, 0x39	; 57
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a9 01       	movw	r20, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_GetPinValue+0x6a>
    1726:	55 95       	asr	r21
    1728:	47 95       	ror	r20
    172a:	8a 95       	dec	r24
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_GetPinValue+0x66>
    172e:	ca 01       	movw	r24, r20
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	35 c0       	rjmp	.+106    	; 0x17a0 <DIO_GetPinValue+0xe0>
		break;
	case PORTB:
		PortValue = GET_BIT(PINB_REG, PIN);
    1736:	e6 e3       	ldi	r30, 0x36	; 54
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a9 01       	movw	r20, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_GetPinValue+0x8e>
    174a:	55 95       	asr	r21
    174c:	47 95       	ror	r20
    174e:	8a 95       	dec	r24
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_GetPinValue+0x8a>
    1752:	ca 01       	movw	r24, r20
    1754:	81 70       	andi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	23 c0       	rjmp	.+70     	; 0x17a0 <DIO_GetPinValue+0xe0>
		break;
	case PORTC:
		PortValue = GET_BIT(PINC_REG, PIN);
    175a:	e3 e3       	ldi	r30, 0x33	; 51
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_GetPinValue+0xb2>
    176e:	55 95       	asr	r21
    1770:	47 95       	ror	r20
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_GetPinValue+0xae>
    1776:	ca 01       	movw	r24, r20
    1778:	81 70       	andi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	11 c0       	rjmp	.+34     	; 0x17a0 <DIO_GetPinValue+0xe0>
		break;
	case PORTD:
		PortValue = GET_BIT(PIND_REG, PIN);
    177e:	e0 e3       	ldi	r30, 0x30	; 48
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_GetPinValue+0xd6>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_GetPinValue+0xd2>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		// code error
		break;
	}
	return PortValue;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <GIE_VoidEnable>:

#include"STD_TYPE.h"
#include"GIE_Private.h"
#include"BIT_MATH.h"

void GIE_VoidEnable(void){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG,I_BIT);
    17ba:	af e5       	ldi	r26, 0x5F	; 95
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ef e5       	ldi	r30, 0x5F	; 95
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	8c 93       	st	X, r24
}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <GIE_VoidDisable>:

void GIE_VoidDisable(void){
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_BIT);
    17d6:	af e5       	ldi	r26, 0x5F	; 95
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ef e5       	ldi	r30, 0x5F	; 95
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	8c 93       	st	X, r24
}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
u8 KeyPad_getPressedKey(void) {
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <KeyPad_getPressedKey+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <KeyPad_getPressedKey+0x8>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	u8 col, row;
	u8 COL_VALUE = 0;
    17f6:	1a 82       	std	Y+2, r1	; 0x02
	u8 PIN_PULL_RES = 0;
    17f8:	19 82       	std	Y+1, r1	; 0x01
	while (1) {
		for (col = 0; col < N_col; col++) /* loop for columns */
    17fa:	1c 82       	std	Y+4, r1	; 0x04
    17fc:	44 c0       	rjmp	.+136    	; 0x1886 <KeyPad_getPressedKey+0x9c>
		{
			COL_VALUE = (0b00010000 << col);
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	80 e1       	ldi	r24, 0x10	; 16
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <KeyPad_getPressedKey+0x24>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	2a 95       	dec	r18
    1810:	e2 f7       	brpl	.-8      	; 0x180a <KeyPad_getPressedKey+0x20>
    1812:	8a 83       	std	Y+2, r24	; 0x02
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */
			DIO_SetPortDirection(KEYPAD_PORT_OUT, COL_VALUE);
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	6a 81       	ldd	r22, Y+2	; 0x02
    1818:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_SetPortDirection>

			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */
			PIN_PULL_RES = (~(0b00010000 << col));
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	80 e1       	ldi	r24, 0x10	; 16
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <KeyPad_getPressedKey+0x42>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	2a 95       	dec	r18
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <KeyPad_getPressedKey+0x3e>
    1830:	80 95       	com	r24
    1832:	89 83       	std	Y+1, r24	; 0x01
			DIO_SetPortValue(KEYPAD_PORT_OUT, PIN_PULL_RES);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_SetPortValue>

			for (row = 0; row < N_row; row++) /* loop for rows */
    183c:	1b 82       	std	Y+3, r1	; 0x03
    183e:	1d c0       	rjmp	.+58     	; 0x187a <KeyPad_getPressedKey+0x90>
			{
				if (!DIO_GetPinValue(KEYPAD_PORT_OUT, row)) /* if the switch is press in this row */
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	6b 81       	ldd	r22, Y+3	; 0x03
    1844:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_GetPinValue>
    1848:	88 23       	and	r24, r24
    184a:	a1 f4       	brne	.+40     	; 0x1874 <KeyPad_getPressedKey+0x8a>
				{
#if (N_col == 3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4)
					return KeyPad_4x4_adjustKeyNumber((row * N_col) + col + 1);
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	98 2f       	mov	r25, r24
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	89 0f       	add	r24, r25
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	0e 94 48 0c 	call	0x1890	; 0x1890 <KeyPad_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret
			 * pull up resistors for the rows pins
			 */
			PIN_PULL_RES = (~(0b00010000 << col));
			DIO_SetPortValue(KEYPAD_PORT_OUT, PIN_PULL_RES);

			for (row = 0; row < N_row; row++) /* loop for rows */
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	8b 83       	std	Y+3, r24	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	00 f3       	brcs	.-64     	; 0x1840 <KeyPad_getPressedKey+0x56>
u8 KeyPad_getPressedKey(void) {
	u8 col, row;
	u8 COL_VALUE = 0;
	u8 PIN_PULL_RES = 0;
	while (1) {
		for (col = 0; col < N_col; col++) /* loop for columns */
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	8c 83       	std	Y+4, r24	; 0x04
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	08 f4       	brcc	.+2      	; 0x188e <KeyPad_getPressedKey+0xa4>
    188c:	b8 cf       	rjmp	.-144    	; 0x17fe <KeyPad_getPressedKey+0x14>
    188e:	b5 cf       	rjmp	.-150    	; 0x17fa <KeyPad_getPressedKey+0x10>

00001890 <KeyPad_4x4_adjustKeyNumber>:
	}
}

#elif (N_col == 4)

static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number) {
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <KeyPad_4x4_adjustKeyNumber+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <KeyPad_4x4_adjustKeyNumber+0x8>
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number) {
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	88 30       	cpi	r24, 0x08	; 8
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <KeyPad_4x4_adjustKeyNumber+0x24>
    18b2:	70 c0       	rjmp	.+224    	; 0x1994 <KeyPad_4x4_adjustKeyNumber+0x104>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	29 30       	cpi	r18, 0x09	; 9
    18ba:	31 05       	cpc	r19, r1
    18bc:	5c f5       	brge	.+86     	; 0x1914 <KeyPad_4x4_adjustKeyNumber+0x84>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	84 30       	cpi	r24, 0x04	; 4
    18c4:	91 05       	cpc	r25, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x3a>
    18c8:	59 c0       	rjmp	.+178    	; 0x197c <KeyPad_4x4_adjustKeyNumber+0xec>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	25 30       	cpi	r18, 0x05	; 5
    18d0:	31 05       	cpc	r19, r1
    18d2:	9c f4       	brge	.+38     	; 0x18fa <KeyPad_4x4_adjustKeyNumber+0x6a>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <KeyPad_4x4_adjustKeyNumber+0x50>
    18de:	48 c0       	rjmp	.+144    	; 0x1970 <KeyPad_4x4_adjustKeyNumber+0xe0>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	23 30       	cpi	r18, 0x03	; 3
    18e6:	31 05       	cpc	r19, r1
    18e8:	0c f0       	brlt	.+2      	; 0x18ec <KeyPad_4x4_adjustKeyNumber+0x5c>
    18ea:	45 c0       	rjmp	.+138    	; 0x1976 <KeyPad_4x4_adjustKeyNumber+0xe6>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <KeyPad_4x4_adjustKeyNumber+0x68>
    18f6:	39 c0       	rjmp	.+114    	; 0x196a <KeyPad_4x4_adjustKeyNumber+0xda>
    18f8:	67 c0       	rjmp	.+206    	; 0x19c8 <KeyPad_4x4_adjustKeyNumber+0x138>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	26 30       	cpi	r18, 0x06	; 6
    1900:	31 05       	cpc	r19, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <KeyPad_4x4_adjustKeyNumber+0x76>
    1904:	41 c0       	rjmp	.+130    	; 0x1988 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	87 30       	cpi	r24, 0x07	; 7
    190c:	91 05       	cpc	r25, r1
    190e:	0c f0       	brlt	.+2      	; 0x1912 <KeyPad_4x4_adjustKeyNumber+0x82>
    1910:	3e c0       	rjmp	.+124    	; 0x198e <KeyPad_4x4_adjustKeyNumber+0xfe>
    1912:	37 c0       	rjmp	.+110    	; 0x1982 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1914:	2b 81       	ldd	r18, Y+3	; 0x03
    1916:	3c 81       	ldd	r19, Y+4	; 0x04
    1918:	2c 30       	cpi	r18, 0x0C	; 12
    191a:	31 05       	cpc	r19, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <KeyPad_4x4_adjustKeyNumber+0x90>
    191e:	46 c0       	rjmp	.+140    	; 0x19ac <KeyPad_4x4_adjustKeyNumber+0x11c>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	8d 30       	cpi	r24, 0x0D	; 13
    1926:	91 05       	cpc	r25, r1
    1928:	5c f4       	brge	.+22     	; 0x1940 <KeyPad_4x4_adjustKeyNumber+0xb0>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	2a 30       	cpi	r18, 0x0A	; 10
    1930:	31 05       	cpc	r19, r1
    1932:	b1 f1       	breq	.+108    	; 0x19a0 <KeyPad_4x4_adjustKeyNumber+0x110>
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	8b 30       	cpi	r24, 0x0B	; 11
    193a:	91 05       	cpc	r25, r1
    193c:	a4 f5       	brge	.+104    	; 0x19a6 <KeyPad_4x4_adjustKeyNumber+0x116>
    193e:	2d c0       	rjmp	.+90     	; 0x199a <KeyPad_4x4_adjustKeyNumber+0x10a>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	2e 30       	cpi	r18, 0x0E	; 14
    1946:	31 05       	cpc	r19, r1
    1948:	b9 f1       	breq	.+110    	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x128>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	8e 30       	cpi	r24, 0x0E	; 14
    1950:	91 05       	cpc	r25, r1
    1952:	7c f1       	brlt	.+94     	; 0x19b2 <KeyPad_4x4_adjustKeyNumber+0x122>
    1954:	2b 81       	ldd	r18, Y+3	; 0x03
    1956:	3c 81       	ldd	r19, Y+4	; 0x04
    1958:	2f 30       	cpi	r18, 0x0F	; 15
    195a:	31 05       	cpc	r19, r1
    195c:	79 f1       	breq	.+94     	; 0x19bc <KeyPad_4x4_adjustKeyNumber+0x12c>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	80 31       	cpi	r24, 0x10	; 16
    1964:	91 05       	cpc	r25, r1
    1966:	69 f1       	breq	.+90     	; 0x19c2 <KeyPad_4x4_adjustKeyNumber+0x132>
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <KeyPad_4x4_adjustKeyNumber+0x138>
	case 1:
		return 7;
    196a:	97 e0       	ldi	r25, 0x07	; 7
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	2e c0       	rjmp	.+92     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 2:
		return 8;
    1970:	28 e0       	ldi	r18, 0x08	; 8
    1972:	2a 83       	std	Y+2, r18	; 0x02
    1974:	2b c0       	rjmp	.+86     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 3:
		return 9;
    1976:	39 e0       	ldi	r19, 0x09	; 9
    1978:	3a 83       	std	Y+2, r19	; 0x02
    197a:	28 c0       	rjmp	.+80     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 4:
		return '%'; // ASCII Code of %
    197c:	85 e2       	ldi	r24, 0x25	; 37
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	25 c0       	rjmp	.+74     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 5:
		return 4;
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	22 c0       	rjmp	.+68     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 6:
		return 5;
    1988:	25 e0       	ldi	r18, 0x05	; 5
    198a:	2a 83       	std	Y+2, r18	; 0x02
    198c:	1f c0       	rjmp	.+62     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 7:
		return 6;
    198e:	36 e0       	ldi	r19, 0x06	; 6
    1990:	3a 83       	std	Y+2, r19	; 0x02
    1992:	1c c0       	rjmp	.+56     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 8:
		return '*'; /* ASCII Code of '*' */
    1994:	8a e2       	ldi	r24, 0x2A	; 42
    1996:	8a 83       	std	Y+2, r24	; 0x02
    1998:	19 c0       	rjmp	.+50     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 9:
		return 1;
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 10:
		return 2;
    19a0:	22 e0       	ldi	r18, 0x02	; 2
    19a2:	2a 83       	std	Y+2, r18	; 0x02
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 11:
		return 3;
    19a6:	33 e0       	ldi	r19, 0x03	; 3
    19a8:	3a 83       	std	Y+2, r19	; 0x02
    19aa:	10 c0       	rjmp	.+32     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 12:
		return '-'; /* ASCII Code of '-' */
    19ac:	8d e2       	ldi	r24, 0x2D	; 45
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 13:
		return 13; /* ASCII of Enter */
    19b2:	9d e0       	ldi	r25, 0x0D	; 13
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	0a c0       	rjmp	.+20     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 14:
		return 0;
    19b8:	1a 82       	std	Y+2, r1	; 0x02
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 15:
		return '='; /* ASCII Code of '=' */
    19bc:	2d e3       	ldi	r18, 0x3D	; 61
    19be:	2a 83       	std	Y+2, r18	; 0x02
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 16:
		return '+'; /* ASCII Code of '+' */
    19c2:	3b e2       	ldi	r19, 0x2B	; 43
    19c4:	3a 83       	std	Y+2, r19	; 0x02
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	default:
		return button_number;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <LCD_VoidInti>:
#include <util/delay.h>
#include "DIO_INTERFACE.h"
#include "LCD_Config.h"

static u8 Swap(u8 *Buffer, u8 start, u8 end);
void LCD_VoidInti(void) {
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	e8 97       	sbiw	r28, 0x38	; 56
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PortData, 0xFF);
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	6f ef       	ldi	r22, 0xFF	; 255
    19f4:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_SetPortDirection>
	DIO_SetPinDirection(PortControl, RS, OUTPUT);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortControl, RW, OUTPUT);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortControl, E, OUTPUT);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e2       	ldi	r26, 0x20	; 32
    1a1c:	b2 e4       	ldi	r27, 0x42	; 66
    1a1e:	8d ab       	std	Y+53, r24	; 0x35
    1a20:	9e ab       	std	Y+54, r25	; 0x36
    1a22:	af ab       	std	Y+55, r26	; 0x37
    1a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6d a9       	ldd	r22, Y+53	; 0x35
    1a28:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	89 ab       	std	Y+49, r24	; 0x31
    1a40:	9a ab       	std	Y+50, r25	; 0x32
    1a42:	ab ab       	std	Y+51, r26	; 0x33
    1a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_VoidInti+0x8c>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	98 ab       	std	Y+48, r25	; 0x30
    1a64:	8f a7       	std	Y+47, r24	; 0x2f
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_VoidInti+0x10a>
	else if (__tmp > 65535)
    1a68:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_VoidInti+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6d a9       	ldd	r22, Y+53	; 0x35
    1a82:	7e a9       	ldd	r23, Y+54	; 0x36
    1a84:	8f a9       	ldd	r24, Y+55	; 0x37
    1a86:	98 ad       	ldd	r25, Y+56	; 0x38
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_VoidInti+0xec>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e a7       	std	Y+46, r25	; 0x2e
    1ab0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_VoidInti+0xda>
    1aba:	9e a7       	std	Y+46, r25	; 0x2e
    1abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_VoidInti+0xce>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_VoidInti+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
    1aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_VoidInti+0x116>
    1af6:	9c a7       	std	Y+44, r25	; 0x2c
    1af8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	Lcd_VoidSendCommand(FUNCTION_SET);
    1afa:	88 e3       	ldi	r24, 0x38	; 56
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e8       	ldi	r26, 0x80	; 128
    1b08:	bf e3       	ldi	r27, 0x3F	; 63
    1b0a:	8f a3       	std	Y+39, r24	; 0x27
    1b0c:	98 a7       	std	Y+40, r25	; 0x28
    1b0e:	a9 a7       	std	Y+41, r26	; 0x29
    1b10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	6f a1       	ldd	r22, Y+39	; 0x27
    1b14:	78 a5       	ldd	r23, Y+40	; 0x28
    1b16:	89 a5       	ldd	r24, Y+41	; 0x29
    1b18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8b a3       	std	Y+35, r24	; 0x23
    1b2c:	9c a3       	std	Y+36, r25	; 0x24
    1b2e:	ad a3       	std	Y+37, r26	; 0x25
    1b30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b32:	6b a1       	ldd	r22, Y+35	; 0x23
    1b34:	7c a1       	ldd	r23, Y+36	; 0x24
    1b36:	8d a1       	ldd	r24, Y+37	; 0x25
    1b38:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <LCD_VoidInti+0x178>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9a a3       	std	Y+34, r25	; 0x22
    1b50:	89 a3       	std	Y+33, r24	; 0x21
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <LCD_VoidInti+0x1f6>
	else if (__tmp > 65535)
    1b54:	6b a1       	ldd	r22, Y+35	; 0x23
    1b56:	7c a1       	ldd	r23, Y+36	; 0x24
    1b58:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <LCD_VoidInti+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b70:	89 a5       	ldd	r24, Y+41	; 0x29
    1b72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9a a3       	std	Y+34, r25	; 0x22
    1b92:	89 a3       	std	Y+33, r24	; 0x21
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <LCD_VoidInti+0x1d8>
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	98 a3       	std	Y+32, r25	; 0x20
    1b9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_VoidInti+0x1c6>
    1ba6:	98 a3       	std	Y+32, r25	; 0x20
    1ba8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bac:	9a a1       	ldd	r25, Y+34	; 0x22
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <LCD_VoidInti+0x1ba>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <LCD_VoidInti+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
    1bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_VoidInti+0x202>
    1be2:	9e 8f       	std	Y+30, r25	; 0x1e
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_VoidSendCommand(DISPLAY_MODE);
    1be6:	8c e0       	ldi	r24, 0x0C	; 12
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	89 8f       	std	Y+25, r24	; 0x19
    1bf8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bfa:	ab 8f       	std	Y+27, r26	; 0x1b
    1bfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1c00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8d 8b       	std	Y+21, r24	; 0x15
    1c18:	9e 8b       	std	Y+22, r25	; 0x16
    1c1a:	af 8b       	std	Y+23, r26	; 0x17
    1c1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c20:	7e 89       	ldd	r23, Y+22	; 0x16
    1c22:	8f 89       	ldd	r24, Y+23	; 0x17
    1c24:	98 8d       	ldd	r25, Y+24	; 0x18
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <LCD_VoidInti+0x264>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <LCD_VoidInti+0x2e2>
	else if (__tmp > 65535)
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <LCD_VoidInti+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9c 8b       	std	Y+20, r25	; 0x14
    1c7e:	8b 8b       	std	Y+19, r24	; 0x13
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_VoidInti+0x2c4>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	89 8b       	std	Y+17, r24	; 0x11
    1c8a:	89 89       	ldd	r24, Y+17	; 0x11
    1c8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_VoidInti+0x2b2>
    1c92:	9a 8b       	std	Y+18, r25	; 0x12
    1c94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8b 89       	ldd	r24, Y+19	; 0x13
    1c98:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <LCD_VoidInti+0x2a6>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <LCD_VoidInti+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cac:	7e 89       	ldd	r23, Y+22	; 0x16
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	98 8b       	std	Y+16, r25	; 0x10
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
    1cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc8:	98 89       	ldd	r25, Y+16	; 0x10
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_VoidInti+0x2ee>
    1cce:	98 8b       	std	Y+16, r25	; 0x10
    1cd0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_VoidSendCommand(DISPLAY_CLEAR);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e8       	ldi	r26, 0x80	; 128
    1ce0:	bf e3       	ldi	r27, 0x3F	; 63
    1ce2:	8b 87       	std	Y+11, r24	; 0x0b
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8f 83       	std	Y+7, r24	; 0x07
    1d04:	98 87       	std	Y+8, r25	; 0x08
    1d06:	a9 87       	std	Y+9, r26	; 0x09
    1d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_VoidInti+0x350>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_VoidInti+0x3ce>
	else if (__tmp > 65535)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_VoidInti+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_VoidInti+0x3b0>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_VoidInti+0x39e>
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_VoidInti+0x392>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <LCD_VoidInti+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_VoidInti+0x3da>
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1dbe:	e8 96       	adiw	r28, 0x38	; 56
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <LCD_VoidInti4Bit>:

void LCD_VoidInti4Bit(void) {
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	c4 56       	subi	r28, 0x64	; 100
    1dde:	d0 40       	sbci	r29, 0x00	; 0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(PortData, PIN4, OUTPUT);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	64 e0       	ldi	r22, 0x04	; 4
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortData, PIN5, OUTPUT);
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortData, PIN6, OUTPUT);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	66 e0       	ldi	r22, 0x06	; 6
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortData, PIN7, OUTPUT);
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	67 e0       	ldi	r22, 0x07	; 7
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>

	DIO_SetPinDirection(PortControl, RS, OUTPUT);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortControl, RW, OUTPUT);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PortControl, E, OUTPUT);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
    1e30:	fe 01       	movw	r30, r28
    1e32:	ef 59       	subi	r30, 0x9F	; 159
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a8 e4       	ldi	r26, 0x48	; 72
    1e3c:	b2 e4       	ldi	r27, 0x42	; 66
    1e3e:	80 83       	st	Z, r24
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	a2 83       	std	Z+2, r26	; 0x02
    1e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	8e 01       	movw	r16, r28
    1e48:	03 5a       	subi	r16, 0xA3	; 163
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ef 59       	subi	r30, 0x9F	; 159
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a ef       	ldi	r20, 0xFA	; 250
    1e60:	54 e4       	ldi	r21, 0x44	; 68
    1e62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e74:	fe 01       	movw	r30, r28
    1e76:	e3 5a       	subi	r30, 0xA3	; 163
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	44 f4       	brge	.+16     	; 0x1ea2 <LCD_VoidInti4Bit+0xd2>
		__ticks = 1;
    1e92:	fe 01       	movw	r30, r28
    1e94:	e5 5a       	subi	r30, 0xA5	; 165
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	64 c0       	rjmp	.+200    	; 0x1f6a <LCD_VoidInti4Bit+0x19a>
	else if (__tmp > 65535)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e3 5a       	subi	r30, 0xA3	; 163
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	0c f0       	brlt	.+2      	; 0x1ec2 <LCD_VoidInti4Bit+0xf2>
    1ec0:	43 c0       	rjmp	.+134    	; 0x1f48 <LCD_VoidInti4Bit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	ef 59       	subi	r30, 0x9F	; 159
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	05 5a       	subi	r16, 0xA5	; 165
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	1f c0       	rjmp	.+62     	; 0x1f38 <LCD_VoidInti4Bit+0x168>
    1efa:	fe 01       	movw	r30, r28
    1efc:	e7 5a       	subi	r30, 0xA7	; 167
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	88 ec       	ldi	r24, 0xC8	; 200
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e7 5a       	subi	r30, 0xA7	; 167
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_VoidInti4Bit+0x142>
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 5a       	subi	r30, 0xA7	; 167
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	de 01       	movw	r26, r28
    1f22:	a5 5a       	subi	r26, 0xA5	; 165
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 5a       	subi	r30, 0xA5	; 165
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	11 96       	adiw	r26, 0x01	; 1
    1f34:	9c 93       	st	X, r25
    1f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e5 5a       	subi	r30, 0xA5	; 165
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	d1 f6       	brne	.-76     	; 0x1efa <LCD_VoidInti4Bit+0x12a>
    1f46:	27 c0       	rjmp	.+78     	; 0x1f96 <LCD_VoidInti4Bit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	8e 01       	movw	r16, r28
    1f4a:	05 5a       	subi	r16, 0xA5	; 165
    1f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e3 5a       	subi	r30, 0xA3	; 163
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	de 01       	movw	r26, r28
    1f6c:	a9 5a       	subi	r26, 0xA9	; 169
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	fe 01       	movw	r30, r28
    1f72:	e5 5a       	subi	r30, 0xA5	; 165
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	8d 93       	st	X+, r24
    1f7c:	9c 93       	st	X, r25
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e9 5a       	subi	r30, 0xA9	; 169
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_VoidInti4Bit+0x1b8>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e9 5a       	subi	r30, 0xA9	; 169
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24

	_delay_ms(50);
	Lcd_VoidSendCommand4bit(SET_4bit);
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 77 1e 	call	0x3cee	; 0x3cee <Lcd_VoidSendCommand4bit>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ed 5a       	subi	r30, 0xAD	; 173
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a4 e3       	ldi	r26, 0x34	; 52
    1faa:	b2 e4       	ldi	r27, 0x42	; 66
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	01 5b       	subi	r16, 0xB1	; 177
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ed 5a       	subi	r30, 0xAD	; 173
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	2b ea       	ldi	r18, 0xAB	; 171
    1fca:	3a ea       	ldi	r19, 0xAA	; 170
    1fcc:	4a e2       	ldi	r20, 0x2A	; 42
    1fce:	50 e4       	ldi	r21, 0x40	; 64
    1fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	f8 01       	movw	r30, r16
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e1 5b       	subi	r30, 0xB1	; 177
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	34 f4       	brge	.+12     	; 0x200c <LCD_VoidInti4Bit+0x23c>
		__ticks = 1;
    2000:	fe 01       	movw	r30, r28
    2002:	e2 5b       	subi	r30, 0xB2	; 178
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 83       	st	Z, r24
    200a:	e0 c0       	rjmp	.+448    	; 0x21cc <LCD_VoidInti4Bit+0x3fc>
	else if (__tmp > 255)
    200c:	fe 01       	movw	r30, r28
    200e:	e1 5b       	subi	r30, 0xB1	; 177
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	53 e4       	ldi	r21, 0x43	; 67
    2022:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	0c f0       	brlt	.+2      	; 0x202c <LCD_VoidInti4Bit+0x25c>
    202a:	c0 c0       	rjmp	.+384    	; 0x21ac <LCD_VoidInti4Bit+0x3dc>
	{
		_delay_ms(__us / 1000.0);
    202c:	fe 01       	movw	r30, r28
    202e:	ed 5a       	subi	r30, 0xAD	; 173
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	fe 01       	movw	r30, r28
    204c:	e6 5b       	subi	r30, 0xB6	; 182
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 83       	st	Z, r24
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	a2 83       	std	Z+2, r26	; 0x02
    2056:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2058:	8e 01       	movw	r16, r28
    205a:	0a 5b       	subi	r16, 0xBA	; 186
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e6 5b       	subi	r30, 0xB6	; 182
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a ef       	ldi	r20, 0xFA	; 250
    2072:	54 e4       	ldi	r21, 0x44	; 68
    2074:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	f8 01       	movw	r30, r16
    207e:	80 83       	st	Z, r24
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	a2 83       	std	Z+2, r26	; 0x02
    2084:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2086:	fe 01       	movw	r30, r28
    2088:	ea 5b       	subi	r30, 0xBA	; 186
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	44 f4       	brge	.+16     	; 0x20b4 <LCD_VoidInti4Bit+0x2e4>
		__ticks = 1;
    20a4:	fe 01       	movw	r30, r28
    20a6:	ec 5b       	subi	r30, 0xBC	; 188
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	64 c0       	rjmp	.+200    	; 0x217c <LCD_VoidInti4Bit+0x3ac>
	else if (__tmp > 65535)
    20b4:	fe 01       	movw	r30, r28
    20b6:	ea 5b       	subi	r30, 0xBA	; 186
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	0c f0       	brlt	.+2      	; 0x20d4 <LCD_VoidInti4Bit+0x304>
    20d2:	43 c0       	rjmp	.+134    	; 0x215a <LCD_VoidInti4Bit+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	fe 01       	movw	r30, r28
    20d6:	e6 5b       	subi	r30, 0xB6	; 182
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8e 01       	movw	r16, r28
    20f4:	0c 5b       	subi	r16, 0xBC	; 188
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	f8 01       	movw	r30, r16
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24
    210a:	1f c0       	rjmp	.+62     	; 0x214a <LCD_VoidInti4Bit+0x37a>
    210c:	fe 01       	movw	r30, r28
    210e:	ee 5b       	subi	r30, 0xBE	; 190
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	88 ec       	ldi	r24, 0xC8	; 200
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
    211a:	fe 01       	movw	r30, r28
    211c:	ee 5b       	subi	r30, 0xBE	; 190
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_VoidInti4Bit+0x354>
    2128:	fe 01       	movw	r30, r28
    212a:	ee 5b       	subi	r30, 0xBE	; 190
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2132:	de 01       	movw	r26, r28
    2134:	ac 5b       	subi	r26, 0xBC	; 188
    2136:	bf 4f       	sbci	r27, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	ec 5b       	subi	r30, 0xBC	; 188
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	11 96       	adiw	r26, 0x01	; 1
    2146:	9c 93       	st	X, r25
    2148:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214a:	fe 01       	movw	r30, r28
    214c:	ec 5b       	subi	r30, 0xBC	; 188
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	d1 f6       	brne	.-76     	; 0x210c <LCD_VoidInti4Bit+0x33c>
    2158:	42 c0       	rjmp	.+132    	; 0x21de <LCD_VoidInti4Bit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	8e 01       	movw	r16, r28
    215c:	0c 5b       	subi	r16, 0xBC	; 188
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	ea 5b       	subi	r30, 0xBA	; 186
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	de 01       	movw	r26, r28
    217e:	a0 5c       	subi	r26, 0xC0	; 192
    2180:	bf 4f       	sbci	r27, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	ec 5b       	subi	r30, 0xBC	; 188
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	9c 93       	st	X, r25
    2190:	8e 93       	st	-X, r24
    2192:	fe 01       	movw	r30, r28
    2194:	e0 5c       	subi	r30, 0xC0	; 192
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_VoidInti4Bit+0x3cc>
    21a0:	fe 01       	movw	r30, r28
    21a2:	e0 5c       	subi	r30, 0xC0	; 192
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	19 c0       	rjmp	.+50     	; 0x21de <LCD_VoidInti4Bit+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ac:	8e 01       	movw	r16, r28
    21ae:	02 5b       	subi	r16, 0xB2	; 178
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	e1 5b       	subi	r30, 0xB1	; 177
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	f8 01       	movw	r30, r16
    21ca:	80 83       	st	Z, r24
    21cc:	fe 01       	movw	r30, r28
    21ce:	e2 5b       	subi	r30, 0xB2	; 178
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    21d8:	8a 95       	dec	r24
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_VoidInti4Bit+0x408>
    21dc:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(45);
	Lcd_VoidSendCommand4bit(FUNCTION_SET_4bit);
    21de:	88 e2       	ldi	r24, 0x28	; 40
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 77 1e 	call	0x3cee	; 0x3cee <Lcd_VoidSendCommand4bit>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a4 e3       	ldi	r26, 0x34	; 52
    21ec:	b2 e4       	ldi	r27, 0x42	; 66
    21ee:	8b af       	std	Y+59, r24	; 0x3b
    21f0:	9c af       	std	Y+60, r25	; 0x3c
    21f2:	ad af       	std	Y+61, r26	; 0x3d
    21f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    21f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    21fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fe:	2b ea       	ldi	r18, 0xAB	; 171
    2200:	3a ea       	ldi	r19, 0xAA	; 170
    2202:	4a e2       	ldi	r20, 0x2A	; 42
    2204:	50 e4       	ldi	r21, 0x40	; 64
    2206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8f ab       	std	Y+55, r24	; 0x37
    2210:	98 af       	std	Y+56, r25	; 0x38
    2212:	a9 af       	std	Y+57, r26	; 0x39
    2214:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2216:	6f a9       	ldd	r22, Y+55	; 0x37
    2218:	78 ad       	ldd	r23, Y+56	; 0x38
    221a:	89 ad       	ldd	r24, Y+57	; 0x39
    221c:	9a ad       	ldd	r25, Y+58	; 0x3a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	1c f4       	brge	.+6      	; 0x2234 <LCD_VoidInti4Bit+0x464>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	8e ab       	std	Y+54, r24	; 0x36
    2232:	91 c0       	rjmp	.+290    	; 0x2356 <LCD_VoidInti4Bit+0x586>
	else if (__tmp > 255)
    2234:	6f a9       	ldd	r22, Y+55	; 0x37
    2236:	78 ad       	ldd	r23, Y+56	; 0x38
    2238:	89 ad       	ldd	r24, Y+57	; 0x39
    223a:	9a ad       	ldd	r25, Y+58	; 0x3a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	53 e4       	ldi	r21, 0x43	; 67
    2244:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <LCD_VoidInti4Bit+0x47e>
    224c:	7b c0       	rjmp	.+246    	; 0x2344 <LCD_VoidInti4Bit+0x574>
	{
		_delay_ms(__us / 1000.0);
    224e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2250:	7c ad       	ldd	r23, Y+60	; 0x3c
    2252:	8d ad       	ldd	r24, Y+61	; 0x3d
    2254:	9e ad       	ldd	r25, Y+62	; 0x3e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8a ab       	std	Y+50, r24	; 0x32
    2268:	9b ab       	std	Y+51, r25	; 0x33
    226a:	ac ab       	std	Y+52, r26	; 0x34
    226c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6a a9       	ldd	r22, Y+50	; 0x32
    2270:	7b a9       	ldd	r23, Y+51	; 0x33
    2272:	8c a9       	ldd	r24, Y+52	; 0x34
    2274:	9d a9       	ldd	r25, Y+53	; 0x35
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8e a7       	std	Y+46, r24	; 0x2e
    2288:	9f a7       	std	Y+47, r25	; 0x2f
    228a:	a8 ab       	std	Y+48, r26	; 0x30
    228c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    228e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2290:	7f a5       	ldd	r23, Y+47	; 0x2f
    2292:	88 a9       	ldd	r24, Y+48	; 0x30
    2294:	99 a9       	ldd	r25, Y+49	; 0x31
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_VoidInti4Bit+0x4e0>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9d a7       	std	Y+45, r25	; 0x2d
    22ac:	8c a7       	std	Y+44, r24	; 0x2c
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_VoidInti4Bit+0x55e>
	else if (__tmp > 65535)
    22b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    22b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    22b4:	88 a9       	ldd	r24, Y+48	; 0x30
    22b6:	99 a9       	ldd	r25, Y+49	; 0x31
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_VoidInti4Bit+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6a a9       	ldd	r22, Y+50	; 0x32
    22ca:	7b a9       	ldd	r23, Y+51	; 0x33
    22cc:	8c a9       	ldd	r24, Y+52	; 0x34
    22ce:	9d a9       	ldd	r25, Y+53	; 0x35
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9d a7       	std	Y+45, r25	; 0x2d
    22ee:	8c a7       	std	Y+44, r24	; 0x2c
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_VoidInti4Bit+0x540>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9b a7       	std	Y+43, r25	; 0x2b
    22f8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    22fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_VoidInti4Bit+0x52e>
    2302:	9b a7       	std	Y+43, r25	; 0x2b
    2304:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8c a5       	ldd	r24, Y+44	; 0x2c
    2308:	9d a5       	ldd	r25, Y+45	; 0x2d
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9d a7       	std	Y+45, r25	; 0x2d
    230e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8c a5       	ldd	r24, Y+44	; 0x2c
    2312:	9d a5       	ldd	r25, Y+45	; 0x2d
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_VoidInti4Bit+0x522>
    2318:	24 c0       	rjmp	.+72     	; 0x2362 <LCD_VoidInti4Bit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6e a5       	ldd	r22, Y+46	; 0x2e
    231c:	7f a5       	ldd	r23, Y+47	; 0x2f
    231e:	88 a9       	ldd	r24, Y+48	; 0x30
    2320:	99 a9       	ldd	r25, Y+49	; 0x31
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9d a7       	std	Y+45, r25	; 0x2d
    232c:	8c a7       	std	Y+44, r24	; 0x2c
    232e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2330:	9d a5       	ldd	r25, Y+45	; 0x2d
    2332:	99 a7       	std	Y+41, r25	; 0x29
    2334:	88 a7       	std	Y+40, r24	; 0x28
    2336:	88 a5       	ldd	r24, Y+40	; 0x28
    2338:	99 a5       	ldd	r25, Y+41	; 0x29
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_VoidInti4Bit+0x56a>
    233e:	99 a7       	std	Y+41, r25	; 0x29
    2340:	88 a7       	std	Y+40, r24	; 0x28
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_VoidInti4Bit+0x592>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2344:	6f a9       	ldd	r22, Y+55	; 0x37
    2346:	78 ad       	ldd	r23, Y+56	; 0x38
    2348:	89 ad       	ldd	r24, Y+57	; 0x39
    234a:	9a ad       	ldd	r25, Y+58	; 0x3a
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8e ab       	std	Y+54, r24	; 0x36
    2356:	8e a9       	ldd	r24, Y+54	; 0x36
    2358:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    235a:	8f a1       	ldd	r24, Y+39	; 0x27
    235c:	8a 95       	dec	r24
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_VoidInti4Bit+0x58c>
    2360:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	Lcd_VoidSendCommand4bit(DISPLAY_MODE);
    2362:	8c e0       	ldi	r24, 0x0C	; 12
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 77 1e 	call	0x3cee	; 0x3cee <Lcd_VoidSendCommand4bit>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a4 e3       	ldi	r26, 0x34	; 52
    2370:	b2 e4       	ldi	r27, 0x42	; 66
    2372:	8b a3       	std	Y+35, r24	; 0x23
    2374:	9c a3       	std	Y+36, r25	; 0x24
    2376:	ad a3       	std	Y+37, r26	; 0x25
    2378:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	2b ea       	ldi	r18, 0xAB	; 171
    2384:	3a ea       	ldi	r19, 0xAA	; 170
    2386:	4a e2       	ldi	r20, 0x2A	; 42
    2388:	50 e4       	ldi	r21, 0x40	; 64
    238a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	8f 8f       	std	Y+31, r24	; 0x1f
    2394:	98 a3       	std	Y+32, r25	; 0x20
    2396:	a9 a3       	std	Y+33, r26	; 0x21
    2398:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    239a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    239c:	78 a1       	ldd	r23, Y+32	; 0x20
    239e:	89 a1       	ldd	r24, Y+33	; 0x21
    23a0:	9a a1       	ldd	r25, Y+34	; 0x22
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	1c f4       	brge	.+6      	; 0x23b8 <LCD_VoidInti4Bit+0x5e8>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	8e 8f       	std	Y+30, r24	; 0x1e
    23b6:	91 c0       	rjmp	.+290    	; 0x24da <LCD_VoidInti4Bit+0x70a>
	else if (__tmp > 255)
    23b8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23ba:	78 a1       	ldd	r23, Y+32	; 0x20
    23bc:	89 a1       	ldd	r24, Y+33	; 0x21
    23be:	9a a1       	ldd	r25, Y+34	; 0x22
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	53 e4       	ldi	r21, 0x43	; 67
    23c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	0c f0       	brlt	.+2      	; 0x23d2 <LCD_VoidInti4Bit+0x602>
    23d0:	7b c0       	rjmp	.+246    	; 0x24c8 <LCD_VoidInti4Bit+0x6f8>
	{
		_delay_ms(__us / 1000.0);
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a e7       	ldi	r20, 0x7A	; 122
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8a 8f       	std	Y+26, r24	; 0x1a
    23ec:	9b 8f       	std	Y+27, r25	; 0x1b
    23ee:	ac 8f       	std	Y+28, r26	; 0x1c
    23f0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a ef       	ldi	r20, 0xFA	; 250
    2400:	54 e4       	ldi	r21, 0x44	; 68
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8e 8b       	std	Y+22, r24	; 0x16
    240c:	9f 8b       	std	Y+23, r25	; 0x17
    240e:	a8 8f       	std	Y+24, r26	; 0x18
    2410:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2412:	6e 89       	ldd	r22, Y+22	; 0x16
    2414:	7f 89       	ldd	r23, Y+23	; 0x17
    2416:	88 8d       	ldd	r24, Y+24	; 0x18
    2418:	99 8d       	ldd	r25, Y+25	; 0x19
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e8       	ldi	r20, 0x80	; 128
    2420:	5f e3       	ldi	r21, 0x3F	; 63
    2422:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2426:	88 23       	and	r24, r24
    2428:	2c f4       	brge	.+10     	; 0x2434 <LCD_VoidInti4Bit+0x664>
		__ticks = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9d 8b       	std	Y+21, r25	; 0x15
    2430:	8c 8b       	std	Y+20, r24	; 0x14
    2432:	3f c0       	rjmp	.+126    	; 0x24b2 <LCD_VoidInti4Bit+0x6e2>
	else if (__tmp > 65535)
    2434:	6e 89       	ldd	r22, Y+22	; 0x16
    2436:	7f 89       	ldd	r23, Y+23	; 0x17
    2438:	88 8d       	ldd	r24, Y+24	; 0x18
    243a:	99 8d       	ldd	r25, Y+25	; 0x19
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	4f e7       	ldi	r20, 0x7F	; 127
    2442:	57 e4       	ldi	r21, 0x47	; 71
    2444:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2448:	18 16       	cp	r1, r24
    244a:	4c f5       	brge	.+82     	; 0x249e <LCD_VoidInti4Bit+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    244e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2450:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2452:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
    245c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9d 8b       	std	Y+21, r25	; 0x15
    2472:	8c 8b       	std	Y+20, r24	; 0x14
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <LCD_VoidInti4Bit+0x6c4>
    2476:	88 ec       	ldi	r24, 0xC8	; 200
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9b 8b       	std	Y+19, r25	; 0x13
    247c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    247e:	8a 89       	ldd	r24, Y+18	; 0x12
    2480:	9b 89       	ldd	r25, Y+19	; 0x13
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_VoidInti4Bit+0x6b2>
    2486:	9b 8b       	std	Y+19, r25	; 0x13
    2488:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	8c 89       	ldd	r24, Y+20	; 0x14
    248c:	9d 89       	ldd	r25, Y+21	; 0x15
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	9d 8b       	std	Y+21, r25	; 0x15
    2492:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2494:	8c 89       	ldd	r24, Y+20	; 0x14
    2496:	9d 89       	ldd	r25, Y+21	; 0x15
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	69 f7       	brne	.-38     	; 0x2476 <LCD_VoidInti4Bit+0x6a6>
    249c:	24 c0       	rjmp	.+72     	; 0x24e6 <LCD_VoidInti4Bit+0x716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249e:	6e 89       	ldd	r22, Y+22	; 0x16
    24a0:	7f 89       	ldd	r23, Y+23	; 0x17
    24a2:	88 8d       	ldd	r24, Y+24	; 0x18
    24a4:	99 8d       	ldd	r25, Y+25	; 0x19
    24a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9d 8b       	std	Y+21, r25	; 0x15
    24b0:	8c 8b       	std	Y+20, r24	; 0x14
    24b2:	8c 89       	ldd	r24, Y+20	; 0x14
    24b4:	9d 89       	ldd	r25, Y+21	; 0x15
    24b6:	99 8b       	std	Y+17, r25	; 0x11
    24b8:	88 8b       	std	Y+16, r24	; 0x10
    24ba:	88 89       	ldd	r24, Y+16	; 0x10
    24bc:	99 89       	ldd	r25, Y+17	; 0x11
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_VoidInti4Bit+0x6ee>
    24c2:	99 8b       	std	Y+17, r25	; 0x11
    24c4:	88 8b       	std	Y+16, r24	; 0x10
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <LCD_VoidInti4Bit+0x716>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24ca:	78 a1       	ldd	r23, Y+32	; 0x20
    24cc:	89 a1       	ldd	r24, Y+33	; 0x21
    24ce:	9a a1       	ldd	r25, Y+34	; 0x22
    24d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8e 8f       	std	Y+30, r24	; 0x1e
    24da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24dc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24de:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e0:	8a 95       	dec	r24
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_VoidInti4Bit+0x710>
    24e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	Lcd_VoidSendCommand4bit(DISPLAY_CLEAR);
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 77 1e 	call	0x3cee	; 0x3cee <Lcd_VoidSendCommand4bit>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	a0 e0       	ldi	r26, 0x00	; 0
    24f4:	b0 e4       	ldi	r27, 0x40	; 64
    24f6:	8b 87       	std	Y+11, r24	; 0x0b
    24f8:	9c 87       	std	Y+12, r25	; 0x0c
    24fa:	ad 87       	std	Y+13, r26	; 0x0d
    24fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2500:	7c 85       	ldd	r23, Y+12	; 0x0c
    2502:	8d 85       	ldd	r24, Y+13	; 0x0d
    2504:	9e 85       	ldd	r25, Y+14	; 0x0e
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a ef       	ldi	r20, 0xFA	; 250
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8f 83       	std	Y+7, r24	; 0x07
    2518:	98 87       	std	Y+8, r25	; 0x08
    251a:	a9 87       	std	Y+9, r26	; 0x09
    251c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2532:	88 23       	and	r24, r24
    2534:	2c f4       	brge	.+10     	; 0x2540 <LCD_VoidInti4Bit+0x770>
		__ticks = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	3f c0       	rjmp	.+126    	; 0x25be <LCD_VoidInti4Bit+0x7ee>
	else if (__tmp > 65535)
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	4c f5       	brge	.+82     	; 0x25aa <LCD_VoidInti4Bit+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	6b 85       	ldd	r22, Y+11	; 0x0b
    255a:	7c 85       	ldd	r23, Y+12	; 0x0c
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <LCD_VoidInti4Bit+0x7d0>
    2582:	88 ec       	ldi	r24, 0xC8	; 200
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_VoidInti4Bit+0x7be>
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	69 f7       	brne	.-38     	; 0x2582 <LCD_VoidInti4Bit+0x7b2>
    25a8:	14 c0       	rjmp	.+40     	; 0x25d2 <LCD_VoidInti4Bit+0x802>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <LCD_VoidInti4Bit+0x7fa>
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    25d2:	cc 59       	subi	r28, 0x9C	; 156
    25d4:	df 4f       	sbci	r29, 0xFF	; 255
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	08 95       	ret

000025ea <Lcd_VoidSendData>:

void Lcd_VoidSendData(u8 Copy_U8Data) {
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	a7 97       	sbiw	r28, 0x27	; 39
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	8f a3       	std	Y+39, r24	; 0x27
	DIO_SetPinValue(PortControl, RS, HIGH);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	41 e0       	ldi	r20, 0x01	; 1
    2606:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortControl, RW, LOW);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

	DIO_SetPortValue(PortData, Copy_U8Data);
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	6f a1       	ldd	r22, Y+39	; 0x27
    2618:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_SetPortValue>

	DIO_SetPinValue(PortControl, E, HIGH);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e4       	ldi	r27, 0x40	; 64
    262e:	8b a3       	std	Y+35, r24	; 0x23
    2630:	9c a3       	std	Y+36, r25	; 0x24
    2632:	ad a3       	std	Y+37, r26	; 0x25
    2634:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2636:	6b a1       	ldd	r22, Y+35	; 0x23
    2638:	7c a1       	ldd	r23, Y+36	; 0x24
    263a:	8d a1       	ldd	r24, Y+37	; 0x25
    263c:	9e a1       	ldd	r25, Y+38	; 0x26
    263e:	2b ea       	ldi	r18, 0xAB	; 171
    2640:	3a ea       	ldi	r19, 0xAA	; 170
    2642:	4a e2       	ldi	r20, 0x2A	; 42
    2644:	50 e4       	ldi	r21, 0x40	; 64
    2646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	98 a3       	std	Y+32, r25	; 0x20
    2652:	a9 a3       	std	Y+33, r26	; 0x21
    2654:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2656:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2658:	78 a1       	ldd	r23, Y+32	; 0x20
    265a:	89 a1       	ldd	r24, Y+33	; 0x21
    265c:	9a a1       	ldd	r25, Y+34	; 0x22
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	1c f4       	brge	.+6      	; 0x2674 <Lcd_VoidSendData+0x8a>
		__ticks = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	8e 8f       	std	Y+30, r24	; 0x1e
    2672:	91 c0       	rjmp	.+290    	; 0x2796 <Lcd_VoidSendData+0x1ac>
	else if (__tmp > 255)
    2674:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2676:	78 a1       	ldd	r23, Y+32	; 0x20
    2678:	89 a1       	ldd	r24, Y+33	; 0x21
    267a:	9a a1       	ldd	r25, Y+34	; 0x22
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	53 e4       	ldi	r21, 0x43	; 67
    2684:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	0c f0       	brlt	.+2      	; 0x268e <Lcd_VoidSendData+0xa4>
    268c:	7b c0       	rjmp	.+246    	; 0x2784 <Lcd_VoidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    268e:	6b a1       	ldd	r22, Y+35	; 0x23
    2690:	7c a1       	ldd	r23, Y+36	; 0x24
    2692:	8d a1       	ldd	r24, Y+37	; 0x25
    2694:	9e a1       	ldd	r25, Y+38	; 0x26
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a e7       	ldi	r20, 0x7A	; 122
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8a 8f       	std	Y+26, r24	; 0x1a
    26a8:	9b 8f       	std	Y+27, r25	; 0x1b
    26aa:	ac 8f       	std	Y+28, r26	; 0x1c
    26ac:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8e 8b       	std	Y+22, r24	; 0x16
    26c8:	9f 8b       	std	Y+23, r25	; 0x17
    26ca:	a8 8f       	std	Y+24, r26	; 0x18
    26cc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    26ce:	6e 89       	ldd	r22, Y+22	; 0x16
    26d0:	7f 89       	ldd	r23, Y+23	; 0x17
    26d2:	88 8d       	ldd	r24, Y+24	; 0x18
    26d4:	99 8d       	ldd	r25, Y+25	; 0x19
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <Lcd_VoidSendData+0x106>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9d 8b       	std	Y+21, r25	; 0x15
    26ec:	8c 8b       	std	Y+20, r24	; 0x14
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <Lcd_VoidSendData+0x184>
	else if (__tmp > 65535)
    26f0:	6e 89       	ldd	r22, Y+22	; 0x16
    26f2:	7f 89       	ldd	r23, Y+23	; 0x17
    26f4:	88 8d       	ldd	r24, Y+24	; 0x18
    26f6:	99 8d       	ldd	r25, Y+25	; 0x19
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <Lcd_VoidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	6a 8d       	ldd	r22, Y+26	; 0x1a
    270a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    270c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    270e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9d 8b       	std	Y+21, r25	; 0x15
    272e:	8c 8b       	std	Y+20, r24	; 0x14
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <Lcd_VoidSendData+0x166>
    2732:	88 ec       	ldi	r24, 0xC8	; 200
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9b 8b       	std	Y+19, r25	; 0x13
    2738:	8a 8b       	std	Y+18, r24	; 0x12
    273a:	8a 89       	ldd	r24, Y+18	; 0x12
    273c:	9b 89       	ldd	r25, Y+19	; 0x13
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <Lcd_VoidSendData+0x154>
    2742:	9b 8b       	std	Y+19, r25	; 0x13
    2744:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	8c 89       	ldd	r24, Y+20	; 0x14
    2748:	9d 89       	ldd	r25, Y+21	; 0x15
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9d 8b       	std	Y+21, r25	; 0x15
    274e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	8c 89       	ldd	r24, Y+20	; 0x14
    2752:	9d 89       	ldd	r25, Y+21	; 0x15
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <Lcd_VoidSendData+0x148>
    2758:	24 c0       	rjmp	.+72     	; 0x27a2 <Lcd_VoidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6e 89       	ldd	r22, Y+22	; 0x16
    275c:	7f 89       	ldd	r23, Y+23	; 0x17
    275e:	88 8d       	ldd	r24, Y+24	; 0x18
    2760:	99 8d       	ldd	r25, Y+25	; 0x19
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9d 8b       	std	Y+21, r25	; 0x15
    276c:	8c 8b       	std	Y+20, r24	; 0x14
    276e:	8c 89       	ldd	r24, Y+20	; 0x14
    2770:	9d 89       	ldd	r25, Y+21	; 0x15
    2772:	99 8b       	std	Y+17, r25	; 0x11
    2774:	88 8b       	std	Y+16, r24	; 0x10
    2776:	88 89       	ldd	r24, Y+16	; 0x10
    2778:	99 89       	ldd	r25, Y+17	; 0x11
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <Lcd_VoidSendData+0x190>
    277e:	99 8b       	std	Y+17, r25	; 0x11
    2780:	88 8b       	std	Y+16, r24	; 0x10
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <Lcd_VoidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2784:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2786:	78 a1       	ldd	r23, Y+32	; 0x20
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8e 8f       	std	Y+30, r24	; 0x1e
    2796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2798:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	8a 95       	dec	r24
    279e:	f1 f7       	brne	.-4      	; 0x279c <Lcd_VoidSendData+0x1b2>
    27a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(2);
	DIO_SetPinValue(PortControl, E, LOW);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	62 e0       	ldi	r22, 0x02	; 2
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 e0       	ldi	r26, 0x00	; 0
    27b2:	b0 e4       	ldi	r27, 0x40	; 64
    27b4:	8b 87       	std	Y+11, r24	; 0x0b
    27b6:	9c 87       	std	Y+12, r25	; 0x0c
    27b8:	ad 87       	std	Y+13, r26	; 0x0d
    27ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a ef       	ldi	r20, 0xFA	; 250
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    27d6:	98 87       	std	Y+8, r25	; 0x08
    27d8:	a9 87       	std	Y+9, r26	; 0x09
    27da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	2c f4       	brge	.+10     	; 0x27fe <Lcd_VoidSendData+0x214>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <Lcd_VoidSendData+0x292>
	else if (__tmp > 65535)
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	78 85       	ldd	r23, Y+8	; 0x08
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	4c f5       	brge	.+82     	; 0x2868 <Lcd_VoidSendData+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2816:	6b 85       	ldd	r22, Y+11	; 0x0b
    2818:	7c 85       	ldd	r23, Y+12	; 0x0c
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	0f c0       	rjmp	.+30     	; 0x285e <Lcd_VoidSendData+0x274>
    2840:	88 ec       	ldi	r24, 0xC8	; 200
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <Lcd_VoidSendData+0x262>
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <Lcd_VoidSendData+0x256>
    2866:	14 c0       	rjmp	.+40     	; 0x2890 <Lcd_VoidSendData+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <Lcd_VoidSendData+0x29e>
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2890:	a7 96       	adiw	r28, 0x27	; 39
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <Lcd_VoidSendData4Bit>:

void Lcd_VoidSendData4Bit(u8 Copy_U8Data) {
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	c1 5c       	subi	r28, 0xC1	; 193
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 53       	subi	r30, 0x3F	; 63
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 83       	st	Z, r24
	DIO_SetPinValue(PortControl, RS, HIGH);
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	41 e0       	ldi	r20, 0x01	; 1
    28ca:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortControl, RW, LOW);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    28d8:	fe 01       	movw	r30, r28
    28da:	e3 54       	subi	r30, 0x43	; 67
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a0 ea       	ldi	r26, 0xA0	; 160
    28e4:	b1 e4       	ldi	r27, 0x41	; 65
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28ee:	8e 01       	movw	r16, r28
    28f0:	07 54       	subi	r16, 0x47	; 71
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e3 54       	subi	r30, 0x43	; 67
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	2b ea       	ldi	r18, 0xAB	; 171
    2904:	3a ea       	ldi	r19, 0xAA	; 170
    2906:	4a e2       	ldi	r20, 0x2A	; 42
    2908:	50 e4       	ldi	r21, 0x40	; 64
    290a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	e7 54       	subi	r30, 0x47	; 71
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	34 f4       	brge	.+12     	; 0x2946 <Lcd_VoidSendData4Bit+0xa4>
		__ticks = 1;
    293a:	fe 01       	movw	r30, r28
    293c:	e8 54       	subi	r30, 0x48	; 72
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 83       	st	Z, r24
    2944:	e0 c0       	rjmp	.+448    	; 0x2b06 <Lcd_VoidSendData4Bit+0x264>
	else if (__tmp > 255)
    2946:	fe 01       	movw	r30, r28
    2948:	e7 54       	subi	r30, 0x47	; 71
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	0c f0       	brlt	.+2      	; 0x2966 <Lcd_VoidSendData4Bit+0xc4>
    2964:	c0 c0       	rjmp	.+384    	; 0x2ae6 <Lcd_VoidSendData4Bit+0x244>
	{
		_delay_ms(__us / 1000.0);
    2966:	fe 01       	movw	r30, r28
    2968:	e3 54       	subi	r30, 0x43	; 67
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	fe 01       	movw	r30, r28
    2986:	ec 54       	subi	r30, 0x4C	; 76
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 83       	st	Z, r24
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	a2 83       	std	Z+2, r26	; 0x02
    2990:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2992:	8e 01       	movw	r16, r28
    2994:	00 55       	subi	r16, 0x50	; 80
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	ec 54       	subi	r30, 0x4C	; 76
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a ef       	ldi	r20, 0xFA	; 250
    29ac:	54 e4       	ldi	r21, 0x44	; 68
    29ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	f8 01       	movw	r30, r16
    29b8:	80 83       	st	Z, r24
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	a2 83       	std	Z+2, r26	; 0x02
    29be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c0:	fe 01       	movw	r30, r28
    29c2:	e0 55       	subi	r30, 0x50	; 80
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	44 f4       	brge	.+16     	; 0x29ee <Lcd_VoidSendData4Bit+0x14c>
		__ticks = 1;
    29de:	fe 01       	movw	r30, r28
    29e0:	e2 55       	subi	r30, 0x52	; 82
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	64 c0       	rjmp	.+200    	; 0x2ab6 <Lcd_VoidSendData4Bit+0x214>
	else if (__tmp > 65535)
    29ee:	fe 01       	movw	r30, r28
    29f0:	e0 55       	subi	r30, 0x50	; 80
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	0c f0       	brlt	.+2      	; 0x2a0e <Lcd_VoidSendData4Bit+0x16c>
    2a0c:	43 c0       	rjmp	.+134    	; 0x2a94 <Lcd_VoidSendData4Bit+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ec 54       	subi	r30, 0x4C	; 76
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8e 01       	movw	r16, r28
    2a2e:	02 55       	subi	r16, 0x52	; 82
    2a30:	1f 4f       	sbci	r17, 0xFF	; 255
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	f8 01       	movw	r30, r16
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
    2a44:	1f c0       	rjmp	.+62     	; 0x2a84 <Lcd_VoidSendData4Bit+0x1e2>
    2a46:	fe 01       	movw	r30, r28
    2a48:	e4 55       	subi	r30, 0x54	; 84
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	88 ec       	ldi	r24, 0xC8	; 200
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	fe 01       	movw	r30, r28
    2a56:	e4 55       	subi	r30, 0x54	; 84
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <Lcd_VoidSendData4Bit+0x1bc>
    2a62:	fe 01       	movw	r30, r28
    2a64:	e4 55       	subi	r30, 0x54	; 84
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6c:	de 01       	movw	r26, r28
    2a6e:	a2 55       	subi	r26, 0x52	; 82
    2a70:	bf 4f       	sbci	r27, 0xFF	; 255
    2a72:	fe 01       	movw	r30, r28
    2a74:	e2 55       	subi	r30, 0x52	; 82
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	11 96       	adiw	r26, 0x01	; 1
    2a80:	9c 93       	st	X, r25
    2a82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	fe 01       	movw	r30, r28
    2a86:	e2 55       	subi	r30, 0x52	; 82
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	d1 f6       	brne	.-76     	; 0x2a46 <Lcd_VoidSendData4Bit+0x1a4>
    2a92:	4b c0       	rjmp	.+150    	; 0x2b2a <Lcd_VoidSendData4Bit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	8e 01       	movw	r16, r28
    2a96:	02 55       	subi	r16, 0x52	; 82
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e0 55       	subi	r30, 0x50	; 80
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
    2ab6:	de 01       	movw	r26, r28
    2ab8:	a6 55       	subi	r26, 0x56	; 86
    2aba:	bf 4f       	sbci	r27, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e2 55       	subi	r30, 0x52	; 82
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	11 96       	adiw	r26, 0x01	; 1
    2ac8:	9c 93       	st	X, r25
    2aca:	8e 93       	st	-X, r24
    2acc:	fe 01       	movw	r30, r28
    2ace:	e6 55       	subi	r30, 0x56	; 86
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <Lcd_VoidSendData4Bit+0x234>
    2ada:	fe 01       	movw	r30, r28
    2adc:	e6 55       	subi	r30, 0x56	; 86
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
    2ae4:	22 c0       	rjmp	.+68     	; 0x2b2a <Lcd_VoidSendData4Bit+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ae6:	8e 01       	movw	r16, r28
    2ae8:	08 54       	subi	r16, 0x48	; 72
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	fe 01       	movw	r30, r28
    2aee:	e7 54       	subi	r30, 0x47	; 71
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	f8 01       	movw	r30, r16
    2b04:	80 83       	st	Z, r24
    2b06:	de 01       	movw	r26, r28
    2b08:	a7 55       	subi	r26, 0x57	; 87
    2b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e8 54       	subi	r30, 0x48	; 72
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 55       	subi	r30, 0x57	; 87
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8a 95       	dec	r24
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <Lcd_VoidSendData4Bit+0x27c>
    2b22:	fe 01       	movw	r30, r28
    2b24:	e7 55       	subi	r30, 0x57	; 87
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 83       	st	Z, r24
	/*_delay_ms(1);
	 DIO_SetPinValue(PortControl, E, HIGH);
	 _delay_ms(1);*/
	_delay_us(20);
	DIO_SetPinValue(PortControl, E, HIGH);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    2b34:	fe 01       	movw	r30, r28
    2b36:	eb 55       	subi	r30, 0x5B	; 91
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a6 e1       	ldi	r26, 0x16	; 22
    2b40:	b3 e4       	ldi	r27, 0x43	; 67
    2b42:	80 83       	st	Z, r24
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	a2 83       	std	Z+2, r26	; 0x02
    2b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	0f 55       	subi	r16, 0x5F	; 95
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	fe 01       	movw	r30, r28
    2b52:	eb 55       	subi	r30, 0x5B	; 91
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	2b ea       	ldi	r18, 0xAB	; 171
    2b60:	3a ea       	ldi	r19, 0xAA	; 170
    2b62:	4a e2       	ldi	r20, 0x2A	; 42
    2b64:	50 e4       	ldi	r21, 0x40	; 64
    2b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	80 83       	st	Z, r24
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ef 55       	subi	r30, 0x5F	; 95
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	34 f4       	brge	.+12     	; 0x2ba2 <Lcd_VoidSendData4Bit+0x300>
		__ticks = 1;
    2b96:	fe 01       	movw	r30, r28
    2b98:	e0 56       	subi	r30, 0x60	; 96
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 83       	st	Z, r24
    2ba0:	e0 c0       	rjmp	.+448    	; 0x2d62 <Lcd_VoidSendData4Bit+0x4c0>
	else if (__tmp > 255)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ef 55       	subi	r30, 0x5F	; 95
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	53 e4       	ldi	r21, 0x43	; 67
    2bb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <Lcd_VoidSendData4Bit+0x320>
    2bc0:	c0 c0       	rjmp	.+384    	; 0x2d42 <Lcd_VoidSendData4Bit+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	eb 55       	subi	r30, 0x5B	; 91
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	fe 01       	movw	r30, r28
    2be2:	e4 56       	subi	r30, 0x64	; 100
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 83       	st	Z, r24
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	a2 83       	std	Z+2, r26	; 0x02
    2bec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	8e 01       	movw	r16, r28
    2bf0:	08 56       	subi	r16, 0x68	; 104
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e4 56       	subi	r30, 0x64	; 100
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	f8 01       	movw	r30, r16
    2c14:	80 83       	st	Z, r24
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	a2 83       	std	Z+2, r26	; 0x02
    2c1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e8 56       	subi	r30, 0x68	; 104
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	44 f4       	brge	.+16     	; 0x2c4a <Lcd_VoidSendData4Bit+0x3a8>
		__ticks = 1;
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ea 56       	subi	r30, 0x6A	; 106
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
    2c48:	64 c0       	rjmp	.+200    	; 0x2d12 <Lcd_VoidSendData4Bit+0x470>
	else if (__tmp > 65535)
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e8 56       	subi	r30, 0x68	; 104
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	3f ef       	ldi	r19, 0xFF	; 255
    2c5c:	4f e7       	ldi	r20, 0x7F	; 127
    2c5e:	57 e4       	ldi	r21, 0x47	; 71
    2c60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c64:	18 16       	cp	r1, r24
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <Lcd_VoidSendData4Bit+0x3c8>
    2c68:	43 c0       	rjmp	.+134    	; 0x2cf0 <Lcd_VoidSendData4Bit+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e4 56       	subi	r30, 0x64	; 100
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8e 01       	movw	r16, r28
    2c8a:	0a 56       	subi	r16, 0x6A	; 106
    2c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	1f c0       	rjmp	.+62     	; 0x2ce0 <Lcd_VoidSendData4Bit+0x43e>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	ec 56       	subi	r30, 0x6C	; 108
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	88 ec       	ldi	r24, 0xC8	; 200
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ec 56       	subi	r30, 0x6C	; 108
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 81       	ld	r24, Z
    2cb8:	91 81       	ldd	r25, Z+1	; 0x01
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <Lcd_VoidSendData4Bit+0x418>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ec 56       	subi	r30, 0x6C	; 108
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	de 01       	movw	r26, r28
    2cca:	aa 56       	subi	r26, 0x6A	; 106
    2ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ea 56       	subi	r30, 0x6A	; 106
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	11 96       	adiw	r26, 0x01	; 1
    2cdc:	9c 93       	st	X, r25
    2cde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ea 56       	subi	r30, 0x6A	; 106
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	d1 f6       	brne	.-76     	; 0x2ca2 <Lcd_VoidSendData4Bit+0x400>
    2cee:	4b c0       	rjmp	.+150    	; 0x2d86 <Lcd_VoidSendData4Bit+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	8e 01       	movw	r16, r28
    2cf2:	0a 56       	subi	r16, 0x6A	; 106
    2cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e8 56       	subi	r30, 0x68	; 104
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
    2d12:	de 01       	movw	r26, r28
    2d14:	ae 56       	subi	r26, 0x6E	; 110
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ea 56       	subi	r30, 0x6A	; 106
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	9c 93       	st	X, r25
    2d26:	8e 93       	st	-X, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ee 56       	subi	r30, 0x6E	; 110
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <Lcd_VoidSendData4Bit+0x490>
    2d36:	fe 01       	movw	r30, r28
    2d38:	ee 56       	subi	r30, 0x6E	; 110
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	22 c0       	rjmp	.+68     	; 0x2d86 <Lcd_VoidSendData4Bit+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d42:	8e 01       	movw	r16, r28
    2d44:	00 56       	subi	r16, 0x60	; 96
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ef 55       	subi	r30, 0x5F	; 95
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	f8 01       	movw	r30, r16
    2d60:	80 83       	st	Z, r24
    2d62:	de 01       	movw	r26, r28
    2d64:	af 56       	subi	r26, 0x6F	; 111
    2d66:	bf 4f       	sbci	r27, 0xFF	; 255
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e0 56       	subi	r30, 0x60	; 96
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 56       	subi	r30, 0x6F	; 111
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 81       	ld	r24, Z
    2d7a:	8a 95       	dec	r24
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <Lcd_VoidSendData4Bit+0x4d8>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ef 56       	subi	r30, 0x6F	; 111
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 83       	st	Z, r24
	_delay_us(150);
	DIO_SetPinValue(PortData, PIN4, GET_BIT(Copy_U8Data, 4));
    2d86:	fe 01       	movw	r30, r28
    2d88:	ef 53       	subi	r30, 0x3F	; 63
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	82 95       	swap	r24
    2d90:	8f 70       	andi	r24, 0x0F	; 15
    2d92:	98 2f       	mov	r25, r24
    2d94:	91 70       	andi	r25, 0x01	; 1
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	64 e0       	ldi	r22, 0x04	; 4
    2d9a:	49 2f       	mov	r20, r25
    2d9c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN5, GET_BIT(Copy_U8Data, 5));
    2da0:	fe 01       	movw	r30, r28
    2da2:	ef 53       	subi	r30, 0x3F	; 63
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	82 95       	swap	r24
    2daa:	86 95       	lsr	r24
    2dac:	87 70       	andi	r24, 0x07	; 7
    2dae:	98 2f       	mov	r25, r24
    2db0:	91 70       	andi	r25, 0x01	; 1
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	65 e0       	ldi	r22, 0x05	; 5
    2db6:	49 2f       	mov	r20, r25
    2db8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN6, GET_BIT(Copy_U8Data, 6));
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ef 53       	subi	r30, 0x3F	; 63
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	82 95       	swap	r24
    2dc6:	86 95       	lsr	r24
    2dc8:	86 95       	lsr	r24
    2dca:	83 70       	andi	r24, 0x03	; 3
    2dcc:	98 2f       	mov	r25, r24
    2dce:	91 70       	andi	r25, 0x01	; 1
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	66 e0       	ldi	r22, 0x06	; 6
    2dd4:	49 2f       	mov	r20, r25
    2dd6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN7, GET_BIT(Copy_U8Data, 7));
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ef 53       	subi	r30, 0x3F	; 63
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	98 2f       	mov	r25, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	99 27       	eor	r25, r25
    2de8:	99 1f       	adc	r25, r25
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	67 e0       	ldi	r22, 0x07	; 7
    2dee:	49 2f       	mov	r20, r25
    2df0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e3 57       	subi	r30, 0x73	; 115
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a0 ea       	ldi	r26, 0xA0	; 160
    2e00:	b2 e4       	ldi	r27, 0x42	; 66
    2e02:	80 83       	st	Z, r24
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	a2 83       	std	Z+2, r26	; 0x02
    2e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e0a:	8e 01       	movw	r16, r28
    2e0c:	07 57       	subi	r16, 0x77	; 119
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	fe 01       	movw	r30, r28
    2e12:	e3 57       	subi	r30, 0x73	; 115
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	2b ea       	ldi	r18, 0xAB	; 171
    2e20:	3a ea       	ldi	r19, 0xAA	; 170
    2e22:	4a e2       	ldi	r20, 0x2A	; 42
    2e24:	50 e4       	ldi	r21, 0x40	; 64
    2e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e7 57       	subi	r30, 0x77	; 119
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	34 f4       	brge	.+12     	; 0x2e62 <Lcd_VoidSendData4Bit+0x5c0>
		__ticks = 1;
    2e56:	fe 01       	movw	r30, r28
    2e58:	e8 57       	subi	r30, 0x78	; 120
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 83       	st	Z, r24
    2e60:	e0 c0       	rjmp	.+448    	; 0x3022 <Lcd_VoidSendData4Bit+0x780>
	else if (__tmp > 255)
    2e62:	fe 01       	movw	r30, r28
    2e64:	e7 57       	subi	r30, 0x77	; 119
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	0c f0       	brlt	.+2      	; 0x2e82 <Lcd_VoidSendData4Bit+0x5e0>
    2e80:	c0 c0       	rjmp	.+384    	; 0x3002 <Lcd_VoidSendData4Bit+0x760>
	{
		_delay_ms(__us / 1000.0);
    2e82:	fe 01       	movw	r30, r28
    2e84:	e3 57       	subi	r30, 0x73	; 115
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4a e7       	ldi	r20, 0x7A	; 122
    2e96:	54 e4       	ldi	r21, 0x44	; 68
    2e98:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ec 57       	subi	r30, 0x7C	; 124
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	00 58       	subi	r16, 0x80	; 128
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ec 57       	subi	r30, 0x7C	; 124
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a ef       	ldi	r20, 0xFA	; 250
    2ec8:	54 e4       	ldi	r21, 0x44	; 68
    2eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	80 83       	st	Z, r24
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	a2 83       	std	Z+2, r26	; 0x02
    2eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2edc:	fe 01       	movw	r30, r28
    2ede:	e0 58       	subi	r30, 0x80	; 128
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	44 f4       	brge	.+16     	; 0x2f0a <Lcd_VoidSendData4Bit+0x668>
		__ticks = 1;
    2efa:	fe 01       	movw	r30, r28
    2efc:	e2 58       	subi	r30, 0x82	; 130
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	64 c0       	rjmp	.+200    	; 0x2fd2 <Lcd_VoidSendData4Bit+0x730>
	else if (__tmp > 65535)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e0 58       	subi	r30, 0x80	; 128
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <Lcd_VoidSendData4Bit+0x688>
    2f28:	43 c0       	rjmp	.+134    	; 0x2fb0 <Lcd_VoidSendData4Bit+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ec 57       	subi	r30, 0x7C	; 124
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8e 01       	movw	r16, r28
    2f4a:	02 58       	subi	r16, 0x82	; 130
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	80 83       	st	Z, r24
    2f60:	1f c0       	rjmp	.+62     	; 0x2fa0 <Lcd_VoidSendData4Bit+0x6fe>
    2f62:	fe 01       	movw	r30, r28
    2f64:	e4 58       	subi	r30, 0x84	; 132
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f70:	fe 01       	movw	r30, r28
    2f72:	e4 58       	subi	r30, 0x84	; 132
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <Lcd_VoidSendData4Bit+0x6d8>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e4 58       	subi	r30, 0x84	; 132
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	de 01       	movw	r26, r28
    2f8a:	a2 58       	subi	r26, 0x82	; 130
    2f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e2 58       	subi	r30, 0x82	; 130
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	11 96       	adiw	r26, 0x01	; 1
    2f9c:	9c 93       	st	X, r25
    2f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e2 58       	subi	r30, 0x82	; 130
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	d1 f6       	brne	.-76     	; 0x2f62 <Lcd_VoidSendData4Bit+0x6c0>
    2fae:	4b c0       	rjmp	.+150    	; 0x3046 <Lcd_VoidSendData4Bit+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	02 58       	subi	r16, 0x82	; 130
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e0 58       	subi	r30, 0x80	; 128
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	de 01       	movw	r26, r28
    2fd4:	a6 58       	subi	r26, 0x86	; 134
    2fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e2 58       	subi	r30, 0x82	; 130
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e6 58       	subi	r30, 0x86	; 134
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <Lcd_VoidSendData4Bit+0x750>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e6 58       	subi	r30, 0x86	; 134
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
    3000:	22 c0       	rjmp	.+68     	; 0x3046 <Lcd_VoidSendData4Bit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3002:	8e 01       	movw	r16, r28
    3004:	08 57       	subi	r16, 0x78	; 120
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	fe 01       	movw	r30, r28
    300a:	e7 57       	subi	r30, 0x77	; 119
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	60 81       	ld	r22, Z
    3010:	71 81       	ldd	r23, Z+1	; 0x01
    3012:	82 81       	ldd	r24, Z+2	; 0x02
    3014:	93 81       	ldd	r25, Z+3	; 0x03
    3016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
    3022:	de 01       	movw	r26, r28
    3024:	a7 58       	subi	r26, 0x87	; 135
    3026:	bf 4f       	sbci	r27, 0xFF	; 255
    3028:	fe 01       	movw	r30, r28
    302a:	e8 57       	subi	r30, 0x78	; 120
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3032:	fe 01       	movw	r30, r28
    3034:	e7 58       	subi	r30, 0x87	; 135
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	8a 95       	dec	r24
    303c:	f1 f7       	brne	.-4      	; 0x303a <Lcd_VoidSendData4Bit+0x798>
    303e:	fe 01       	movw	r30, r28
    3040:	e7 58       	subi	r30, 0x87	; 135
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 83       	st	Z, r24
	/*DIO_SetPinValue(PortControl, E, HIGH);
	 _delay_ms(2);
	 DIO_SetPinValue(PortControl, E, LOW);
	 _delay_us(2);*/
	_delay_us(80);
	DIO_SetPinValue(PortControl, E, LOW);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	62 e0       	ldi	r22, 0x02	; 2
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    3050:	fe 01       	movw	r30, r28
    3052:	eb 58       	subi	r30, 0x8B	; 139
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 ef       	ldi	r26, 0xF0	; 240
    305c:	b1 e4       	ldi	r27, 0x41	; 65
    305e:	80 83       	st	Z, r24
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	a2 83       	std	Z+2, r26	; 0x02
    3064:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3066:	8e 01       	movw	r16, r28
    3068:	0f 58       	subi	r16, 0x8F	; 143
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	fe 01       	movw	r30, r28
    306e:	eb 58       	subi	r30, 0x8B	; 139
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	2b ea       	ldi	r18, 0xAB	; 171
    307c:	3a ea       	ldi	r19, 0xAA	; 170
    307e:	4a e2       	ldi	r20, 0x2A	; 42
    3080:	50 e4       	ldi	r21, 0x40	; 64
    3082:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	f8 01       	movw	r30, r16
    308c:	80 83       	st	Z, r24
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	a2 83       	std	Z+2, r26	; 0x02
    3092:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3094:	fe 01       	movw	r30, r28
    3096:	ef 58       	subi	r30, 0x8F	; 143
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f e3       	ldi	r21, 0x3F	; 63
    30aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	34 f4       	brge	.+12     	; 0x30be <Lcd_VoidSendData4Bit+0x81c>
		__ticks = 1;
    30b2:	fe 01       	movw	r30, r28
    30b4:	e0 59       	subi	r30, 0x90	; 144
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	80 83       	st	Z, r24
    30bc:	e0 c0       	rjmp	.+448    	; 0x327e <Lcd_VoidSendData4Bit+0x9dc>
	else if (__tmp > 255)
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 58       	subi	r30, 0x8F	; 143
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	53 e4       	ldi	r21, 0x43	; 67
    30d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	0c f0       	brlt	.+2      	; 0x30de <Lcd_VoidSendData4Bit+0x83c>
    30dc:	c0 c0       	rjmp	.+384    	; 0x325e <Lcd_VoidSendData4Bit+0x9bc>
	{
		_delay_ms(__us / 1000.0);
    30de:	fe 01       	movw	r30, r28
    30e0:	eb 58       	subi	r30, 0x8B	; 139
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a e7       	ldi	r20, 0x7A	; 122
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	fe 01       	movw	r30, r28
    30fe:	e4 59       	subi	r30, 0x94	; 148
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	8e 01       	movw	r16, r28
    310c:	08 59       	subi	r16, 0x98	; 152
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	e4 59       	subi	r30, 0x94	; 148
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	f8 01       	movw	r30, r16
    3130:	80 83       	st	Z, r24
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	a2 83       	std	Z+2, r26	; 0x02
    3136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3138:	fe 01       	movw	r30, r28
    313a:	e8 59       	subi	r30, 0x98	; 152
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	44 f4       	brge	.+16     	; 0x3166 <Lcd_VoidSendData4Bit+0x8c4>
		__ticks = 1;
    3156:	fe 01       	movw	r30, r28
    3158:	ea 59       	subi	r30, 0x9A	; 154
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	64 c0       	rjmp	.+200    	; 0x322e <Lcd_VoidSendData4Bit+0x98c>
	else if (__tmp > 65535)
    3166:	fe 01       	movw	r30, r28
    3168:	e8 59       	subi	r30, 0x98	; 152
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	0c f0       	brlt	.+2      	; 0x3186 <Lcd_VoidSendData4Bit+0x8e4>
    3184:	43 c0       	rjmp	.+134    	; 0x320c <Lcd_VoidSendData4Bit+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	fe 01       	movw	r30, r28
    3188:	e4 59       	subi	r30, 0x94	; 148
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8e 01       	movw	r16, r28
    31a6:	0a 59       	subi	r16, 0x9A	; 154
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	f8 01       	movw	r30, r16
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	1f c0       	rjmp	.+62     	; 0x31fc <Lcd_VoidSendData4Bit+0x95a>
    31be:	fe 01       	movw	r30, r28
    31c0:	ec 59       	subi	r30, 0x9C	; 156
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31cc:	fe 01       	movw	r30, r28
    31ce:	ec 59       	subi	r30, 0x9C	; 156
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <Lcd_VoidSendData4Bit+0x934>
    31da:	fe 01       	movw	r30, r28
    31dc:	ec 59       	subi	r30, 0x9C	; 156
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	de 01       	movw	r26, r28
    31e6:	aa 59       	subi	r26, 0x9A	; 154
    31e8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ea:	fe 01       	movw	r30, r28
    31ec:	ea 59       	subi	r30, 0x9A	; 154
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	11 96       	adiw	r26, 0x01	; 1
    31f8:	9c 93       	st	X, r25
    31fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	fe 01       	movw	r30, r28
    31fe:	ea 59       	subi	r30, 0x9A	; 154
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	d1 f6       	brne	.-76     	; 0x31be <Lcd_VoidSendData4Bit+0x91c>
    320a:	4b c0       	rjmp	.+150    	; 0x32a2 <Lcd_VoidSendData4Bit+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	8e 01       	movw	r16, r28
    320e:	0a 59       	subi	r16, 0x9A	; 154
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e8 59       	subi	r30, 0x98	; 152
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	f8 01       	movw	r30, r16
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	de 01       	movw	r26, r28
    3230:	ae 59       	subi	r26, 0x9E	; 158
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	ea 59       	subi	r30, 0x9A	; 154
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
    3244:	fe 01       	movw	r30, r28
    3246:	ee 59       	subi	r30, 0x9E	; 158
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <Lcd_VoidSendData4Bit+0x9ac>
    3252:	fe 01       	movw	r30, r28
    3254:	ee 59       	subi	r30, 0x9E	; 158
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	22 c0       	rjmp	.+68     	; 0x32a2 <Lcd_VoidSendData4Bit+0xa00>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    325e:	8e 01       	movw	r16, r28
    3260:	00 59       	subi	r16, 0x90	; 144
    3262:	1f 4f       	sbci	r17, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	ef 58       	subi	r30, 0x8F	; 143
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	60 81       	ld	r22, Z
    326c:	71 81       	ldd	r23, Z+1	; 0x01
    326e:	82 81       	ldd	r24, Z+2	; 0x02
    3270:	93 81       	ldd	r25, Z+3	; 0x03
    3272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	f8 01       	movw	r30, r16
    327c:	80 83       	st	Z, r24
    327e:	de 01       	movw	r26, r28
    3280:	af 59       	subi	r26, 0x9F	; 159
    3282:	bf 4f       	sbci	r27, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	e0 59       	subi	r30, 0x90	; 144
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    328e:	fe 01       	movw	r30, r28
    3290:	ef 59       	subi	r30, 0x9F	; 159
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	8a 95       	dec	r24
    3298:	f1 f7       	brne	.-4      	; 0x3296 <Lcd_VoidSendData4Bit+0x9f4>
    329a:	fe 01       	movw	r30, r28
    329c:	ef 59       	subi	r30, 0x9F	; 159
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 83       	st	Z, r24
    32a2:	fe 01       	movw	r30, r28
    32a4:	e3 5a       	subi	r30, 0xA3	; 163
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a0 ea       	ldi	r26, 0xA0	; 160
    32ae:	b1 e4       	ldi	r27, 0x41	; 65
    32b0:	80 83       	st	Z, r24
    32b2:	91 83       	std	Z+1, r25	; 0x01
    32b4:	a2 83       	std	Z+2, r26	; 0x02
    32b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32b8:	8e 01       	movw	r16, r28
    32ba:	07 5a       	subi	r16, 0xA7	; 167
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	fe 01       	movw	r30, r28
    32c0:	e3 5a       	subi	r30, 0xA3	; 163
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	2b ea       	ldi	r18, 0xAB	; 171
    32ce:	3a ea       	ldi	r19, 0xAA	; 170
    32d0:	4a e2       	ldi	r20, 0x2A	; 42
    32d2:	50 e4       	ldi	r21, 0x40	; 64
    32d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	f8 01       	movw	r30, r16
    32de:	80 83       	st	Z, r24
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	a2 83       	std	Z+2, r26	; 0x02
    32e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32e6:	fe 01       	movw	r30, r28
    32e8:	e7 5a       	subi	r30, 0xA7	; 167
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e8       	ldi	r20, 0x80	; 128
    32fa:	5f e3       	ldi	r21, 0x3F	; 63
    32fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3300:	88 23       	and	r24, r24
    3302:	34 f4       	brge	.+12     	; 0x3310 <Lcd_VoidSendData4Bit+0xa6e>
		__ticks = 1;
    3304:	fe 01       	movw	r30, r28
    3306:	e8 5a       	subi	r30, 0xA8	; 168
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	80 83       	st	Z, r24
    330e:	e0 c0       	rjmp	.+448    	; 0x34d0 <Lcd_VoidSendData4Bit+0xc2e>
	else if (__tmp > 255)
    3310:	fe 01       	movw	r30, r28
    3312:	e7 5a       	subi	r30, 0xA7	; 167
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	53 e4       	ldi	r21, 0x43	; 67
    3326:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	0c f0       	brlt	.+2      	; 0x3330 <Lcd_VoidSendData4Bit+0xa8e>
    332e:	c0 c0       	rjmp	.+384    	; 0x34b0 <Lcd_VoidSendData4Bit+0xc0e>
	{
		_delay_ms(__us / 1000.0);
    3330:	fe 01       	movw	r30, r28
    3332:	e3 5a       	subi	r30, 0xA3	; 163
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	4a e7       	ldi	r20, 0x7A	; 122
    3344:	54 e4       	ldi	r21, 0x44	; 68
    3346:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	fe 01       	movw	r30, r28
    3350:	ec 5a       	subi	r30, 0xAC	; 172
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 83       	st	Z, r24
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	a2 83       	std	Z+2, r26	; 0x02
    335a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	8e 01       	movw	r16, r28
    335e:	00 5b       	subi	r16, 0xB0	; 176
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	fe 01       	movw	r30, r28
    3364:	ec 5a       	subi	r30, 0xAC	; 172
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4a ef       	ldi	r20, 0xFA	; 250
    3376:	54 e4       	ldi	r21, 0x44	; 68
    3378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	a2 83       	std	Z+2, r26	; 0x02
    3388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338a:	fe 01       	movw	r30, r28
    338c:	e0 5b       	subi	r30, 0xB0	; 176
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e8       	ldi	r20, 0x80	; 128
    339e:	5f e3       	ldi	r21, 0x3F	; 63
    33a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33a4:	88 23       	and	r24, r24
    33a6:	44 f4       	brge	.+16     	; 0x33b8 <Lcd_VoidSendData4Bit+0xb16>
		__ticks = 1;
    33a8:	fe 01       	movw	r30, r28
    33aa:	e2 5b       	subi	r30, 0xB2	; 178
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	64 c0       	rjmp	.+200    	; 0x3480 <Lcd_VoidSendData4Bit+0xbde>
	else if (__tmp > 65535)
    33b8:	fe 01       	movw	r30, r28
    33ba:	e0 5b       	subi	r30, 0xB0	; 176
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <Lcd_VoidSendData4Bit+0xb36>
    33d6:	43 c0       	rjmp	.+134    	; 0x345e <Lcd_VoidSendData4Bit+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d8:	fe 01       	movw	r30, r28
    33da:	ec 5a       	subi	r30, 0xAC	; 172
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e2       	ldi	r20, 0x20	; 32
    33ec:	51 e4       	ldi	r21, 0x41	; 65
    33ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8e 01       	movw	r16, r28
    33f8:	02 5b       	subi	r16, 0xB2	; 178
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	1f c0       	rjmp	.+62     	; 0x344e <Lcd_VoidSendData4Bit+0xbac>
    3410:	fe 01       	movw	r30, r28
    3412:	e4 5b       	subi	r30, 0xB4	; 180
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	88 ec       	ldi	r24, 0xC8	; 200
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    341e:	fe 01       	movw	r30, r28
    3420:	e4 5b       	subi	r30, 0xB4	; 180
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <Lcd_VoidSendData4Bit+0xb86>
    342c:	fe 01       	movw	r30, r28
    342e:	e4 5b       	subi	r30, 0xB4	; 180
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	de 01       	movw	r26, r28
    3438:	a2 5b       	subi	r26, 0xB2	; 178
    343a:	bf 4f       	sbci	r27, 0xFF	; 255
    343c:	fe 01       	movw	r30, r28
    343e:	e2 5b       	subi	r30, 0xB2	; 178
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	91 81       	ldd	r25, Z+1	; 0x01
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	11 96       	adiw	r26, 0x01	; 1
    344a:	9c 93       	st	X, r25
    344c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	fe 01       	movw	r30, r28
    3450:	e2 5b       	subi	r30, 0xB2	; 178
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	d1 f6       	brne	.-76     	; 0x3410 <Lcd_VoidSendData4Bit+0xb6e>
    345c:	4b c0       	rjmp	.+150    	; 0x34f4 <Lcd_VoidSendData4Bit+0xc52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	8e 01       	movw	r16, r28
    3460:	02 5b       	subi	r16, 0xB2	; 178
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	fe 01       	movw	r30, r28
    3466:	e0 5b       	subi	r30, 0xB0	; 176
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	f8 01       	movw	r30, r16
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	de 01       	movw	r26, r28
    3482:	a6 5b       	subi	r26, 0xB6	; 182
    3484:	bf 4f       	sbci	r27, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	e2 5b       	subi	r30, 0xB2	; 178
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	11 96       	adiw	r26, 0x01	; 1
    3492:	9c 93       	st	X, r25
    3494:	8e 93       	st	-X, r24
    3496:	fe 01       	movw	r30, r28
    3498:	e6 5b       	subi	r30, 0xB6	; 182
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <Lcd_VoidSendData4Bit+0xbfe>
    34a4:	fe 01       	movw	r30, r28
    34a6:	e6 5b       	subi	r30, 0xB6	; 182
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
    34ae:	22 c0       	rjmp	.+68     	; 0x34f4 <Lcd_VoidSendData4Bit+0xc52>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34b0:	8e 01       	movw	r16, r28
    34b2:	08 5a       	subi	r16, 0xA8	; 168
    34b4:	1f 4f       	sbci	r17, 0xFF	; 255
    34b6:	fe 01       	movw	r30, r28
    34b8:	e7 5a       	subi	r30, 0xA7	; 167
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	f8 01       	movw	r30, r16
    34ce:	80 83       	st	Z, r24
    34d0:	de 01       	movw	r26, r28
    34d2:	a7 5b       	subi	r26, 0xB7	; 183
    34d4:	bf 4f       	sbci	r27, 0xFF	; 255
    34d6:	fe 01       	movw	r30, r28
    34d8:	e8 5a       	subi	r30, 0xA8	; 168
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34e0:	fe 01       	movw	r30, r28
    34e2:	e7 5b       	subi	r30, 0xB7	; 183
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	8a 95       	dec	r24
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <Lcd_VoidSendData4Bit+0xc46>
    34ec:	fe 01       	movw	r30, r28
    34ee:	e7 5b       	subi	r30, 0xB7	; 183
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 83       	st	Z, r24
	_delay_us(30);

	_delay_us(20);
	DIO_SetPinValue(PortControl, E, HIGH);
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	62 e0       	ldi	r22, 0x02	; 2
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    34fe:	fe 01       	movw	r30, r28
    3500:	eb 5b       	subi	r30, 0xBB	; 187
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	a6 e1       	ldi	r26, 0x16	; 22
    350a:	b3 e4       	ldi	r27, 0x43	; 67
    350c:	80 83       	st	Z, r24
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	a2 83       	std	Z+2, r26	; 0x02
    3512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3514:	8e 01       	movw	r16, r28
    3516:	0f 5b       	subi	r16, 0xBF	; 191
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	fe 01       	movw	r30, r28
    351c:	eb 5b       	subi	r30, 0xBB	; 187
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	60 81       	ld	r22, Z
    3522:	71 81       	ldd	r23, Z+1	; 0x01
    3524:	82 81       	ldd	r24, Z+2	; 0x02
    3526:	93 81       	ldd	r25, Z+3	; 0x03
    3528:	2b ea       	ldi	r18, 0xAB	; 171
    352a:	3a ea       	ldi	r19, 0xAA	; 170
    352c:	4a e2       	ldi	r20, 0x2A	; 42
    352e:	50 e4       	ldi	r21, 0x40	; 64
    3530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	f8 01       	movw	r30, r16
    353a:	80 83       	st	Z, r24
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	a2 83       	std	Z+2, r26	; 0x02
    3540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3542:	fe 01       	movw	r30, r28
    3544:	ef 5b       	subi	r30, 0xBF	; 191
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	60 81       	ld	r22, Z
    354a:	71 81       	ldd	r23, Z+1	; 0x01
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	34 f4       	brge	.+12     	; 0x356c <Lcd_VoidSendData4Bit+0xcca>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	fe 01       	movw	r30, r28
    3564:	e0 5c       	subi	r30, 0xC0	; 192
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	80 83       	st	Z, r24
    356a:	9d c0       	rjmp	.+314    	; 0x36a6 <Lcd_VoidSendData4Bit+0xe04>
	else if (__tmp > 255)
    356c:	fe 01       	movw	r30, r28
    356e:	ef 5b       	subi	r30, 0xBF	; 191
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	53 e4       	ldi	r21, 0x43	; 67
    3582:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	0c f0       	brlt	.+2      	; 0x358c <Lcd_VoidSendData4Bit+0xcea>
    358a:	7e c0       	rjmp	.+252    	; 0x3688 <Lcd_VoidSendData4Bit+0xde6>
	{
		_delay_ms(__us / 1000.0);
    358c:	fe 01       	movw	r30, r28
    358e:	eb 5b       	subi	r30, 0xBB	; 187
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	4a e7       	ldi	r20, 0x7A	; 122
    35a0:	54 e4       	ldi	r21, 0x44	; 68
    35a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8c af       	std	Y+60, r24	; 0x3c
    35ac:	9d af       	std	Y+61, r25	; 0x3d
    35ae:	ae af       	std	Y+62, r26	; 0x3e
    35b0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    35b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    35b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    35b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a ef       	ldi	r20, 0xFA	; 250
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	88 af       	std	Y+56, r24	; 0x38
    35cc:	99 af       	std	Y+57, r25	; 0x39
    35ce:	aa af       	std	Y+58, r26	; 0x3a
    35d0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    35d2:	68 ad       	ldd	r22, Y+56	; 0x38
    35d4:	79 ad       	ldd	r23, Y+57	; 0x39
    35d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e8       	ldi	r20, 0x80	; 128
    35e0:	5f e3       	ldi	r21, 0x3F	; 63
    35e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	2c f4       	brge	.+10     	; 0x35f4 <Lcd_VoidSendData4Bit+0xd52>
		__ticks = 1;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	9f ab       	std	Y+55, r25	; 0x37
    35f0:	8e ab       	std	Y+54, r24	; 0x36
    35f2:	3f c0       	rjmp	.+126    	; 0x3672 <Lcd_VoidSendData4Bit+0xdd0>
	else if (__tmp > 65535)
    35f4:	68 ad       	ldd	r22, Y+56	; 0x38
    35f6:	79 ad       	ldd	r23, Y+57	; 0x39
    35f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    35fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	3f ef       	ldi	r19, 0xFF	; 255
    3600:	4f e7       	ldi	r20, 0x7F	; 127
    3602:	57 e4       	ldi	r21, 0x47	; 71
    3604:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3608:	18 16       	cp	r1, r24
    360a:	4c f5       	brge	.+82     	; 0x365e <Lcd_VoidSendData4Bit+0xdbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360c:	6c ad       	ldd	r22, Y+60	; 0x3c
    360e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3610:	8e ad       	ldd	r24, Y+62	; 0x3e
    3612:	9f ad       	ldd	r25, Y+63	; 0x3f
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e2       	ldi	r20, 0x20	; 32
    361a:	51 e4       	ldi	r21, 0x41	; 65
    361c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	9f ab       	std	Y+55, r25	; 0x37
    3632:	8e ab       	std	Y+54, r24	; 0x36
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <Lcd_VoidSendData4Bit+0xdb2>
    3636:	88 ec       	ldi	r24, 0xC8	; 200
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9d ab       	std	Y+53, r25	; 0x35
    363c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    363e:	8c a9       	ldd	r24, Y+52	; 0x34
    3640:	9d a9       	ldd	r25, Y+53	; 0x35
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <Lcd_VoidSendData4Bit+0xda0>
    3646:	9d ab       	std	Y+53, r25	; 0x35
    3648:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364a:	8e a9       	ldd	r24, Y+54	; 0x36
    364c:	9f a9       	ldd	r25, Y+55	; 0x37
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	9f ab       	std	Y+55, r25	; 0x37
    3652:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3654:	8e a9       	ldd	r24, Y+54	; 0x36
    3656:	9f a9       	ldd	r25, Y+55	; 0x37
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	69 f7       	brne	.-38     	; 0x3636 <Lcd_VoidSendData4Bit+0xd94>
    365c:	2d c0       	rjmp	.+90     	; 0x36b8 <Lcd_VoidSendData4Bit+0xe16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365e:	68 ad       	ldd	r22, Y+56	; 0x38
    3660:	79 ad       	ldd	r23, Y+57	; 0x39
    3662:	8a ad       	ldd	r24, Y+58	; 0x3a
    3664:	9b ad       	ldd	r25, Y+59	; 0x3b
    3666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9f ab       	std	Y+55, r25	; 0x37
    3670:	8e ab       	std	Y+54, r24	; 0x36
    3672:	8e a9       	ldd	r24, Y+54	; 0x36
    3674:	9f a9       	ldd	r25, Y+55	; 0x37
    3676:	9b ab       	std	Y+51, r25	; 0x33
    3678:	8a ab       	std	Y+50, r24	; 0x32
    367a:	8a a9       	ldd	r24, Y+50	; 0x32
    367c:	9b a9       	ldd	r25, Y+51	; 0x33
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <Lcd_VoidSendData4Bit+0xddc>
    3682:	9b ab       	std	Y+51, r25	; 0x33
    3684:	8a ab       	std	Y+50, r24	; 0x32
    3686:	18 c0       	rjmp	.+48     	; 0x36b8 <Lcd_VoidSendData4Bit+0xe16>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3688:	fe 01       	movw	r30, r28
    368a:	ef 5b       	subi	r30, 0xBF	; 191
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	60 81       	ld	r22, Z
    3690:	71 81       	ldd	r23, Z+1	; 0x01
    3692:	82 81       	ldd	r24, Z+2	; 0x02
    3694:	93 81       	ldd	r25, Z+3	; 0x03
    3696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	fe 01       	movw	r30, r28
    36a0:	e0 5c       	subi	r30, 0xC0	; 192
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 83       	st	Z, r24
    36a6:	fe 01       	movw	r30, r28
    36a8:	e0 5c       	subi	r30, 0xC0	; 192
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	80 81       	ld	r24, Z
    36ae:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36b0:	89 a9       	ldd	r24, Y+49	; 0x31
    36b2:	8a 95       	dec	r24
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <Lcd_VoidSendData4Bit+0xe10>
    36b6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(150);
	DIO_SetPinValue(PortData, PIN4, GET_BIT(Copy_U8Data, 0));
    36b8:	fe 01       	movw	r30, r28
    36ba:	ef 53       	subi	r30, 0x3F	; 63
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 81       	ld	r24, Z
    36c0:	98 2f       	mov	r25, r24
    36c2:	91 70       	andi	r25, 0x01	; 1
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	64 e0       	ldi	r22, 0x04	; 4
    36c8:	49 2f       	mov	r20, r25
    36ca:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN5, GET_BIT(Copy_U8Data, 1));
    36ce:	fe 01       	movw	r30, r28
    36d0:	ef 53       	subi	r30, 0x3F	; 63
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	80 81       	ld	r24, Z
    36d6:	86 95       	lsr	r24
    36d8:	98 2f       	mov	r25, r24
    36da:	91 70       	andi	r25, 0x01	; 1
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	65 e0       	ldi	r22, 0x05	; 5
    36e0:	49 2f       	mov	r20, r25
    36e2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN6, GET_BIT(Copy_U8Data, 2));
    36e6:	fe 01       	movw	r30, r28
    36e8:	ef 53       	subi	r30, 0x3F	; 63
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	86 95       	lsr	r24
    36f0:	86 95       	lsr	r24
    36f2:	98 2f       	mov	r25, r24
    36f4:	91 70       	andi	r25, 0x01	; 1
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	66 e0       	ldi	r22, 0x06	; 6
    36fa:	49 2f       	mov	r20, r25
    36fc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN7, GET_BIT(Copy_U8Data, 3));
    3700:	fe 01       	movw	r30, r28
    3702:	ef 53       	subi	r30, 0x3F	; 63
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	86 95       	lsr	r24
    370a:	86 95       	lsr	r24
    370c:	86 95       	lsr	r24
    370e:	98 2f       	mov	r25, r24
    3710:	91 70       	andi	r25, 0x01	; 1
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	67 e0       	ldi	r22, 0x07	; 7
    3716:	49 2f       	mov	r20, r25
    3718:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 ea       	ldi	r26, 0xA0	; 160
    3722:	b2 e4       	ldi	r27, 0x42	; 66
    3724:	8d a7       	std	Y+45, r24	; 0x2d
    3726:	9e a7       	std	Y+46, r25	; 0x2e
    3728:	af a7       	std	Y+47, r26	; 0x2f
    372a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    372c:	6d a5       	ldd	r22, Y+45	; 0x2d
    372e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3730:	8f a5       	ldd	r24, Y+47	; 0x2f
    3732:	98 a9       	ldd	r25, Y+48	; 0x30
    3734:	2b ea       	ldi	r18, 0xAB	; 171
    3736:	3a ea       	ldi	r19, 0xAA	; 170
    3738:	4a e2       	ldi	r20, 0x2A	; 42
    373a:	50 e4       	ldi	r21, 0x40	; 64
    373c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	89 a7       	std	Y+41, r24	; 0x29
    3746:	9a a7       	std	Y+42, r25	; 0x2a
    3748:	ab a7       	std	Y+43, r26	; 0x2b
    374a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    374c:	69 a5       	ldd	r22, Y+41	; 0x29
    374e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3750:	8b a5       	ldd	r24, Y+43	; 0x2b
    3752:	9c a5       	ldd	r25, Y+44	; 0x2c
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	1c f4       	brge	.+6      	; 0x376a <Lcd_VoidSendData4Bit+0xec8>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	88 a7       	std	Y+40, r24	; 0x28
    3768:	91 c0       	rjmp	.+290    	; 0x388c <Lcd_VoidSendData4Bit+0xfea>
	else if (__tmp > 255)
    376a:	69 a5       	ldd	r22, Y+41	; 0x29
    376c:	7a a5       	ldd	r23, Y+42	; 0x2a
    376e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3770:	9c a5       	ldd	r25, Y+44	; 0x2c
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4f e7       	ldi	r20, 0x7F	; 127
    3778:	53 e4       	ldi	r21, 0x43	; 67
    377a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    377e:	18 16       	cp	r1, r24
    3780:	0c f0       	brlt	.+2      	; 0x3784 <Lcd_VoidSendData4Bit+0xee2>
    3782:	7b c0       	rjmp	.+246    	; 0x387a <Lcd_VoidSendData4Bit+0xfd8>
	{
		_delay_ms(__us / 1000.0);
    3784:	6d a5       	ldd	r22, Y+45	; 0x2d
    3786:	7e a5       	ldd	r23, Y+46	; 0x2e
    3788:	8f a5       	ldd	r24, Y+47	; 0x2f
    378a:	98 a9       	ldd	r25, Y+48	; 0x30
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	4a e7       	ldi	r20, 0x7A	; 122
    3792:	54 e4       	ldi	r21, 0x44	; 68
    3794:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8c a3       	std	Y+36, r24	; 0x24
    379e:	9d a3       	std	Y+37, r25	; 0x25
    37a0:	ae a3       	std	Y+38, r26	; 0x26
    37a2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	6c a1       	ldd	r22, Y+36	; 0x24
    37a6:	7d a1       	ldd	r23, Y+37	; 0x25
    37a8:	8e a1       	ldd	r24, Y+38	; 0x26
    37aa:	9f a1       	ldd	r25, Y+39	; 0x27
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	4a ef       	ldi	r20, 0xFA	; 250
    37b2:	54 e4       	ldi	r21, 0x44	; 68
    37b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	88 a3       	std	Y+32, r24	; 0x20
    37be:	99 a3       	std	Y+33, r25	; 0x21
    37c0:	aa a3       	std	Y+34, r26	; 0x22
    37c2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    37c4:	68 a1       	ldd	r22, Y+32	; 0x20
    37c6:	79 a1       	ldd	r23, Y+33	; 0x21
    37c8:	8a a1       	ldd	r24, Y+34	; 0x22
    37ca:	9b a1       	ldd	r25, Y+35	; 0x23
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	2c f4       	brge	.+10     	; 0x37e6 <Lcd_VoidSendData4Bit+0xf44>
		__ticks = 1;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	9f 8f       	std	Y+31, r25	; 0x1f
    37e2:	8e 8f       	std	Y+30, r24	; 0x1e
    37e4:	3f c0       	rjmp	.+126    	; 0x3864 <Lcd_VoidSendData4Bit+0xfc2>
	else if (__tmp > 65535)
    37e6:	68 a1       	ldd	r22, Y+32	; 0x20
    37e8:	79 a1       	ldd	r23, Y+33	; 0x21
    37ea:	8a a1       	ldd	r24, Y+34	; 0x22
    37ec:	9b a1       	ldd	r25, Y+35	; 0x23
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	3f ef       	ldi	r19, 0xFF	; 255
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	57 e4       	ldi	r21, 0x47	; 71
    37f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	4c f5       	brge	.+82     	; 0x3850 <Lcd_VoidSendData4Bit+0xfae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fe:	6c a1       	ldd	r22, Y+36	; 0x24
    3800:	7d a1       	ldd	r23, Y+37	; 0x25
    3802:	8e a1       	ldd	r24, Y+38	; 0x26
    3804:	9f a1       	ldd	r25, Y+39	; 0x27
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9f 8f       	std	Y+31, r25	; 0x1f
    3824:	8e 8f       	std	Y+30, r24	; 0x1e
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <Lcd_VoidSendData4Bit+0xfa4>
    3828:	88 ec       	ldi	r24, 0xC8	; 200
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9d 8f       	std	Y+29, r25	; 0x1d
    382e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3830:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3832:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <Lcd_VoidSendData4Bit+0xf92>
    3838:	9d 8f       	std	Y+29, r25	; 0x1d
    383a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    383e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	9f 8f       	std	Y+31, r25	; 0x1f
    3844:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3848:	9f 8d       	ldd	r25, Y+31	; 0x1f
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	69 f7       	brne	.-38     	; 0x3828 <Lcd_VoidSendData4Bit+0xf86>
    384e:	24 c0       	rjmp	.+72     	; 0x3898 <Lcd_VoidSendData4Bit+0xff6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3850:	68 a1       	ldd	r22, Y+32	; 0x20
    3852:	79 a1       	ldd	r23, Y+33	; 0x21
    3854:	8a a1       	ldd	r24, Y+34	; 0x22
    3856:	9b a1       	ldd	r25, Y+35	; 0x23
    3858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9f 8f       	std	Y+31, r25	; 0x1f
    3862:	8e 8f       	std	Y+30, r24	; 0x1e
    3864:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3866:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3868:	9b 8f       	std	Y+27, r25	; 0x1b
    386a:	8a 8f       	std	Y+26, r24	; 0x1a
    386c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    386e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <Lcd_VoidSendData4Bit+0xfce>
    3874:	9b 8f       	std	Y+27, r25	; 0x1b
    3876:	8a 8f       	std	Y+26, r24	; 0x1a
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <Lcd_VoidSendData4Bit+0xff6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    387a:	69 a5       	ldd	r22, Y+41	; 0x29
    387c:	7a a5       	ldd	r23, Y+42	; 0x2a
    387e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3880:	9c a5       	ldd	r25, Y+44	; 0x2c
    3882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	88 a7       	std	Y+40, r24	; 0x28
    388c:	88 a5       	ldd	r24, Y+40	; 0x28
    388e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3890:	89 8d       	ldd	r24, Y+25	; 0x19
    3892:	8a 95       	dec	r24
    3894:	f1 f7       	brne	.-4      	; 0x3892 <Lcd_VoidSendData4Bit+0xff0>
    3896:	89 8f       	std	Y+25, r24	; 0x19
	/* DIO_SetPinValue(PortControl, E, HIGH);
	 _delay_ms(2);
	 DIO_SetPinValue(PortControl, E, LOW);
	 _delay_us(2);*/
	_delay_us(80);
	DIO_SetPinValue(PortControl, E, LOW);
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	a0 ef       	ldi	r26, 0xF0	; 240
    38a8:	b1 e4       	ldi	r27, 0x41	; 65
    38aa:	8d 8b       	std	Y+21, r24	; 0x15
    38ac:	9e 8b       	std	Y+22, r25	; 0x16
    38ae:	af 8b       	std	Y+23, r26	; 0x17
    38b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38b2:	6d 89       	ldd	r22, Y+21	; 0x15
    38b4:	7e 89       	ldd	r23, Y+22	; 0x16
    38b6:	8f 89       	ldd	r24, Y+23	; 0x17
    38b8:	98 8d       	ldd	r25, Y+24	; 0x18
    38ba:	2b ea       	ldi	r18, 0xAB	; 171
    38bc:	3a ea       	ldi	r19, 0xAA	; 170
    38be:	4a e2       	ldi	r20, 0x2A	; 42
    38c0:	50 e4       	ldi	r21, 0x40	; 64
    38c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	89 8b       	std	Y+17, r24	; 0x11
    38cc:	9a 8b       	std	Y+18, r25	; 0x12
    38ce:	ab 8b       	std	Y+19, r26	; 0x13
    38d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    38d2:	69 89       	ldd	r22, Y+17	; 0x11
    38d4:	7a 89       	ldd	r23, Y+18	; 0x12
    38d6:	8b 89       	ldd	r24, Y+19	; 0x13
    38d8:	9c 89       	ldd	r25, Y+20	; 0x14
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e8       	ldi	r20, 0x80	; 128
    38e0:	5f e3       	ldi	r21, 0x3F	; 63
    38e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	1c f4       	brge	.+6      	; 0x38f0 <Lcd_VoidSendData4Bit+0x104e>
		__ticks = 1;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	88 8b       	std	Y+16, r24	; 0x10
    38ee:	91 c0       	rjmp	.+290    	; 0x3a12 <Lcd_VoidSendData4Bit+0x1170>
	else if (__tmp > 255)
    38f0:	69 89       	ldd	r22, Y+17	; 0x11
    38f2:	7a 89       	ldd	r23, Y+18	; 0x12
    38f4:	8b 89       	ldd	r24, Y+19	; 0x13
    38f6:	9c 89       	ldd	r25, Y+20	; 0x14
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	4f e7       	ldi	r20, 0x7F	; 127
    38fe:	53 e4       	ldi	r21, 0x43	; 67
    3900:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3904:	18 16       	cp	r1, r24
    3906:	0c f0       	brlt	.+2      	; 0x390a <Lcd_VoidSendData4Bit+0x1068>
    3908:	7b c0       	rjmp	.+246    	; 0x3a00 <Lcd_VoidSendData4Bit+0x115e>
	{
		_delay_ms(__us / 1000.0);
    390a:	6d 89       	ldd	r22, Y+21	; 0x15
    390c:	7e 89       	ldd	r23, Y+22	; 0x16
    390e:	8f 89       	ldd	r24, Y+23	; 0x17
    3910:	98 8d       	ldd	r25, Y+24	; 0x18
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4a e7       	ldi	r20, 0x7A	; 122
    3918:	54 e4       	ldi	r21, 0x44	; 68
    391a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	8c 87       	std	Y+12, r24	; 0x0c
    3924:	9d 87       	std	Y+13, r25	; 0x0d
    3926:	ae 87       	std	Y+14, r26	; 0x0e
    3928:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392a:	6c 85       	ldd	r22, Y+12	; 0x0c
    392c:	7d 85       	ldd	r23, Y+13	; 0x0d
    392e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3930:	9f 85       	ldd	r25, Y+15	; 0x0f
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a ef       	ldi	r20, 0xFA	; 250
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	88 87       	std	Y+8, r24	; 0x08
    3944:	99 87       	std	Y+9, r25	; 0x09
    3946:	aa 87       	std	Y+10, r26	; 0x0a
    3948:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    394a:	68 85       	ldd	r22, Y+8	; 0x08
    394c:	79 85       	ldd	r23, Y+9	; 0x09
    394e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3950:	9b 85       	ldd	r25, Y+11	; 0x0b
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e8       	ldi	r20, 0x80	; 128
    3958:	5f e3       	ldi	r21, 0x3F	; 63
    395a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    395e:	88 23       	and	r24, r24
    3960:	2c f4       	brge	.+10     	; 0x396c <Lcd_VoidSendData4Bit+0x10ca>
		__ticks = 1;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9f 83       	std	Y+7, r25	; 0x07
    3968:	8e 83       	std	Y+6, r24	; 0x06
    396a:	3f c0       	rjmp	.+126    	; 0x39ea <Lcd_VoidSendData4Bit+0x1148>
	else if (__tmp > 65535)
    396c:	68 85       	ldd	r22, Y+8	; 0x08
    396e:	79 85       	ldd	r23, Y+9	; 0x09
    3970:	8a 85       	ldd	r24, Y+10	; 0x0a
    3972:	9b 85       	ldd	r25, Y+11	; 0x0b
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	3f ef       	ldi	r19, 0xFF	; 255
    3978:	4f e7       	ldi	r20, 0x7F	; 127
    397a:	57 e4       	ldi	r21, 0x47	; 71
    397c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3980:	18 16       	cp	r1, r24
    3982:	4c f5       	brge	.+82     	; 0x39d6 <Lcd_VoidSendData4Bit+0x1134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3984:	6c 85       	ldd	r22, Y+12	; 0x0c
    3986:	7d 85       	ldd	r23, Y+13	; 0x0d
    3988:	8e 85       	ldd	r24, Y+14	; 0x0e
    398a:	9f 85       	ldd	r25, Y+15	; 0x0f
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e2       	ldi	r20, 0x20	; 32
    3992:	51 e4       	ldi	r21, 0x41	; 65
    3994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9f 83       	std	Y+7, r25	; 0x07
    39aa:	8e 83       	std	Y+6, r24	; 0x06
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <Lcd_VoidSendData4Bit+0x112a>
    39ae:	88 ec       	ldi	r24, 0xC8	; 200
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	9d 83       	std	Y+5, r25	; 0x05
    39b4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39b6:	8c 81       	ldd	r24, Y+4	; 0x04
    39b8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	f1 f7       	brne	.-4      	; 0x39ba <Lcd_VoidSendData4Bit+0x1118>
    39be:	9d 83       	std	Y+5, r25	; 0x05
    39c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c2:	8e 81       	ldd	r24, Y+6	; 0x06
    39c4:	9f 81       	ldd	r25, Y+7	; 0x07
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	9f 83       	std	Y+7, r25	; 0x07
    39ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39cc:	8e 81       	ldd	r24, Y+6	; 0x06
    39ce:	9f 81       	ldd	r25, Y+7	; 0x07
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	69 f7       	brne	.-38     	; 0x39ae <Lcd_VoidSendData4Bit+0x110c>
    39d4:	24 c0       	rjmp	.+72     	; 0x3a1e <Lcd_VoidSendData4Bit+0x117c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d6:	68 85       	ldd	r22, Y+8	; 0x08
    39d8:	79 85       	ldd	r23, Y+9	; 0x09
    39da:	8a 85       	ldd	r24, Y+10	; 0x0a
    39dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    39de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	9f 83       	std	Y+7, r25	; 0x07
    39e8:	8e 83       	std	Y+6, r24	; 0x06
    39ea:	8e 81       	ldd	r24, Y+6	; 0x06
    39ec:	9f 81       	ldd	r25, Y+7	; 0x07
    39ee:	9b 83       	std	Y+3, r25	; 0x03
    39f0:	8a 83       	std	Y+2, r24	; 0x02
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	9b 81       	ldd	r25, Y+3	; 0x03
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <Lcd_VoidSendData4Bit+0x1154>
    39fa:	9b 83       	std	Y+3, r25	; 0x03
    39fc:	8a 83       	std	Y+2, r24	; 0x02
    39fe:	0f c0       	rjmp	.+30     	; 0x3a1e <Lcd_VoidSendData4Bit+0x117c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a00:	69 89       	ldd	r22, Y+17	; 0x11
    3a02:	7a 89       	ldd	r23, Y+18	; 0x12
    3a04:	8b 89       	ldd	r24, Y+19	; 0x13
    3a06:	9c 89       	ldd	r25, Y+20	; 0x14
    3a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	88 8b       	std	Y+16, r24	; 0x10
    3a12:	88 89       	ldd	r24, Y+16	; 0x10
    3a14:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	8a 95       	dec	r24
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <Lcd_VoidSendData4Bit+0x1176>
    3a1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(30);
}
    3a1e:	cf 53       	subi	r28, 0x3F	; 63
    3a20:	df 4f       	sbci	r29, 0xFF	; 255
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	08 95       	ret

00003a36 <Lcd_VoidSendCommand>:

void Lcd_VoidSendCommand(u8 Copy_U8Comand) {
    3a36:	df 93       	push	r29
    3a38:	cf 93       	push	r28
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	a7 97       	sbiw	r28, 0x27	; 39
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	8f a3       	std	Y+39, r24	; 0x27

	DIO_SetPinValue(PortControl, RS, LOW);
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	60 e0       	ldi	r22, 0x00	; 0
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortControl, RW, LOW);
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	61 e0       	ldi	r22, 0x01	; 1
    3a5a:	40 e0       	ldi	r20, 0x00	; 0
    3a5c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

	DIO_SetPortValue(PortData, Copy_U8Comand);
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	6f a1       	ldd	r22, Y+39	; 0x27
    3a64:	0e 94 de 0a 	call	0x15bc	; 0x15bc <DIO_SetPortValue>

	DIO_SetPinValue(PortControl, E, HIGH);
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	62 e0       	ldi	r22, 0x02	; 2
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	a0 e0       	ldi	r26, 0x00	; 0
    3a78:	b0 e4       	ldi	r27, 0x40	; 64
    3a7a:	8b a3       	std	Y+35, r24	; 0x23
    3a7c:	9c a3       	std	Y+36, r25	; 0x24
    3a7e:	ad a3       	std	Y+37, r26	; 0x25
    3a80:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a82:	6b a1       	ldd	r22, Y+35	; 0x23
    3a84:	7c a1       	ldd	r23, Y+36	; 0x24
    3a86:	8d a1       	ldd	r24, Y+37	; 0x25
    3a88:	9e a1       	ldd	r25, Y+38	; 0x26
    3a8a:	2b ea       	ldi	r18, 0xAB	; 171
    3a8c:	3a ea       	ldi	r19, 0xAA	; 170
    3a8e:	4a e2       	ldi	r20, 0x2A	; 42
    3a90:	50 e4       	ldi	r21, 0x40	; 64
    3a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    3a9c:	98 a3       	std	Y+32, r25	; 0x20
    3a9e:	a9 a3       	std	Y+33, r26	; 0x21
    3aa0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3aa2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3aa4:	78 a1       	ldd	r23, Y+32	; 0x20
    3aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e8       	ldi	r20, 0x80	; 128
    3ab0:	5f e3       	ldi	r21, 0x3F	; 63
    3ab2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ab6:	88 23       	and	r24, r24
    3ab8:	1c f4       	brge	.+6      	; 0x3ac0 <Lcd_VoidSendCommand+0x8a>
		__ticks = 1;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	8e 8f       	std	Y+30, r24	; 0x1e
    3abe:	91 c0       	rjmp	.+290    	; 0x3be2 <Lcd_VoidSendCommand+0x1ac>
	else if (__tmp > 255)
    3ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3ac2:	78 a1       	ldd	r23, Y+32	; 0x20
    3ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	4f e7       	ldi	r20, 0x7F	; 127
    3ace:	53 e4       	ldi	r21, 0x43	; 67
    3ad0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ad4:	18 16       	cp	r1, r24
    3ad6:	0c f0       	brlt	.+2      	; 0x3ada <Lcd_VoidSendCommand+0xa4>
    3ad8:	7b c0       	rjmp	.+246    	; 0x3bd0 <Lcd_VoidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3ada:	6b a1       	ldd	r22, Y+35	; 0x23
    3adc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ade:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a e7       	ldi	r20, 0x7A	; 122
    3ae8:	54 e4       	ldi	r21, 0x44	; 68
    3aea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	8a 8f       	std	Y+26, r24	; 0x1a
    3af4:	9b 8f       	std	Y+27, r25	; 0x1b
    3af6:	ac 8f       	std	Y+28, r26	; 0x1c
    3af8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3afc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3afe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4a ef       	ldi	r20, 0xFA	; 250
    3b08:	54 e4       	ldi	r21, 0x44	; 68
    3b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	8e 8b       	std	Y+22, r24	; 0x16
    3b14:	9f 8b       	std	Y+23, r25	; 0x17
    3b16:	a8 8f       	std	Y+24, r26	; 0x18
    3b18:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3b1a:	6e 89       	ldd	r22, Y+22	; 0x16
    3b1c:	7f 89       	ldd	r23, Y+23	; 0x17
    3b1e:	88 8d       	ldd	r24, Y+24	; 0x18
    3b20:	99 8d       	ldd	r25, Y+25	; 0x19
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e8       	ldi	r20, 0x80	; 128
    3b28:	5f e3       	ldi	r21, 0x3F	; 63
    3b2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	2c f4       	brge	.+10     	; 0x3b3c <Lcd_VoidSendCommand+0x106>
		__ticks = 1;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	9d 8b       	std	Y+21, r25	; 0x15
    3b38:	8c 8b       	std	Y+20, r24	; 0x14
    3b3a:	3f c0       	rjmp	.+126    	; 0x3bba <Lcd_VoidSendCommand+0x184>
	else if (__tmp > 65535)
    3b3c:	6e 89       	ldd	r22, Y+22	; 0x16
    3b3e:	7f 89       	ldd	r23, Y+23	; 0x17
    3b40:	88 8d       	ldd	r24, Y+24	; 0x18
    3b42:	99 8d       	ldd	r25, Y+25	; 0x19
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	3f ef       	ldi	r19, 0xFF	; 255
    3b48:	4f e7       	ldi	r20, 0x7F	; 127
    3b4a:	57 e4       	ldi	r21, 0x47	; 71
    3b4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b50:	18 16       	cp	r1, r24
    3b52:	4c f5       	brge	.+82     	; 0x3ba6 <Lcd_VoidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3b56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3b58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e2       	ldi	r20, 0x20	; 32
    3b62:	51 e4       	ldi	r21, 0x41	; 65
    3b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9d 8b       	std	Y+21, r25	; 0x15
    3b7a:	8c 8b       	std	Y+20, r24	; 0x14
    3b7c:	0f c0       	rjmp	.+30     	; 0x3b9c <Lcd_VoidSendCommand+0x166>
    3b7e:	88 ec       	ldi	r24, 0xC8	; 200
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9b 8b       	std	Y+19, r25	; 0x13
    3b84:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b86:	8a 89       	ldd	r24, Y+18	; 0x12
    3b88:	9b 89       	ldd	r25, Y+19	; 0x13
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <Lcd_VoidSendCommand+0x154>
    3b8e:	9b 8b       	std	Y+19, r25	; 0x13
    3b90:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b92:	8c 89       	ldd	r24, Y+20	; 0x14
    3b94:	9d 89       	ldd	r25, Y+21	; 0x15
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	9d 8b       	std	Y+21, r25	; 0x15
    3b9a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9c:	8c 89       	ldd	r24, Y+20	; 0x14
    3b9e:	9d 89       	ldd	r25, Y+21	; 0x15
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	69 f7       	brne	.-38     	; 0x3b7e <Lcd_VoidSendCommand+0x148>
    3ba4:	24 c0       	rjmp	.+72     	; 0x3bee <Lcd_VoidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	6e 89       	ldd	r22, Y+22	; 0x16
    3ba8:	7f 89       	ldd	r23, Y+23	; 0x17
    3baa:	88 8d       	ldd	r24, Y+24	; 0x18
    3bac:	99 8d       	ldd	r25, Y+25	; 0x19
    3bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9d 8b       	std	Y+21, r25	; 0x15
    3bb8:	8c 8b       	std	Y+20, r24	; 0x14
    3bba:	8c 89       	ldd	r24, Y+20	; 0x14
    3bbc:	9d 89       	ldd	r25, Y+21	; 0x15
    3bbe:	99 8b       	std	Y+17, r25	; 0x11
    3bc0:	88 8b       	std	Y+16, r24	; 0x10
    3bc2:	88 89       	ldd	r24, Y+16	; 0x10
    3bc4:	99 89       	ldd	r25, Y+17	; 0x11
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <Lcd_VoidSendCommand+0x190>
    3bca:	99 8b       	std	Y+17, r25	; 0x11
    3bcc:	88 8b       	std	Y+16, r24	; 0x10
    3bce:	0f c0       	rjmp	.+30     	; 0x3bee <Lcd_VoidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3bd2:	78 a1       	ldd	r23, Y+32	; 0x20
    3bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	8e 8f       	std	Y+30, r24	; 0x1e
    3be2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3be4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be8:	8a 95       	dec	r24
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <Lcd_VoidSendCommand+0x1b2>
    3bec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(2);
	DIO_SetPinValue(PortControl, E, LOW);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	62 e0       	ldi	r22, 0x02	; 2
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	a0 e0       	ldi	r26, 0x00	; 0
    3bfe:	b0 e4       	ldi	r27, 0x40	; 64
    3c00:	8b 87       	std	Y+11, r24	; 0x0b
    3c02:	9c 87       	std	Y+12, r25	; 0x0c
    3c04:	ad 87       	std	Y+13, r26	; 0x0d
    3c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a ef       	ldi	r20, 0xFA	; 250
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	8f 83       	std	Y+7, r24	; 0x07
    3c22:	98 87       	std	Y+8, r25	; 0x08
    3c24:	a9 87       	std	Y+9, r26	; 0x09
    3c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <Lcd_VoidSendCommand+0x214>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	3f c0       	rjmp	.+126    	; 0x3cc8 <Lcd_VoidSendCommand+0x292>
	else if (__tmp > 65535)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	4c f5       	brge	.+82     	; 0x3cb4 <Lcd_VoidSendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	cd 01       	movw	r24, r26
    3c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9e 83       	std	Y+6, r25	; 0x06
    3c88:	8d 83       	std	Y+5, r24	; 0x05
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <Lcd_VoidSendCommand+0x274>
    3c8c:	88 ec       	ldi	r24, 0xC8	; 200
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <Lcd_VoidSendCommand+0x262>
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	69 f7       	brne	.-38     	; 0x3c8c <Lcd_VoidSendCommand+0x256>
    3cb2:	14 c0       	rjmp	.+40     	; 0x3cdc <Lcd_VoidSendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <Lcd_VoidSendCommand+0x29e>
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3cdc:	a7 96       	adiw	r28, 0x27	; 39
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	cf 91       	pop	r28
    3cea:	df 91       	pop	r29
    3cec:	08 95       	ret

00003cee <Lcd_VoidSendCommand4bit>:
void Lcd_VoidSendCommand4bit(u8 Copy_U8Comand) {
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	c1 5c       	subi	r28, 0xC1	; 193
    3cfc:	d0 40       	sbci	r29, 0x00	; 0
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	fe 01       	movw	r30, r28
    3d0a:	ef 53       	subi	r30, 0x3F	; 63
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 83       	st	Z, r24

	DIO_SetPinValue(PortControl, RS, LOW);
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortControl, RW, LOW);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	61 e0       	ldi	r22, 0x01	; 1
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e3 54       	subi	r30, 0x43	; 67
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	a0 ea       	ldi	r26, 0xA0	; 160
    3d30:	b1 e4       	ldi	r27, 0x41	; 65
    3d32:	80 83       	st	Z, r24
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	a2 83       	std	Z+2, r26	; 0x02
    3d38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d3a:	8e 01       	movw	r16, r28
    3d3c:	07 54       	subi	r16, 0x47	; 71
    3d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d40:	fe 01       	movw	r30, r28
    3d42:	e3 54       	subi	r30, 0x43	; 67
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	60 81       	ld	r22, Z
    3d48:	71 81       	ldd	r23, Z+1	; 0x01
    3d4a:	82 81       	ldd	r24, Z+2	; 0x02
    3d4c:	93 81       	ldd	r25, Z+3	; 0x03
    3d4e:	2b ea       	ldi	r18, 0xAB	; 171
    3d50:	3a ea       	ldi	r19, 0xAA	; 170
    3d52:	4a e2       	ldi	r20, 0x2A	; 42
    3d54:	50 e4       	ldi	r21, 0x40	; 64
    3d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	f8 01       	movw	r30, r16
    3d60:	80 83       	st	Z, r24
    3d62:	91 83       	std	Z+1, r25	; 0x01
    3d64:	a2 83       	std	Z+2, r26	; 0x02
    3d66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e7 54       	subi	r30, 0x47	; 71
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	60 81       	ld	r22, Z
    3d70:	71 81       	ldd	r23, Z+1	; 0x01
    3d72:	82 81       	ldd	r24, Z+2	; 0x02
    3d74:	93 81       	ldd	r25, Z+3	; 0x03
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e8       	ldi	r20, 0x80	; 128
    3d7c:	5f e3       	ldi	r21, 0x3F	; 63
    3d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d82:	88 23       	and	r24, r24
    3d84:	34 f4       	brge	.+12     	; 0x3d92 <Lcd_VoidSendCommand4bit+0xa4>
		__ticks = 1;
    3d86:	fe 01       	movw	r30, r28
    3d88:	e8 54       	subi	r30, 0x48	; 72
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	80 83       	st	Z, r24
    3d90:	e0 c0       	rjmp	.+448    	; 0x3f52 <Lcd_VoidSendCommand4bit+0x264>
	else if (__tmp > 255)
    3d92:	fe 01       	movw	r30, r28
    3d94:	e7 54       	subi	r30, 0x47	; 71
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	60 81       	ld	r22, Z
    3d9a:	71 81       	ldd	r23, Z+1	; 0x01
    3d9c:	82 81       	ldd	r24, Z+2	; 0x02
    3d9e:	93 81       	ldd	r25, Z+3	; 0x03
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	4f e7       	ldi	r20, 0x7F	; 127
    3da6:	53 e4       	ldi	r21, 0x43	; 67
    3da8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dac:	18 16       	cp	r1, r24
    3dae:	0c f0       	brlt	.+2      	; 0x3db2 <Lcd_VoidSendCommand4bit+0xc4>
    3db0:	c0 c0       	rjmp	.+384    	; 0x3f32 <Lcd_VoidSendCommand4bit+0x244>
	{
		_delay_ms(__us / 1000.0);
    3db2:	fe 01       	movw	r30, r28
    3db4:	e3 54       	subi	r30, 0x43	; 67
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	60 81       	ld	r22, Z
    3dba:	71 81       	ldd	r23, Z+1	; 0x01
    3dbc:	82 81       	ldd	r24, Z+2	; 0x02
    3dbe:	93 81       	ldd	r25, Z+3	; 0x03
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	4a e7       	ldi	r20, 0x7A	; 122
    3dc6:	54 e4       	ldi	r21, 0x44	; 68
    3dc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ec 54       	subi	r30, 0x4C	; 76
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dde:	8e 01       	movw	r16, r28
    3de0:	00 55       	subi	r16, 0x50	; 80
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	fe 01       	movw	r30, r28
    3de6:	ec 54       	subi	r30, 0x4C	; 76
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4a ef       	ldi	r20, 0xFA	; 250
    3df8:	54 e4       	ldi	r21, 0x44	; 68
    3dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	f8 01       	movw	r30, r16
    3e04:	80 83       	st	Z, r24
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	a2 83       	std	Z+2, r26	; 0x02
    3e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e0 55       	subi	r30, 0x50	; 80
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	60 81       	ld	r22, Z
    3e14:	71 81       	ldd	r23, Z+1	; 0x01
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	93 81       	ldd	r25, Z+3	; 0x03
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e8       	ldi	r20, 0x80	; 128
    3e20:	5f e3       	ldi	r21, 0x3F	; 63
    3e22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3e26:	88 23       	and	r24, r24
    3e28:	44 f4       	brge	.+16     	; 0x3e3a <Lcd_VoidSendCommand4bit+0x14c>
		__ticks = 1;
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e2 55       	subi	r30, 0x52	; 82
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
    3e38:	64 c0       	rjmp	.+200    	; 0x3f02 <Lcd_VoidSendCommand4bit+0x214>
	else if (__tmp > 65535)
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e0 55       	subi	r30, 0x50	; 80
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	3f ef       	ldi	r19, 0xFF	; 255
    3e4c:	4f e7       	ldi	r20, 0x7F	; 127
    3e4e:	57 e4       	ldi	r21, 0x47	; 71
    3e50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3e54:	18 16       	cp	r1, r24
    3e56:	0c f0       	brlt	.+2      	; 0x3e5a <Lcd_VoidSendCommand4bit+0x16c>
    3e58:	43 c0       	rjmp	.+134    	; 0x3ee0 <Lcd_VoidSendCommand4bit+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ec 54       	subi	r30, 0x4C	; 76
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e2       	ldi	r20, 0x20	; 32
    3e6e:	51 e4       	ldi	r21, 0x41	; 65
    3e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	8e 01       	movw	r16, r28
    3e7a:	02 55       	subi	r16, 0x52	; 82
    3e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7e:	bc 01       	movw	r22, r24
    3e80:	cd 01       	movw	r24, r26
    3e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
    3e90:	1f c0       	rjmp	.+62     	; 0x3ed0 <Lcd_VoidSendCommand4bit+0x1e2>
    3e92:	fe 01       	movw	r30, r28
    3e94:	e4 55       	subi	r30, 0x54	; 84
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	88 ec       	ldi	r24, 0xC8	; 200
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	80 83       	st	Z, r24
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e4 55       	subi	r30, 0x54	; 84
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	91 81       	ldd	r25, Z+1	; 0x01
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <Lcd_VoidSendCommand4bit+0x1bc>
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e4 55       	subi	r30, 0x54	; 84
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	de 01       	movw	r26, r28
    3eba:	a2 55       	subi	r26, 0x52	; 82
    3ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e2 55       	subi	r30, 0x52	; 82
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	80 81       	ld	r24, Z
    3ec6:	91 81       	ldd	r25, Z+1	; 0x01
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	11 96       	adiw	r26, 0x01	; 1
    3ecc:	9c 93       	st	X, r25
    3ece:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	e2 55       	subi	r30, 0x52	; 82
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	80 81       	ld	r24, Z
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	d1 f6       	brne	.-76     	; 0x3e92 <Lcd_VoidSendCommand4bit+0x1a4>
    3ede:	4b c0       	rjmp	.+150    	; 0x3f76 <Lcd_VoidSendCommand4bit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee0:	8e 01       	movw	r16, r28
    3ee2:	02 55       	subi	r16, 0x52	; 82
    3ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e0 55       	subi	r30, 0x50	; 80
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	60 81       	ld	r22, Z
    3eee:	71 81       	ldd	r23, Z+1	; 0x01
    3ef0:	82 81       	ldd	r24, Z+2	; 0x02
    3ef2:	93 81       	ldd	r25, Z+3	; 0x03
    3ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	f8 01       	movw	r30, r16
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	de 01       	movw	r26, r28
    3f04:	a6 55       	subi	r26, 0x56	; 86
    3f06:	bf 4f       	sbci	r27, 0xFF	; 255
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e2 55       	subi	r30, 0x52	; 82
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	11 96       	adiw	r26, 0x01	; 1
    3f14:	9c 93       	st	X, r25
    3f16:	8e 93       	st	-X, r24
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e6 55       	subi	r30, 0x56	; 86
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <Lcd_VoidSendCommand4bit+0x234>
    3f26:	fe 01       	movw	r30, r28
    3f28:	e6 55       	subi	r30, 0x56	; 86
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	80 83       	st	Z, r24
    3f30:	22 c0       	rjmp	.+68     	; 0x3f76 <Lcd_VoidSendCommand4bit+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f32:	8e 01       	movw	r16, r28
    3f34:	08 54       	subi	r16, 0x48	; 72
    3f36:	1f 4f       	sbci	r17, 0xFF	; 255
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e7 54       	subi	r30, 0x47	; 71
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	f8 01       	movw	r30, r16
    3f50:	80 83       	st	Z, r24
    3f52:	de 01       	movw	r26, r28
    3f54:	a7 55       	subi	r26, 0x57	; 87
    3f56:	bf 4f       	sbci	r27, 0xFF	; 255
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e8 54       	subi	r30, 0x48	; 72
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f62:	fe 01       	movw	r30, r28
    3f64:	e7 55       	subi	r30, 0x57	; 87
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	8a 95       	dec	r24
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <Lcd_VoidSendCommand4bit+0x27c>
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e7 55       	subi	r30, 0x57	; 87
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	80 83       	st	Z, r24

	_delay_us(20);
	DIO_SetPinValue(PortControl, E, HIGH);
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	62 e0       	ldi	r22, 0x02	; 2
    3f7a:	41 e0       	ldi	r20, 0x01	; 1
    3f7c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    3f80:	fe 01       	movw	r30, r28
    3f82:	eb 55       	subi	r30, 0x5B	; 91
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	a6 e1       	ldi	r26, 0x16	; 22
    3f8c:	b3 e4       	ldi	r27, 0x43	; 67
    3f8e:	80 83       	st	Z, r24
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	a2 83       	std	Z+2, r26	; 0x02
    3f94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f96:	8e 01       	movw	r16, r28
    3f98:	0f 55       	subi	r16, 0x5F	; 95
    3f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	eb 55       	subi	r30, 0x5B	; 91
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	60 81       	ld	r22, Z
    3fa4:	71 81       	ldd	r23, Z+1	; 0x01
    3fa6:	82 81       	ldd	r24, Z+2	; 0x02
    3fa8:	93 81       	ldd	r25, Z+3	; 0x03
    3faa:	2b ea       	ldi	r18, 0xAB	; 171
    3fac:	3a ea       	ldi	r19, 0xAA	; 170
    3fae:	4a e2       	ldi	r20, 0x2A	; 42
    3fb0:	50 e4       	ldi	r21, 0x40	; 64
    3fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	f8 01       	movw	r30, r16
    3fbc:	80 83       	st	Z, r24
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	a2 83       	std	Z+2, r26	; 0x02
    3fc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	ef 55       	subi	r30, 0x5F	; 95
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	60 81       	ld	r22, Z
    3fcc:	71 81       	ldd	r23, Z+1	; 0x01
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e8       	ldi	r20, 0x80	; 128
    3fd8:	5f e3       	ldi	r21, 0x3F	; 63
    3fda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3fde:	88 23       	and	r24, r24
    3fe0:	34 f4       	brge	.+12     	; 0x3fee <Lcd_VoidSendCommand4bit+0x300>
		__ticks = 1;
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e0 56       	subi	r30, 0x60	; 96
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	80 83       	st	Z, r24
    3fec:	e0 c0       	rjmp	.+448    	; 0x41ae <Lcd_VoidSendCommand4bit+0x4c0>
	else if (__tmp > 255)
    3fee:	fe 01       	movw	r30, r28
    3ff0:	ef 55       	subi	r30, 0x5F	; 95
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4f e7       	ldi	r20, 0x7F	; 127
    4002:	53 e4       	ldi	r21, 0x43	; 67
    4004:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4008:	18 16       	cp	r1, r24
    400a:	0c f0       	brlt	.+2      	; 0x400e <Lcd_VoidSendCommand4bit+0x320>
    400c:	c0 c0       	rjmp	.+384    	; 0x418e <Lcd_VoidSendCommand4bit+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    400e:	fe 01       	movw	r30, r28
    4010:	eb 55       	subi	r30, 0x5B	; 91
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	4a e7       	ldi	r20, 0x7A	; 122
    4022:	54 e4       	ldi	r21, 0x44	; 68
    4024:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	fe 01       	movw	r30, r28
    402e:	e4 56       	subi	r30, 0x64	; 100
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 83       	st	Z, r24
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	a2 83       	std	Z+2, r26	; 0x02
    4038:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403a:	8e 01       	movw	r16, r28
    403c:	08 56       	subi	r16, 0x68	; 104
    403e:	1f 4f       	sbci	r17, 0xFF	; 255
    4040:	fe 01       	movw	r30, r28
    4042:	e4 56       	subi	r30, 0x64	; 100
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a ef       	ldi	r20, 0xFA	; 250
    4054:	54 e4       	ldi	r21, 0x44	; 68
    4056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	f8 01       	movw	r30, r16
    4060:	80 83       	st	Z, r24
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	a2 83       	std	Z+2, r26	; 0x02
    4066:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4068:	fe 01       	movw	r30, r28
    406a:	e8 56       	subi	r30, 0x68	; 104
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e8       	ldi	r20, 0x80	; 128
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4082:	88 23       	and	r24, r24
    4084:	44 f4       	brge	.+16     	; 0x4096 <Lcd_VoidSendCommand4bit+0x3a8>
		__ticks = 1;
    4086:	fe 01       	movw	r30, r28
    4088:	ea 56       	subi	r30, 0x6A	; 106
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24
    4094:	64 c0       	rjmp	.+200    	; 0x415e <Lcd_VoidSendCommand4bit+0x470>
	else if (__tmp > 65535)
    4096:	fe 01       	movw	r30, r28
    4098:	e8 56       	subi	r30, 0x68	; 104
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	60 81       	ld	r22, Z
    409e:	71 81       	ldd	r23, Z+1	; 0x01
    40a0:	82 81       	ldd	r24, Z+2	; 0x02
    40a2:	93 81       	ldd	r25, Z+3	; 0x03
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	3f ef       	ldi	r19, 0xFF	; 255
    40a8:	4f e7       	ldi	r20, 0x7F	; 127
    40aa:	57 e4       	ldi	r21, 0x47	; 71
    40ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40b0:	18 16       	cp	r1, r24
    40b2:	0c f0       	brlt	.+2      	; 0x40b6 <Lcd_VoidSendCommand4bit+0x3c8>
    40b4:	43 c0       	rjmp	.+134    	; 0x413c <Lcd_VoidSendCommand4bit+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b6:	fe 01       	movw	r30, r28
    40b8:	e4 56       	subi	r30, 0x64	; 100
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	60 81       	ld	r22, Z
    40be:	71 81       	ldd	r23, Z+1	; 0x01
    40c0:	82 81       	ldd	r24, Z+2	; 0x02
    40c2:	93 81       	ldd	r25, Z+3	; 0x03
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	8e 01       	movw	r16, r28
    40d6:	0a 56       	subi	r16, 0x6A	; 106
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	f8 01       	movw	r30, r16
    40e8:	91 83       	std	Z+1, r25	; 0x01
    40ea:	80 83       	st	Z, r24
    40ec:	1f c0       	rjmp	.+62     	; 0x412c <Lcd_VoidSendCommand4bit+0x43e>
    40ee:	fe 01       	movw	r30, r28
    40f0:	ec 56       	subi	r30, 0x6C	; 108
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	88 ec       	ldi	r24, 0xC8	; 200
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40fc:	fe 01       	movw	r30, r28
    40fe:	ec 56       	subi	r30, 0x6C	; 108
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	91 81       	ldd	r25, Z+1	; 0x01
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <Lcd_VoidSendCommand4bit+0x418>
    410a:	fe 01       	movw	r30, r28
    410c:	ec 56       	subi	r30, 0x6C	; 108
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	91 83       	std	Z+1, r25	; 0x01
    4112:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4114:	de 01       	movw	r26, r28
    4116:	aa 56       	subi	r26, 0x6A	; 106
    4118:	bf 4f       	sbci	r27, 0xFF	; 255
    411a:	fe 01       	movw	r30, r28
    411c:	ea 56       	subi	r30, 0x6A	; 106
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	11 96       	adiw	r26, 0x01	; 1
    4128:	9c 93       	st	X, r25
    412a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412c:	fe 01       	movw	r30, r28
    412e:	ea 56       	subi	r30, 0x6A	; 106
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	00 97       	sbiw	r24, 0x00	; 0
    4138:	d1 f6       	brne	.-76     	; 0x40ee <Lcd_VoidSendCommand4bit+0x400>
    413a:	4b c0       	rjmp	.+150    	; 0x41d2 <Lcd_VoidSendCommand4bit+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413c:	8e 01       	movw	r16, r28
    413e:	0a 56       	subi	r16, 0x6A	; 106
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	fe 01       	movw	r30, r28
    4144:	e8 56       	subi	r30, 0x68	; 104
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	60 81       	ld	r22, Z
    414a:	71 81       	ldd	r23, Z+1	; 0x01
    414c:	82 81       	ldd	r24, Z+2	; 0x02
    414e:	93 81       	ldd	r25, Z+3	; 0x03
    4150:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	f8 01       	movw	r30, r16
    415a:	91 83       	std	Z+1, r25	; 0x01
    415c:	80 83       	st	Z, r24
    415e:	de 01       	movw	r26, r28
    4160:	ae 56       	subi	r26, 0x6E	; 110
    4162:	bf 4f       	sbci	r27, 0xFF	; 255
    4164:	fe 01       	movw	r30, r28
    4166:	ea 56       	subi	r30, 0x6A	; 106
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	80 81       	ld	r24, Z
    416c:	91 81       	ldd	r25, Z+1	; 0x01
    416e:	11 96       	adiw	r26, 0x01	; 1
    4170:	9c 93       	st	X, r25
    4172:	8e 93       	st	-X, r24
    4174:	fe 01       	movw	r30, r28
    4176:	ee 56       	subi	r30, 0x6E	; 110
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <Lcd_VoidSendCommand4bit+0x490>
    4182:	fe 01       	movw	r30, r28
    4184:	ee 56       	subi	r30, 0x6E	; 110
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
    418c:	22 c0       	rjmp	.+68     	; 0x41d2 <Lcd_VoidSendCommand4bit+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    418e:	8e 01       	movw	r16, r28
    4190:	00 56       	subi	r16, 0x60	; 96
    4192:	1f 4f       	sbci	r17, 0xFF	; 255
    4194:	fe 01       	movw	r30, r28
    4196:	ef 55       	subi	r30, 0x5F	; 95
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	60 81       	ld	r22, Z
    419c:	71 81       	ldd	r23, Z+1	; 0x01
    419e:	82 81       	ldd	r24, Z+2	; 0x02
    41a0:	93 81       	ldd	r25, Z+3	; 0x03
    41a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	f8 01       	movw	r30, r16
    41ac:	80 83       	st	Z, r24
    41ae:	de 01       	movw	r26, r28
    41b0:	af 56       	subi	r26, 0x6F	; 111
    41b2:	bf 4f       	sbci	r27, 0xFF	; 255
    41b4:	fe 01       	movw	r30, r28
    41b6:	e0 56       	subi	r30, 0x60	; 96
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	80 81       	ld	r24, Z
    41bc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41be:	fe 01       	movw	r30, r28
    41c0:	ef 56       	subi	r30, 0x6F	; 111
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	80 81       	ld	r24, Z
    41c6:	8a 95       	dec	r24
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <Lcd_VoidSendCommand4bit+0x4d8>
    41ca:	fe 01       	movw	r30, r28
    41cc:	ef 56       	subi	r30, 0x6F	; 111
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	80 83       	st	Z, r24
	_delay_us(150);

	DIO_SetPinValue(PortData, PIN4, GET_BIT(Copy_U8Comand, 4));
    41d2:	fe 01       	movw	r30, r28
    41d4:	ef 53       	subi	r30, 0x3F	; 63
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	82 95       	swap	r24
    41dc:	8f 70       	andi	r24, 0x0F	; 15
    41de:	98 2f       	mov	r25, r24
    41e0:	91 70       	andi	r25, 0x01	; 1
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	64 e0       	ldi	r22, 0x04	; 4
    41e6:	49 2f       	mov	r20, r25
    41e8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN5, GET_BIT(Copy_U8Comand, 5));
    41ec:	fe 01       	movw	r30, r28
    41ee:	ef 53       	subi	r30, 0x3F	; 63
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	80 81       	ld	r24, Z
    41f4:	82 95       	swap	r24
    41f6:	86 95       	lsr	r24
    41f8:	87 70       	andi	r24, 0x07	; 7
    41fa:	98 2f       	mov	r25, r24
    41fc:	91 70       	andi	r25, 0x01	; 1
    41fe:	82 e0       	ldi	r24, 0x02	; 2
    4200:	65 e0       	ldi	r22, 0x05	; 5
    4202:	49 2f       	mov	r20, r25
    4204:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN6, GET_BIT(Copy_U8Comand, 6));
    4208:	fe 01       	movw	r30, r28
    420a:	ef 53       	subi	r30, 0x3F	; 63
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 81       	ld	r24, Z
    4210:	82 95       	swap	r24
    4212:	86 95       	lsr	r24
    4214:	86 95       	lsr	r24
    4216:	83 70       	andi	r24, 0x03	; 3
    4218:	98 2f       	mov	r25, r24
    421a:	91 70       	andi	r25, 0x01	; 1
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	66 e0       	ldi	r22, 0x06	; 6
    4220:	49 2f       	mov	r20, r25
    4222:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN7, GET_BIT(Copy_U8Comand, 7));
    4226:	fe 01       	movw	r30, r28
    4228:	ef 53       	subi	r30, 0x3F	; 63
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 81       	ld	r24, Z
    422e:	98 2f       	mov	r25, r24
    4230:	99 1f       	adc	r25, r25
    4232:	99 27       	eor	r25, r25
    4234:	99 1f       	adc	r25, r25
    4236:	82 e0       	ldi	r24, 0x02	; 2
    4238:	67 e0       	ldi	r22, 0x07	; 7
    423a:	49 2f       	mov	r20, r25
    423c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    4240:	fe 01       	movw	r30, r28
    4242:	e3 57       	subi	r30, 0x73	; 115
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a0 ea       	ldi	r26, 0xA0	; 160
    424c:	b2 e4       	ldi	r27, 0x42	; 66
    424e:	80 83       	st	Z, r24
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	a2 83       	std	Z+2, r26	; 0x02
    4254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4256:	8e 01       	movw	r16, r28
    4258:	07 57       	subi	r16, 0x77	; 119
    425a:	1f 4f       	sbci	r17, 0xFF	; 255
    425c:	fe 01       	movw	r30, r28
    425e:	e3 57       	subi	r30, 0x73	; 115
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	60 81       	ld	r22, Z
    4264:	71 81       	ldd	r23, Z+1	; 0x01
    4266:	82 81       	ldd	r24, Z+2	; 0x02
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	2b ea       	ldi	r18, 0xAB	; 171
    426c:	3a ea       	ldi	r19, 0xAA	; 170
    426e:	4a e2       	ldi	r20, 0x2A	; 42
    4270:	50 e4       	ldi	r21, 0x40	; 64
    4272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	f8 01       	movw	r30, r16
    427c:	80 83       	st	Z, r24
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	a2 83       	std	Z+2, r26	; 0x02
    4282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4284:	fe 01       	movw	r30, r28
    4286:	e7 57       	subi	r30, 0x77	; 119
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e8       	ldi	r20, 0x80	; 128
    4298:	5f e3       	ldi	r21, 0x3F	; 63
    429a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    429e:	88 23       	and	r24, r24
    42a0:	34 f4       	brge	.+12     	; 0x42ae <Lcd_VoidSendCommand4bit+0x5c0>
		__ticks = 1;
    42a2:	fe 01       	movw	r30, r28
    42a4:	e8 57       	subi	r30, 0x78	; 120
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	80 83       	st	Z, r24
    42ac:	e0 c0       	rjmp	.+448    	; 0x446e <Lcd_VoidSendCommand4bit+0x780>
	else if (__tmp > 255)
    42ae:	fe 01       	movw	r30, r28
    42b0:	e7 57       	subi	r30, 0x77	; 119
    42b2:	ff 4f       	sbci	r31, 0xFF	; 255
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	82 81       	ldd	r24, Z+2	; 0x02
    42ba:	93 81       	ldd	r25, Z+3	; 0x03
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	4f e7       	ldi	r20, 0x7F	; 127
    42c2:	53 e4       	ldi	r21, 0x43	; 67
    42c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    42c8:	18 16       	cp	r1, r24
    42ca:	0c f0       	brlt	.+2      	; 0x42ce <Lcd_VoidSendCommand4bit+0x5e0>
    42cc:	c0 c0       	rjmp	.+384    	; 0x444e <Lcd_VoidSendCommand4bit+0x760>
	{
		_delay_ms(__us / 1000.0);
    42ce:	fe 01       	movw	r30, r28
    42d0:	e3 57       	subi	r30, 0x73	; 115
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	60 81       	ld	r22, Z
    42d6:	71 81       	ldd	r23, Z+1	; 0x01
    42d8:	82 81       	ldd	r24, Z+2	; 0x02
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a e7       	ldi	r20, 0x7A	; 122
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	fe 01       	movw	r30, r28
    42ee:	ec 57       	subi	r30, 0x7C	; 124
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	80 83       	st	Z, r24
    42f4:	91 83       	std	Z+1, r25	; 0x01
    42f6:	a2 83       	std	Z+2, r26	; 0x02
    42f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fa:	8e 01       	movw	r16, r28
    42fc:	00 58       	subi	r16, 0x80	; 128
    42fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4300:	fe 01       	movw	r30, r28
    4302:	ec 57       	subi	r30, 0x7C	; 124
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	60 81       	ld	r22, Z
    4308:	71 81       	ldd	r23, Z+1	; 0x01
    430a:	82 81       	ldd	r24, Z+2	; 0x02
    430c:	93 81       	ldd	r25, Z+3	; 0x03
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	4a ef       	ldi	r20, 0xFA	; 250
    4314:	54 e4       	ldi	r21, 0x44	; 68
    4316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	f8 01       	movw	r30, r16
    4320:	80 83       	st	Z, r24
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	a2 83       	std	Z+2, r26	; 0x02
    4326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4328:	fe 01       	movw	r30, r28
    432a:	e0 58       	subi	r30, 0x80	; 128
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	60 81       	ld	r22, Z
    4330:	71 81       	ldd	r23, Z+1	; 0x01
    4332:	82 81       	ldd	r24, Z+2	; 0x02
    4334:	93 81       	ldd	r25, Z+3	; 0x03
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e8       	ldi	r20, 0x80	; 128
    433c:	5f e3       	ldi	r21, 0x3F	; 63
    433e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4342:	88 23       	and	r24, r24
    4344:	44 f4       	brge	.+16     	; 0x4356 <Lcd_VoidSendCommand4bit+0x668>
		__ticks = 1;
    4346:	fe 01       	movw	r30, r28
    4348:	e2 58       	subi	r30, 0x82	; 130
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	80 83       	st	Z, r24
    4354:	64 c0       	rjmp	.+200    	; 0x441e <Lcd_VoidSendCommand4bit+0x730>
	else if (__tmp > 65535)
    4356:	fe 01       	movw	r30, r28
    4358:	e0 58       	subi	r30, 0x80	; 128
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	60 81       	ld	r22, Z
    435e:	71 81       	ldd	r23, Z+1	; 0x01
    4360:	82 81       	ldd	r24, Z+2	; 0x02
    4362:	93 81       	ldd	r25, Z+3	; 0x03
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	0c f0       	brlt	.+2      	; 0x4376 <Lcd_VoidSendCommand4bit+0x688>
    4374:	43 c0       	rjmp	.+134    	; 0x43fc <Lcd_VoidSendCommand4bit+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4376:	fe 01       	movw	r30, r28
    4378:	ec 57       	subi	r30, 0x7C	; 124
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e2       	ldi	r20, 0x20	; 32
    438a:	51 e4       	ldi	r21, 0x41	; 65
    438c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	8e 01       	movw	r16, r28
    4396:	02 58       	subi	r16, 0x82	; 130
    4398:	1f 4f       	sbci	r17, 0xFF	; 255
    439a:	bc 01       	movw	r22, r24
    439c:	cd 01       	movw	r24, r26
    439e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	f8 01       	movw	r30, r16
    43a8:	91 83       	std	Z+1, r25	; 0x01
    43aa:	80 83       	st	Z, r24
    43ac:	1f c0       	rjmp	.+62     	; 0x43ec <Lcd_VoidSendCommand4bit+0x6fe>
    43ae:	fe 01       	movw	r30, r28
    43b0:	e4 58       	subi	r30, 0x84	; 132
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	88 ec       	ldi	r24, 0xC8	; 200
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43bc:	fe 01       	movw	r30, r28
    43be:	e4 58       	subi	r30, 0x84	; 132
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	80 81       	ld	r24, Z
    43c4:	91 81       	ldd	r25, Z+1	; 0x01
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <Lcd_VoidSendCommand4bit+0x6d8>
    43ca:	fe 01       	movw	r30, r28
    43cc:	e4 58       	subi	r30, 0x84	; 132
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	de 01       	movw	r26, r28
    43d6:	a2 58       	subi	r26, 0x82	; 130
    43d8:	bf 4f       	sbci	r27, 0xFF	; 255
    43da:	fe 01       	movw	r30, r28
    43dc:	e2 58       	subi	r30, 0x82	; 130
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	11 96       	adiw	r26, 0x01	; 1
    43e8:	9c 93       	st	X, r25
    43ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ec:	fe 01       	movw	r30, r28
    43ee:	e2 58       	subi	r30, 0x82	; 130
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	80 81       	ld	r24, Z
    43f4:	91 81       	ldd	r25, Z+1	; 0x01
    43f6:	00 97       	sbiw	r24, 0x00	; 0
    43f8:	d1 f6       	brne	.-76     	; 0x43ae <Lcd_VoidSendCommand4bit+0x6c0>
    43fa:	4b c0       	rjmp	.+150    	; 0x4492 <Lcd_VoidSendCommand4bit+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fc:	8e 01       	movw	r16, r28
    43fe:	02 58       	subi	r16, 0x82	; 130
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	e0 58       	subi	r30, 0x80	; 128
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	f8 01       	movw	r30, r16
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
    441e:	de 01       	movw	r26, r28
    4420:	a6 58       	subi	r26, 0x86	; 134
    4422:	bf 4f       	sbci	r27, 0xFF	; 255
    4424:	fe 01       	movw	r30, r28
    4426:	e2 58       	subi	r30, 0x82	; 130
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	80 81       	ld	r24, Z
    442c:	91 81       	ldd	r25, Z+1	; 0x01
    442e:	11 96       	adiw	r26, 0x01	; 1
    4430:	9c 93       	st	X, r25
    4432:	8e 93       	st	-X, r24
    4434:	fe 01       	movw	r30, r28
    4436:	e6 58       	subi	r30, 0x86	; 134
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <Lcd_VoidSendCommand4bit+0x750>
    4442:	fe 01       	movw	r30, r28
    4444:	e6 58       	subi	r30, 0x86	; 134
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	80 83       	st	Z, r24
    444c:	22 c0       	rjmp	.+68     	; 0x4492 <Lcd_VoidSendCommand4bit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    444e:	8e 01       	movw	r16, r28
    4450:	08 57       	subi	r16, 0x78	; 120
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	fe 01       	movw	r30, r28
    4456:	e7 57       	subi	r30, 0x77	; 119
    4458:	ff 4f       	sbci	r31, 0xFF	; 255
    445a:	60 81       	ld	r22, Z
    445c:	71 81       	ldd	r23, Z+1	; 0x01
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	93 81       	ldd	r25, Z+3	; 0x03
    4462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	f8 01       	movw	r30, r16
    446c:	80 83       	st	Z, r24
    446e:	de 01       	movw	r26, r28
    4470:	a7 58       	subi	r26, 0x87	; 135
    4472:	bf 4f       	sbci	r27, 0xFF	; 255
    4474:	fe 01       	movw	r30, r28
    4476:	e8 57       	subi	r30, 0x78	; 120
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	80 81       	ld	r24, Z
    447c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    447e:	fe 01       	movw	r30, r28
    4480:	e7 58       	subi	r30, 0x87	; 135
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	80 81       	ld	r24, Z
    4486:	8a 95       	dec	r24
    4488:	f1 f7       	brne	.-4      	; 0x4486 <Lcd_VoidSendCommand4bit+0x798>
    448a:	fe 01       	movw	r30, r28
    448c:	e7 58       	subi	r30, 0x87	; 135
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 83       	st	Z, r24

	//PORTC_REG = ((PORTC_REG & 0xF0) | (Copy_U8Comand & 0xF0));
	//_delay_ms(1);
	_delay_us(80);
	DIO_SetPinValue(PortControl, E, LOW);
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	62 e0       	ldi	r22, 0x02	; 2
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    449c:	fe 01       	movw	r30, r28
    449e:	eb 58       	subi	r30, 0x8B	; 139
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 ef       	ldi	r26, 0xF0	; 240
    44a8:	b1 e4       	ldi	r27, 0x41	; 65
    44aa:	80 83       	st	Z, r24
    44ac:	91 83       	std	Z+1, r25	; 0x01
    44ae:	a2 83       	std	Z+2, r26	; 0x02
    44b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44b2:	8e 01       	movw	r16, r28
    44b4:	0f 58       	subi	r16, 0x8F	; 143
    44b6:	1f 4f       	sbci	r17, 0xFF	; 255
    44b8:	fe 01       	movw	r30, r28
    44ba:	eb 58       	subi	r30, 0x8B	; 139
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	2b ea       	ldi	r18, 0xAB	; 171
    44c8:	3a ea       	ldi	r19, 0xAA	; 170
    44ca:	4a e2       	ldi	r20, 0x2A	; 42
    44cc:	50 e4       	ldi	r21, 0x40	; 64
    44ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	f8 01       	movw	r30, r16
    44d8:	80 83       	st	Z, r24
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	a2 83       	std	Z+2, r26	; 0x02
    44de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e0:	fe 01       	movw	r30, r28
    44e2:	ef 58       	subi	r30, 0x8F	; 143
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	60 81       	ld	r22, Z
    44e8:	71 81       	ldd	r23, Z+1	; 0x01
    44ea:	82 81       	ldd	r24, Z+2	; 0x02
    44ec:	93 81       	ldd	r25, Z+3	; 0x03
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e8       	ldi	r20, 0x80	; 128
    44f4:	5f e3       	ldi	r21, 0x3F	; 63
    44f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    44fa:	88 23       	and	r24, r24
    44fc:	34 f4       	brge	.+12     	; 0x450a <Lcd_VoidSendCommand4bit+0x81c>
		__ticks = 1;
    44fe:	fe 01       	movw	r30, r28
    4500:	e0 59       	subi	r30, 0x90	; 144
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	80 83       	st	Z, r24
    4508:	e0 c0       	rjmp	.+448    	; 0x46ca <Lcd_VoidSendCommand4bit+0x9dc>
	else if (__tmp > 255)
    450a:	fe 01       	movw	r30, r28
    450c:	ef 58       	subi	r30, 0x8F	; 143
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	60 81       	ld	r22, Z
    4512:	71 81       	ldd	r23, Z+1	; 0x01
    4514:	82 81       	ldd	r24, Z+2	; 0x02
    4516:	93 81       	ldd	r25, Z+3	; 0x03
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	4f e7       	ldi	r20, 0x7F	; 127
    451e:	53 e4       	ldi	r21, 0x43	; 67
    4520:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4524:	18 16       	cp	r1, r24
    4526:	0c f0       	brlt	.+2      	; 0x452a <Lcd_VoidSendCommand4bit+0x83c>
    4528:	c0 c0       	rjmp	.+384    	; 0x46aa <Lcd_VoidSendCommand4bit+0x9bc>
	{
		_delay_ms(__us / 1000.0);
    452a:	fe 01       	movw	r30, r28
    452c:	eb 58       	subi	r30, 0x8B	; 139
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	60 81       	ld	r22, Z
    4532:	71 81       	ldd	r23, Z+1	; 0x01
    4534:	82 81       	ldd	r24, Z+2	; 0x02
    4536:	93 81       	ldd	r25, Z+3	; 0x03
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	4a e7       	ldi	r20, 0x7A	; 122
    453e:	54 e4       	ldi	r21, 0x44	; 68
    4540:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	fe 01       	movw	r30, r28
    454a:	e4 59       	subi	r30, 0x94	; 148
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	80 83       	st	Z, r24
    4550:	91 83       	std	Z+1, r25	; 0x01
    4552:	a2 83       	std	Z+2, r26	; 0x02
    4554:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4556:	8e 01       	movw	r16, r28
    4558:	08 59       	subi	r16, 0x98	; 152
    455a:	1f 4f       	sbci	r17, 0xFF	; 255
    455c:	fe 01       	movw	r30, r28
    455e:	e4 59       	subi	r30, 0x94	; 148
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	60 81       	ld	r22, Z
    4564:	71 81       	ldd	r23, Z+1	; 0x01
    4566:	82 81       	ldd	r24, Z+2	; 0x02
    4568:	93 81       	ldd	r25, Z+3	; 0x03
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	4a ef       	ldi	r20, 0xFA	; 250
    4570:	54 e4       	ldi	r21, 0x44	; 68
    4572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	f8 01       	movw	r30, r16
    457c:	80 83       	st	Z, r24
    457e:	91 83       	std	Z+1, r25	; 0x01
    4580:	a2 83       	std	Z+2, r26	; 0x02
    4582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4584:	fe 01       	movw	r30, r28
    4586:	e8 59       	subi	r30, 0x98	; 152
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	60 81       	ld	r22, Z
    458c:	71 81       	ldd	r23, Z+1	; 0x01
    458e:	82 81       	ldd	r24, Z+2	; 0x02
    4590:	93 81       	ldd	r25, Z+3	; 0x03
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	44 f4       	brge	.+16     	; 0x45b2 <Lcd_VoidSendCommand4bit+0x8c4>
		__ticks = 1;
    45a2:	fe 01       	movw	r30, r28
    45a4:	ea 59       	subi	r30, 0x9A	; 154
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	91 83       	std	Z+1, r25	; 0x01
    45ae:	80 83       	st	Z, r24
    45b0:	64 c0       	rjmp	.+200    	; 0x467a <Lcd_VoidSendCommand4bit+0x98c>
	else if (__tmp > 65535)
    45b2:	fe 01       	movw	r30, r28
    45b4:	e8 59       	subi	r30, 0x98	; 152
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	60 81       	ld	r22, Z
    45ba:	71 81       	ldd	r23, Z+1	; 0x01
    45bc:	82 81       	ldd	r24, Z+2	; 0x02
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	3f ef       	ldi	r19, 0xFF	; 255
    45c4:	4f e7       	ldi	r20, 0x7F	; 127
    45c6:	57 e4       	ldi	r21, 0x47	; 71
    45c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    45cc:	18 16       	cp	r1, r24
    45ce:	0c f0       	brlt	.+2      	; 0x45d2 <Lcd_VoidSendCommand4bit+0x8e4>
    45d0:	43 c0       	rjmp	.+134    	; 0x4658 <Lcd_VoidSendCommand4bit+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d2:	fe 01       	movw	r30, r28
    45d4:	e4 59       	subi	r30, 0x94	; 148
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	60 81       	ld	r22, Z
    45da:	71 81       	ldd	r23, Z+1	; 0x01
    45dc:	82 81       	ldd	r24, Z+2	; 0x02
    45de:	93 81       	ldd	r25, Z+3	; 0x03
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	40 e2       	ldi	r20, 0x20	; 32
    45e6:	51 e4       	ldi	r21, 0x41	; 65
    45e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	8e 01       	movw	r16, r28
    45f2:	0a 59       	subi	r16, 0x9A	; 154
    45f4:	1f 4f       	sbci	r17, 0xFF	; 255
    45f6:	bc 01       	movw	r22, r24
    45f8:	cd 01       	movw	r24, r26
    45fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	f8 01       	movw	r30, r16
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	80 83       	st	Z, r24
    4608:	1f c0       	rjmp	.+62     	; 0x4648 <Lcd_VoidSendCommand4bit+0x95a>
    460a:	fe 01       	movw	r30, r28
    460c:	ec 59       	subi	r30, 0x9C	; 156
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	88 ec       	ldi	r24, 0xC8	; 200
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	91 83       	std	Z+1, r25	; 0x01
    4616:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4618:	fe 01       	movw	r30, r28
    461a:	ec 59       	subi	r30, 0x9C	; 156
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	80 81       	ld	r24, Z
    4620:	91 81       	ldd	r25, Z+1	; 0x01
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	f1 f7       	brne	.-4      	; 0x4622 <Lcd_VoidSendCommand4bit+0x934>
    4626:	fe 01       	movw	r30, r28
    4628:	ec 59       	subi	r30, 0x9C	; 156
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4630:	de 01       	movw	r26, r28
    4632:	aa 59       	subi	r26, 0x9A	; 154
    4634:	bf 4f       	sbci	r27, 0xFF	; 255
    4636:	fe 01       	movw	r30, r28
    4638:	ea 59       	subi	r30, 0x9A	; 154
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	80 81       	ld	r24, Z
    463e:	91 81       	ldd	r25, Z+1	; 0x01
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	11 96       	adiw	r26, 0x01	; 1
    4644:	9c 93       	st	X, r25
    4646:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4648:	fe 01       	movw	r30, r28
    464a:	ea 59       	subi	r30, 0x9A	; 154
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	00 97       	sbiw	r24, 0x00	; 0
    4654:	d1 f6       	brne	.-76     	; 0x460a <Lcd_VoidSendCommand4bit+0x91c>
    4656:	4b c0       	rjmp	.+150    	; 0x46ee <Lcd_VoidSendCommand4bit+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4658:	8e 01       	movw	r16, r28
    465a:	0a 59       	subi	r16, 0x9A	; 154
    465c:	1f 4f       	sbci	r17, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	e8 59       	subi	r30, 0x98	; 152
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	60 81       	ld	r22, Z
    4666:	71 81       	ldd	r23, Z+1	; 0x01
    4668:	82 81       	ldd	r24, Z+2	; 0x02
    466a:	93 81       	ldd	r25, Z+3	; 0x03
    466c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	f8 01       	movw	r30, r16
    4676:	91 83       	std	Z+1, r25	; 0x01
    4678:	80 83       	st	Z, r24
    467a:	de 01       	movw	r26, r28
    467c:	ae 59       	subi	r26, 0x9E	; 158
    467e:	bf 4f       	sbci	r27, 0xFF	; 255
    4680:	fe 01       	movw	r30, r28
    4682:	ea 59       	subi	r30, 0x9A	; 154
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	11 96       	adiw	r26, 0x01	; 1
    468c:	9c 93       	st	X, r25
    468e:	8e 93       	st	-X, r24
    4690:	fe 01       	movw	r30, r28
    4692:	ee 59       	subi	r30, 0x9E	; 158
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <Lcd_VoidSendCommand4bit+0x9ac>
    469e:	fe 01       	movw	r30, r28
    46a0:	ee 59       	subi	r30, 0x9E	; 158
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	91 83       	std	Z+1, r25	; 0x01
    46a6:	80 83       	st	Z, r24
    46a8:	22 c0       	rjmp	.+68     	; 0x46ee <Lcd_VoidSendCommand4bit+0xa00>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46aa:	8e 01       	movw	r16, r28
    46ac:	00 59       	subi	r16, 0x90	; 144
    46ae:	1f 4f       	sbci	r17, 0xFF	; 255
    46b0:	fe 01       	movw	r30, r28
    46b2:	ef 58       	subi	r30, 0x8F	; 143
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	60 81       	ld	r22, Z
    46b8:	71 81       	ldd	r23, Z+1	; 0x01
    46ba:	82 81       	ldd	r24, Z+2	; 0x02
    46bc:	93 81       	ldd	r25, Z+3	; 0x03
    46be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	f8 01       	movw	r30, r16
    46c8:	80 83       	st	Z, r24
    46ca:	de 01       	movw	r26, r28
    46cc:	af 59       	subi	r26, 0x9F	; 159
    46ce:	bf 4f       	sbci	r27, 0xFF	; 255
    46d0:	fe 01       	movw	r30, r28
    46d2:	e0 59       	subi	r30, 0x90	; 144
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	80 81       	ld	r24, Z
    46d8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46da:	fe 01       	movw	r30, r28
    46dc:	ef 59       	subi	r30, 0x9F	; 159
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	80 81       	ld	r24, Z
    46e2:	8a 95       	dec	r24
    46e4:	f1 f7       	brne	.-4      	; 0x46e2 <Lcd_VoidSendCommand4bit+0x9f4>
    46e6:	fe 01       	movw	r30, r28
    46e8:	ef 59       	subi	r30, 0x9F	; 159
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	80 83       	st	Z, r24
    46ee:	fe 01       	movw	r30, r28
    46f0:	e3 5a       	subi	r30, 0xA3	; 163
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	a0 ea       	ldi	r26, 0xA0	; 160
    46fa:	b1 e4       	ldi	r27, 0x41	; 65
    46fc:	80 83       	st	Z, r24
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	a2 83       	std	Z+2, r26	; 0x02
    4702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4704:	8e 01       	movw	r16, r28
    4706:	07 5a       	subi	r16, 0xA7	; 167
    4708:	1f 4f       	sbci	r17, 0xFF	; 255
    470a:	fe 01       	movw	r30, r28
    470c:	e3 5a       	subi	r30, 0xA3	; 163
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	2b ea       	ldi	r18, 0xAB	; 171
    471a:	3a ea       	ldi	r19, 0xAA	; 170
    471c:	4a e2       	ldi	r20, 0x2A	; 42
    471e:	50 e4       	ldi	r21, 0x40	; 64
    4720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	f8 01       	movw	r30, r16
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4732:	fe 01       	movw	r30, r28
    4734:	e7 5a       	subi	r30, 0xA7	; 167
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	60 81       	ld	r22, Z
    473a:	71 81       	ldd	r23, Z+1	; 0x01
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	93 81       	ldd	r25, Z+3	; 0x03
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	40 e8       	ldi	r20, 0x80	; 128
    4746:	5f e3       	ldi	r21, 0x3F	; 63
    4748:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    474c:	88 23       	and	r24, r24
    474e:	34 f4       	brge	.+12     	; 0x475c <Lcd_VoidSendCommand4bit+0xa6e>
		__ticks = 1;
    4750:	fe 01       	movw	r30, r28
    4752:	e8 5a       	subi	r30, 0xA8	; 168
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	80 83       	st	Z, r24
    475a:	e0 c0       	rjmp	.+448    	; 0x491c <Lcd_VoidSendCommand4bit+0xc2e>
	else if (__tmp > 255)
    475c:	fe 01       	movw	r30, r28
    475e:	e7 5a       	subi	r30, 0xA7	; 167
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	82 81       	ldd	r24, Z+2	; 0x02
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	4f e7       	ldi	r20, 0x7F	; 127
    4770:	53 e4       	ldi	r21, 0x43	; 67
    4772:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4776:	18 16       	cp	r1, r24
    4778:	0c f0       	brlt	.+2      	; 0x477c <Lcd_VoidSendCommand4bit+0xa8e>
    477a:	c0 c0       	rjmp	.+384    	; 0x48fc <Lcd_VoidSendCommand4bit+0xc0e>
	{
		_delay_ms(__us / 1000.0);
    477c:	fe 01       	movw	r30, r28
    477e:	e3 5a       	subi	r30, 0xA3	; 163
    4780:	ff 4f       	sbci	r31, 0xFF	; 255
    4782:	60 81       	ld	r22, Z
    4784:	71 81       	ldd	r23, Z+1	; 0x01
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	93 81       	ldd	r25, Z+3	; 0x03
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	4a e7       	ldi	r20, 0x7A	; 122
    4790:	54 e4       	ldi	r21, 0x44	; 68
    4792:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	fe 01       	movw	r30, r28
    479c:	ec 5a       	subi	r30, 0xAC	; 172
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	80 83       	st	Z, r24
    47a2:	91 83       	std	Z+1, r25	; 0x01
    47a4:	a2 83       	std	Z+2, r26	; 0x02
    47a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a8:	8e 01       	movw	r16, r28
    47aa:	00 5b       	subi	r16, 0xB0	; 176
    47ac:	1f 4f       	sbci	r17, 0xFF	; 255
    47ae:	fe 01       	movw	r30, r28
    47b0:	ec 5a       	subi	r30, 0xAC	; 172
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	4a ef       	ldi	r20, 0xFA	; 250
    47c2:	54 e4       	ldi	r21, 0x44	; 68
    47c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	f8 01       	movw	r30, r16
    47ce:	80 83       	st	Z, r24
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	a2 83       	std	Z+2, r26	; 0x02
    47d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47d6:	fe 01       	movw	r30, r28
    47d8:	e0 5b       	subi	r30, 0xB0	; 176
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	93 81       	ldd	r25, Z+3	; 0x03
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	40 e8       	ldi	r20, 0x80	; 128
    47ea:	5f e3       	ldi	r21, 0x3F	; 63
    47ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    47f0:	88 23       	and	r24, r24
    47f2:	44 f4       	brge	.+16     	; 0x4804 <Lcd_VoidSendCommand4bit+0xb16>
		__ticks = 1;
    47f4:	fe 01       	movw	r30, r28
    47f6:	e2 5b       	subi	r30, 0xB2	; 178
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	80 83       	st	Z, r24
    4802:	64 c0       	rjmp	.+200    	; 0x48cc <Lcd_VoidSendCommand4bit+0xbde>
	else if (__tmp > 65535)
    4804:	fe 01       	movw	r30, r28
    4806:	e0 5b       	subi	r30, 0xB0	; 176
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	60 81       	ld	r22, Z
    480c:	71 81       	ldd	r23, Z+1	; 0x01
    480e:	82 81       	ldd	r24, Z+2	; 0x02
    4810:	93 81       	ldd	r25, Z+3	; 0x03
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	3f ef       	ldi	r19, 0xFF	; 255
    4816:	4f e7       	ldi	r20, 0x7F	; 127
    4818:	57 e4       	ldi	r21, 0x47	; 71
    481a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    481e:	18 16       	cp	r1, r24
    4820:	0c f0       	brlt	.+2      	; 0x4824 <Lcd_VoidSendCommand4bit+0xb36>
    4822:	43 c0       	rjmp	.+134    	; 0x48aa <Lcd_VoidSendCommand4bit+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4824:	fe 01       	movw	r30, r28
    4826:	ec 5a       	subi	r30, 0xAC	; 172
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	60 81       	ld	r22, Z
    482c:	71 81       	ldd	r23, Z+1	; 0x01
    482e:	82 81       	ldd	r24, Z+2	; 0x02
    4830:	93 81       	ldd	r25, Z+3	; 0x03
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e2       	ldi	r20, 0x20	; 32
    4838:	51 e4       	ldi	r21, 0x41	; 65
    483a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	8e 01       	movw	r16, r28
    4844:	02 5b       	subi	r16, 0xB2	; 178
    4846:	1f 4f       	sbci	r17, 0xFF	; 255
    4848:	bc 01       	movw	r22, r24
    484a:	cd 01       	movw	r24, r26
    484c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	f8 01       	movw	r30, r16
    4856:	91 83       	std	Z+1, r25	; 0x01
    4858:	80 83       	st	Z, r24
    485a:	1f c0       	rjmp	.+62     	; 0x489a <Lcd_VoidSendCommand4bit+0xbac>
    485c:	fe 01       	movw	r30, r28
    485e:	e4 5b       	subi	r30, 0xB4	; 180
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	88 ec       	ldi	r24, 0xC8	; 200
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	91 83       	std	Z+1, r25	; 0x01
    4868:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    486a:	fe 01       	movw	r30, r28
    486c:	e4 5b       	subi	r30, 0xB4	; 180
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 81       	ld	r24, Z
    4872:	91 81       	ldd	r25, Z+1	; 0x01
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	f1 f7       	brne	.-4      	; 0x4874 <Lcd_VoidSendCommand4bit+0xb86>
    4878:	fe 01       	movw	r30, r28
    487a:	e4 5b       	subi	r30, 0xB4	; 180
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	91 83       	std	Z+1, r25	; 0x01
    4880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4882:	de 01       	movw	r26, r28
    4884:	a2 5b       	subi	r26, 0xB2	; 178
    4886:	bf 4f       	sbci	r27, 0xFF	; 255
    4888:	fe 01       	movw	r30, r28
    488a:	e2 5b       	subi	r30, 0xB2	; 178
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	11 96       	adiw	r26, 0x01	; 1
    4896:	9c 93       	st	X, r25
    4898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    489a:	fe 01       	movw	r30, r28
    489c:	e2 5b       	subi	r30, 0xB2	; 178
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	80 81       	ld	r24, Z
    48a2:	91 81       	ldd	r25, Z+1	; 0x01
    48a4:	00 97       	sbiw	r24, 0x00	; 0
    48a6:	d1 f6       	brne	.-76     	; 0x485c <Lcd_VoidSendCommand4bit+0xb6e>
    48a8:	4b c0       	rjmp	.+150    	; 0x4940 <Lcd_VoidSendCommand4bit+0xc52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48aa:	8e 01       	movw	r16, r28
    48ac:	02 5b       	subi	r16, 0xB2	; 178
    48ae:	1f 4f       	sbci	r17, 0xFF	; 255
    48b0:	fe 01       	movw	r30, r28
    48b2:	e0 5b       	subi	r30, 0xB0	; 176
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	60 81       	ld	r22, Z
    48b8:	71 81       	ldd	r23, Z+1	; 0x01
    48ba:	82 81       	ldd	r24, Z+2	; 0x02
    48bc:	93 81       	ldd	r25, Z+3	; 0x03
    48be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	f8 01       	movw	r30, r16
    48c8:	91 83       	std	Z+1, r25	; 0x01
    48ca:	80 83       	st	Z, r24
    48cc:	de 01       	movw	r26, r28
    48ce:	a6 5b       	subi	r26, 0xB6	; 182
    48d0:	bf 4f       	sbci	r27, 0xFF	; 255
    48d2:	fe 01       	movw	r30, r28
    48d4:	e2 5b       	subi	r30, 0xB2	; 178
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	80 81       	ld	r24, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	11 96       	adiw	r26, 0x01	; 1
    48de:	9c 93       	st	X, r25
    48e0:	8e 93       	st	-X, r24
    48e2:	fe 01       	movw	r30, r28
    48e4:	e6 5b       	subi	r30, 0xB6	; 182
    48e6:	ff 4f       	sbci	r31, 0xFF	; 255
    48e8:	80 81       	ld	r24, Z
    48ea:	91 81       	ldd	r25, Z+1	; 0x01
    48ec:	01 97       	sbiw	r24, 0x01	; 1
    48ee:	f1 f7       	brne	.-4      	; 0x48ec <Lcd_VoidSendCommand4bit+0xbfe>
    48f0:	fe 01       	movw	r30, r28
    48f2:	e6 5b       	subi	r30, 0xB6	; 182
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	80 83       	st	Z, r24
    48fa:	22 c0       	rjmp	.+68     	; 0x4940 <Lcd_VoidSendCommand4bit+0xc52>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48fc:	8e 01       	movw	r16, r28
    48fe:	08 5a       	subi	r16, 0xA8	; 168
    4900:	1f 4f       	sbci	r17, 0xFF	; 255
    4902:	fe 01       	movw	r30, r28
    4904:	e7 5a       	subi	r30, 0xA7	; 167
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	60 81       	ld	r22, Z
    490a:	71 81       	ldd	r23, Z+1	; 0x01
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	80 83       	st	Z, r24
    491c:	de 01       	movw	r26, r28
    491e:	a7 5b       	subi	r26, 0xB7	; 183
    4920:	bf 4f       	sbci	r27, 0xFF	; 255
    4922:	fe 01       	movw	r30, r28
    4924:	e8 5a       	subi	r30, 0xA8	; 168
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 81       	ld	r24, Z
    492a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    492c:	fe 01       	movw	r30, r28
    492e:	e7 5b       	subi	r30, 0xB7	; 183
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	8a 95       	dec	r24
    4936:	f1 f7       	brne	.-4      	; 0x4934 <Lcd_VoidSendCommand4bit+0xc46>
    4938:	fe 01       	movw	r30, r28
    493a:	e7 5b       	subi	r30, 0xB7	; 183
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	80 83       	st	Z, r24
	 _delay_ms(2);
	 DIO_SetPinValue(PortControl, E, LOW);
	 _delay_us(2);*/

	_delay_us(20);
	DIO_SetPinValue(PortControl, E, HIGH);
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	62 e0       	ldi	r22, 0x02	; 2
    4944:	41 e0       	ldi	r20, 0x01	; 1
    4946:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    494a:	fe 01       	movw	r30, r28
    494c:	eb 5b       	subi	r30, 0xBB	; 187
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	a6 e1       	ldi	r26, 0x16	; 22
    4956:	b3 e4       	ldi	r27, 0x43	; 67
    4958:	80 83       	st	Z, r24
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	a2 83       	std	Z+2, r26	; 0x02
    495e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4960:	8e 01       	movw	r16, r28
    4962:	0f 5b       	subi	r16, 0xBF	; 191
    4964:	1f 4f       	sbci	r17, 0xFF	; 255
    4966:	fe 01       	movw	r30, r28
    4968:	eb 5b       	subi	r30, 0xBB	; 187
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	60 81       	ld	r22, Z
    496e:	71 81       	ldd	r23, Z+1	; 0x01
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	93 81       	ldd	r25, Z+3	; 0x03
    4974:	2b ea       	ldi	r18, 0xAB	; 171
    4976:	3a ea       	ldi	r19, 0xAA	; 170
    4978:	4a e2       	ldi	r20, 0x2A	; 42
    497a:	50 e4       	ldi	r21, 0x40	; 64
    497c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	f8 01       	movw	r30, r16
    4986:	80 83       	st	Z, r24
    4988:	91 83       	std	Z+1, r25	; 0x01
    498a:	a2 83       	std	Z+2, r26	; 0x02
    498c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    498e:	fe 01       	movw	r30, r28
    4990:	ef 5b       	subi	r30, 0xBF	; 191
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	60 81       	ld	r22, Z
    4996:	71 81       	ldd	r23, Z+1	; 0x01
    4998:	82 81       	ldd	r24, Z+2	; 0x02
    499a:	93 81       	ldd	r25, Z+3	; 0x03
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	40 e8       	ldi	r20, 0x80	; 128
    49a2:	5f e3       	ldi	r21, 0x3F	; 63
    49a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    49a8:	88 23       	and	r24, r24
    49aa:	34 f4       	brge	.+12     	; 0x49b8 <Lcd_VoidSendCommand4bit+0xcca>
		__ticks = 1;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	fe 01       	movw	r30, r28
    49b0:	e0 5c       	subi	r30, 0xC0	; 192
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	80 83       	st	Z, r24
    49b6:	9d c0       	rjmp	.+314    	; 0x4af2 <Lcd_VoidSendCommand4bit+0xe04>
	else if (__tmp > 255)
    49b8:	fe 01       	movw	r30, r28
    49ba:	ef 5b       	subi	r30, 0xBF	; 191
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	4f e7       	ldi	r20, 0x7F	; 127
    49cc:	53 e4       	ldi	r21, 0x43	; 67
    49ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    49d2:	18 16       	cp	r1, r24
    49d4:	0c f0       	brlt	.+2      	; 0x49d8 <Lcd_VoidSendCommand4bit+0xcea>
    49d6:	7e c0       	rjmp	.+252    	; 0x4ad4 <Lcd_VoidSendCommand4bit+0xde6>
	{
		_delay_ms(__us / 1000.0);
    49d8:	fe 01       	movw	r30, r28
    49da:	eb 5b       	subi	r30, 0xBB	; 187
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	60 81       	ld	r22, Z
    49e0:	71 81       	ldd	r23, Z+1	; 0x01
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	4a e7       	ldi	r20, 0x7A	; 122
    49ec:	54 e4       	ldi	r21, 0x44	; 68
    49ee:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	8c af       	std	Y+60, r24	; 0x3c
    49f8:	9d af       	std	Y+61, r25	; 0x3d
    49fa:	ae af       	std	Y+62, r26	; 0x3e
    49fc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a00:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a02:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a04:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	4a ef       	ldi	r20, 0xFA	; 250
    4a0c:	54 e4       	ldi	r21, 0x44	; 68
    4a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	88 af       	std	Y+56, r24	; 0x38
    4a18:	99 af       	std	Y+57, r25	; 0x39
    4a1a:	aa af       	std	Y+58, r26	; 0x3a
    4a1c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4a1e:	68 ad       	ldd	r22, Y+56	; 0x38
    4a20:	79 ad       	ldd	r23, Y+57	; 0x39
    4a22:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a24:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e8       	ldi	r20, 0x80	; 128
    4a2c:	5f e3       	ldi	r21, 0x3F	; 63
    4a2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4a32:	88 23       	and	r24, r24
    4a34:	2c f4       	brge	.+10     	; 0x4a40 <Lcd_VoidSendCommand4bit+0xd52>
		__ticks = 1;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	9f ab       	std	Y+55, r25	; 0x37
    4a3c:	8e ab       	std	Y+54, r24	; 0x36
    4a3e:	3f c0       	rjmp	.+126    	; 0x4abe <Lcd_VoidSendCommand4bit+0xdd0>
	else if (__tmp > 65535)
    4a40:	68 ad       	ldd	r22, Y+56	; 0x38
    4a42:	79 ad       	ldd	r23, Y+57	; 0x39
    4a44:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a46:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	3f ef       	ldi	r19, 0xFF	; 255
    4a4c:	4f e7       	ldi	r20, 0x7F	; 127
    4a4e:	57 e4       	ldi	r21, 0x47	; 71
    4a50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4a54:	18 16       	cp	r1, r24
    4a56:	4c f5       	brge	.+82     	; 0x4aaa <Lcd_VoidSendCommand4bit+0xdbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a58:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a60:	20 e0       	ldi	r18, 0x00	; 0
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	40 e2       	ldi	r20, 0x20	; 32
    4a66:	51 e4       	ldi	r21, 0x41	; 65
    4a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	bc 01       	movw	r22, r24
    4a72:	cd 01       	movw	r24, r26
    4a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	9f ab       	std	Y+55, r25	; 0x37
    4a7e:	8e ab       	std	Y+54, r24	; 0x36
    4a80:	0f c0       	rjmp	.+30     	; 0x4aa0 <Lcd_VoidSendCommand4bit+0xdb2>
    4a82:	88 ec       	ldi	r24, 0xC8	; 200
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9d ab       	std	Y+53, r25	; 0x35
    4a88:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a8a:	8c a9       	ldd	r24, Y+52	; 0x34
    4a8c:	9d a9       	ldd	r25, Y+53	; 0x35
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	f1 f7       	brne	.-4      	; 0x4a8e <Lcd_VoidSendCommand4bit+0xda0>
    4a92:	9d ab       	std	Y+53, r25	; 0x35
    4a94:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a96:	8e a9       	ldd	r24, Y+54	; 0x36
    4a98:	9f a9       	ldd	r25, Y+55	; 0x37
    4a9a:	01 97       	sbiw	r24, 0x01	; 1
    4a9c:	9f ab       	std	Y+55, r25	; 0x37
    4a9e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa0:	8e a9       	ldd	r24, Y+54	; 0x36
    4aa2:	9f a9       	ldd	r25, Y+55	; 0x37
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	69 f7       	brne	.-38     	; 0x4a82 <Lcd_VoidSendCommand4bit+0xd94>
    4aa8:	2d c0       	rjmp	.+90     	; 0x4b04 <Lcd_VoidSendCommand4bit+0xe16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aaa:	68 ad       	ldd	r22, Y+56	; 0x38
    4aac:	79 ad       	ldd	r23, Y+57	; 0x39
    4aae:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ab0:	9b ad       	ldd	r25, Y+59	; 0x3b
    4ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9f ab       	std	Y+55, r25	; 0x37
    4abc:	8e ab       	std	Y+54, r24	; 0x36
    4abe:	8e a9       	ldd	r24, Y+54	; 0x36
    4ac0:	9f a9       	ldd	r25, Y+55	; 0x37
    4ac2:	9b ab       	std	Y+51, r25	; 0x33
    4ac4:	8a ab       	std	Y+50, r24	; 0x32
    4ac6:	8a a9       	ldd	r24, Y+50	; 0x32
    4ac8:	9b a9       	ldd	r25, Y+51	; 0x33
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <Lcd_VoidSendCommand4bit+0xddc>
    4ace:	9b ab       	std	Y+51, r25	; 0x33
    4ad0:	8a ab       	std	Y+50, r24	; 0x32
    4ad2:	18 c0       	rjmp	.+48     	; 0x4b04 <Lcd_VoidSendCommand4bit+0xe16>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ef 5b       	subi	r30, 0xBF	; 191
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	fe 01       	movw	r30, r28
    4aec:	e0 5c       	subi	r30, 0xC0	; 192
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	80 83       	st	Z, r24
    4af2:	fe 01       	movw	r30, r28
    4af4:	e0 5c       	subi	r30, 0xC0	; 192
    4af6:	ff 4f       	sbci	r31, 0xFF	; 255
    4af8:	80 81       	ld	r24, Z
    4afa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4afc:	89 a9       	ldd	r24, Y+49	; 0x31
    4afe:	8a 95       	dec	r24
    4b00:	f1 f7       	brne	.-4      	; 0x4afe <Lcd_VoidSendCommand4bit+0xe10>
    4b02:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(150);

	DIO_SetPinValue(PortData, PIN4, GET_BIT(Copy_U8Comand, 0));
    4b04:	fe 01       	movw	r30, r28
    4b06:	ef 53       	subi	r30, 0x3F	; 63
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	80 81       	ld	r24, Z
    4b0c:	98 2f       	mov	r25, r24
    4b0e:	91 70       	andi	r25, 0x01	; 1
    4b10:	82 e0       	ldi	r24, 0x02	; 2
    4b12:	64 e0       	ldi	r22, 0x04	; 4
    4b14:	49 2f       	mov	r20, r25
    4b16:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN5, GET_BIT(Copy_U8Comand, 1));
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	ef 53       	subi	r30, 0x3F	; 63
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	80 81       	ld	r24, Z
    4b22:	86 95       	lsr	r24
    4b24:	98 2f       	mov	r25, r24
    4b26:	91 70       	andi	r25, 0x01	; 1
    4b28:	82 e0       	ldi	r24, 0x02	; 2
    4b2a:	65 e0       	ldi	r22, 0x05	; 5
    4b2c:	49 2f       	mov	r20, r25
    4b2e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN6, GET_BIT(Copy_U8Comand, 2));
    4b32:	fe 01       	movw	r30, r28
    4b34:	ef 53       	subi	r30, 0x3F	; 63
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	80 81       	ld	r24, Z
    4b3a:	86 95       	lsr	r24
    4b3c:	86 95       	lsr	r24
    4b3e:	98 2f       	mov	r25, r24
    4b40:	91 70       	andi	r25, 0x01	; 1
    4b42:	82 e0       	ldi	r24, 0x02	; 2
    4b44:	66 e0       	ldi	r22, 0x06	; 6
    4b46:	49 2f       	mov	r20, r25
    4b48:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PortData, PIN7, GET_BIT(Copy_U8Comand, 3));
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	ef 53       	subi	r30, 0x3F	; 63
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	80 81       	ld	r24, Z
    4b54:	86 95       	lsr	r24
    4b56:	86 95       	lsr	r24
    4b58:	86 95       	lsr	r24
    4b5a:	98 2f       	mov	r25, r24
    4b5c:	91 70       	andi	r25, 0x01	; 1
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	67 e0       	ldi	r22, 0x07	; 7
    4b62:	49 2f       	mov	r20, r25
    4b64:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    4b68:	80 e0       	ldi	r24, 0x00	; 0
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	a0 ea       	ldi	r26, 0xA0	; 160
    4b6e:	b2 e4       	ldi	r27, 0x42	; 66
    4b70:	8d a7       	std	Y+45, r24	; 0x2d
    4b72:	9e a7       	std	Y+46, r25	; 0x2e
    4b74:	af a7       	std	Y+47, r26	; 0x2f
    4b76:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b78:	6d a5       	ldd	r22, Y+45	; 0x2d
    4b7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    4b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    4b80:	2b ea       	ldi	r18, 0xAB	; 171
    4b82:	3a ea       	ldi	r19, 0xAA	; 170
    4b84:	4a e2       	ldi	r20, 0x2A	; 42
    4b86:	50 e4       	ldi	r21, 0x40	; 64
    4b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	89 a7       	std	Y+41, r24	; 0x29
    4b92:	9a a7       	std	Y+42, r25	; 0x2a
    4b94:	ab a7       	std	Y+43, r26	; 0x2b
    4b96:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4b98:	69 a5       	ldd	r22, Y+41	; 0x29
    4b9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    4b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	40 e8       	ldi	r20, 0x80	; 128
    4ba6:	5f e3       	ldi	r21, 0x3F	; 63
    4ba8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4bac:	88 23       	and	r24, r24
    4bae:	1c f4       	brge	.+6      	; 0x4bb6 <Lcd_VoidSendCommand4bit+0xec8>
		__ticks = 1;
    4bb0:	81 e0       	ldi	r24, 0x01	; 1
    4bb2:	88 a7       	std	Y+40, r24	; 0x28
    4bb4:	91 c0       	rjmp	.+290    	; 0x4cd8 <Lcd_VoidSendCommand4bit+0xfea>
	else if (__tmp > 255)
    4bb6:	69 a5       	ldd	r22, Y+41	; 0x29
    4bb8:	7a a5       	ldd	r23, Y+42	; 0x2a
    4bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	4f e7       	ldi	r20, 0x7F	; 127
    4bc4:	53 e4       	ldi	r21, 0x43	; 67
    4bc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4bca:	18 16       	cp	r1, r24
    4bcc:	0c f0       	brlt	.+2      	; 0x4bd0 <Lcd_VoidSendCommand4bit+0xee2>
    4bce:	7b c0       	rjmp	.+246    	; 0x4cc6 <Lcd_VoidSendCommand4bit+0xfd8>
	{
		_delay_ms(__us / 1000.0);
    4bd0:	6d a5       	ldd	r22, Y+45	; 0x2d
    4bd2:	7e a5       	ldd	r23, Y+46	; 0x2e
    4bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	4a e7       	ldi	r20, 0x7A	; 122
    4bde:	54 e4       	ldi	r21, 0x44	; 68
    4be0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	8c a3       	std	Y+36, r24	; 0x24
    4bea:	9d a3       	std	Y+37, r25	; 0x25
    4bec:	ae a3       	std	Y+38, r26	; 0x26
    4bee:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf0:	6c a1       	ldd	r22, Y+36	; 0x24
    4bf2:	7d a1       	ldd	r23, Y+37	; 0x25
    4bf4:	8e a1       	ldd	r24, Y+38	; 0x26
    4bf6:	9f a1       	ldd	r25, Y+39	; 0x27
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	4a ef       	ldi	r20, 0xFA	; 250
    4bfe:	54 e4       	ldi	r21, 0x44	; 68
    4c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	88 a3       	std	Y+32, r24	; 0x20
    4c0a:	99 a3       	std	Y+33, r25	; 0x21
    4c0c:	aa a3       	std	Y+34, r26	; 0x22
    4c0e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4c10:	68 a1       	ldd	r22, Y+32	; 0x20
    4c12:	79 a1       	ldd	r23, Y+33	; 0x21
    4c14:	8a a1       	ldd	r24, Y+34	; 0x22
    4c16:	9b a1       	ldd	r25, Y+35	; 0x23
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e8       	ldi	r20, 0x80	; 128
    4c1e:	5f e3       	ldi	r21, 0x3F	; 63
    4c20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c24:	88 23       	and	r24, r24
    4c26:	2c f4       	brge	.+10     	; 0x4c32 <Lcd_VoidSendCommand4bit+0xf44>
		__ticks = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9f 8f       	std	Y+31, r25	; 0x1f
    4c2e:	8e 8f       	std	Y+30, r24	; 0x1e
    4c30:	3f c0       	rjmp	.+126    	; 0x4cb0 <Lcd_VoidSendCommand4bit+0xfc2>
	else if (__tmp > 65535)
    4c32:	68 a1       	ldd	r22, Y+32	; 0x20
    4c34:	79 a1       	ldd	r23, Y+33	; 0x21
    4c36:	8a a1       	ldd	r24, Y+34	; 0x22
    4c38:	9b a1       	ldd	r25, Y+35	; 0x23
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	3f ef       	ldi	r19, 0xFF	; 255
    4c3e:	4f e7       	ldi	r20, 0x7F	; 127
    4c40:	57 e4       	ldi	r21, 0x47	; 71
    4c42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4c46:	18 16       	cp	r1, r24
    4c48:	4c f5       	brge	.+82     	; 0x4c9c <Lcd_VoidSendCommand4bit+0xfae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c4a:	6c a1       	ldd	r22, Y+36	; 0x24
    4c4c:	7d a1       	ldd	r23, Y+37	; 0x25
    4c4e:	8e a1       	ldd	r24, Y+38	; 0x26
    4c50:	9f a1       	ldd	r25, Y+39	; 0x27
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e2       	ldi	r20, 0x20	; 32
    4c58:	51 e4       	ldi	r21, 0x41	; 65
    4c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	bc 01       	movw	r22, r24
    4c64:	cd 01       	movw	r24, r26
    4c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	9f 8f       	std	Y+31, r25	; 0x1f
    4c70:	8e 8f       	std	Y+30, r24	; 0x1e
    4c72:	0f c0       	rjmp	.+30     	; 0x4c92 <Lcd_VoidSendCommand4bit+0xfa4>
    4c74:	88 ec       	ldi	r24, 0xC8	; 200
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9d 8f       	std	Y+29, r25	; 0x1d
    4c7a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4c7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <Lcd_VoidSendCommand4bit+0xf92>
    4c84:	9d 8f       	std	Y+29, r25	; 0x1d
    4c86:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	9f 8f       	std	Y+31, r25	; 0x1f
    4c90:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	69 f7       	brne	.-38     	; 0x4c74 <Lcd_VoidSendCommand4bit+0xf86>
    4c9a:	24 c0       	rjmp	.+72     	; 0x4ce4 <Lcd_VoidSendCommand4bit+0xff6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9c:	68 a1       	ldd	r22, Y+32	; 0x20
    4c9e:	79 a1       	ldd	r23, Y+33	; 0x21
    4ca0:	8a a1       	ldd	r24, Y+34	; 0x22
    4ca2:	9b a1       	ldd	r25, Y+35	; 0x23
    4ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	9f 8f       	std	Y+31, r25	; 0x1f
    4cae:	8e 8f       	std	Y+30, r24	; 0x1e
    4cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4cb4:	9b 8f       	std	Y+27, r25	; 0x1b
    4cb6:	8a 8f       	std	Y+26, r24	; 0x1a
    4cb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4cba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <Lcd_VoidSendCommand4bit+0xfce>
    4cc0:	9b 8f       	std	Y+27, r25	; 0x1b
    4cc2:	8a 8f       	std	Y+26, r24	; 0x1a
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <Lcd_VoidSendCommand4bit+0xff6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4cc6:	69 a5       	ldd	r22, Y+41	; 0x29
    4cc8:	7a a5       	ldd	r23, Y+42	; 0x2a
    4cca:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ccc:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4cd2:	dc 01       	movw	r26, r24
    4cd4:	cb 01       	movw	r24, r22
    4cd6:	88 a7       	std	Y+40, r24	; 0x28
    4cd8:	88 a5       	ldd	r24, Y+40	; 0x28
    4cda:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cdc:	89 8d       	ldd	r24, Y+25	; 0x19
    4cde:	8a 95       	dec	r24
    4ce0:	f1 f7       	brne	.-4      	; 0x4cde <Lcd_VoidSendCommand4bit+0xff0>
    4ce2:	89 8f       	std	Y+25, r24	; 0x19
	 DIO_SetPinValue(PortControl, E, HIGH);
	 _delay_ms(2);
	 DIO_SetPinValue(PortControl, E, LOW);
	 _delay_ms(2);*/
	_delay_us(80);
	DIO_SetPinValue(PortControl, E, LOW);
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	62 e0       	ldi	r22, 0x02	; 2
    4ce8:	40 e0       	ldi	r20, 0x00	; 0
    4cea:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	a0 ef       	ldi	r26, 0xF0	; 240
    4cf4:	b1 e4       	ldi	r27, 0x41	; 65
    4cf6:	8d 8b       	std	Y+21, r24	; 0x15
    4cf8:	9e 8b       	std	Y+22, r25	; 0x16
    4cfa:	af 8b       	std	Y+23, r26	; 0x17
    4cfc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    4d00:	7e 89       	ldd	r23, Y+22	; 0x16
    4d02:	8f 89       	ldd	r24, Y+23	; 0x17
    4d04:	98 8d       	ldd	r25, Y+24	; 0x18
    4d06:	2b ea       	ldi	r18, 0xAB	; 171
    4d08:	3a ea       	ldi	r19, 0xAA	; 170
    4d0a:	4a e2       	ldi	r20, 0x2A	; 42
    4d0c:	50 e4       	ldi	r21, 0x40	; 64
    4d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	89 8b       	std	Y+17, r24	; 0x11
    4d18:	9a 8b       	std	Y+18, r25	; 0x12
    4d1a:	ab 8b       	std	Y+19, r26	; 0x13
    4d1c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4d1e:	69 89       	ldd	r22, Y+17	; 0x11
    4d20:	7a 89       	ldd	r23, Y+18	; 0x12
    4d22:	8b 89       	ldd	r24, Y+19	; 0x13
    4d24:	9c 89       	ldd	r25, Y+20	; 0x14
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e8       	ldi	r20, 0x80	; 128
    4d2c:	5f e3       	ldi	r21, 0x3F	; 63
    4d2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4d32:	88 23       	and	r24, r24
    4d34:	1c f4       	brge	.+6      	; 0x4d3c <Lcd_VoidSendCommand4bit+0x104e>
		__ticks = 1;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	88 8b       	std	Y+16, r24	; 0x10
    4d3a:	91 c0       	rjmp	.+290    	; 0x4e5e <Lcd_VoidSendCommand4bit+0x1170>
	else if (__tmp > 255)
    4d3c:	69 89       	ldd	r22, Y+17	; 0x11
    4d3e:	7a 89       	ldd	r23, Y+18	; 0x12
    4d40:	8b 89       	ldd	r24, Y+19	; 0x13
    4d42:	9c 89       	ldd	r25, Y+20	; 0x14
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	4f e7       	ldi	r20, 0x7F	; 127
    4d4a:	53 e4       	ldi	r21, 0x43	; 67
    4d4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4d50:	18 16       	cp	r1, r24
    4d52:	0c f0       	brlt	.+2      	; 0x4d56 <Lcd_VoidSendCommand4bit+0x1068>
    4d54:	7b c0       	rjmp	.+246    	; 0x4e4c <Lcd_VoidSendCommand4bit+0x115e>
	{
		_delay_ms(__us / 1000.0);
    4d56:	6d 89       	ldd	r22, Y+21	; 0x15
    4d58:	7e 89       	ldd	r23, Y+22	; 0x16
    4d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	4a e7       	ldi	r20, 0x7A	; 122
    4d64:	54 e4       	ldi	r21, 0x44	; 68
    4d66:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	8c 87       	std	Y+12, r24	; 0x0c
    4d70:	9d 87       	std	Y+13, r25	; 0x0d
    4d72:	ae 87       	std	Y+14, r26	; 0x0e
    4d74:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d76:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d78:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	4a ef       	ldi	r20, 0xFA	; 250
    4d84:	54 e4       	ldi	r21, 0x44	; 68
    4d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	88 87       	std	Y+8, r24	; 0x08
    4d90:	99 87       	std	Y+9, r25	; 0x09
    4d92:	aa 87       	std	Y+10, r26	; 0x0a
    4d94:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d96:	68 85       	ldd	r22, Y+8	; 0x08
    4d98:	79 85       	ldd	r23, Y+9	; 0x09
    4d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d9e:	20 e0       	ldi	r18, 0x00	; 0
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	40 e8       	ldi	r20, 0x80	; 128
    4da4:	5f e3       	ldi	r21, 0x3F	; 63
    4da6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4daa:	88 23       	and	r24, r24
    4dac:	2c f4       	brge	.+10     	; 0x4db8 <Lcd_VoidSendCommand4bit+0x10ca>
		__ticks = 1;
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	9f 83       	std	Y+7, r25	; 0x07
    4db4:	8e 83       	std	Y+6, r24	; 0x06
    4db6:	3f c0       	rjmp	.+126    	; 0x4e36 <Lcd_VoidSendCommand4bit+0x1148>
	else if (__tmp > 65535)
    4db8:	68 85       	ldd	r22, Y+8	; 0x08
    4dba:	79 85       	ldd	r23, Y+9	; 0x09
    4dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	3f ef       	ldi	r19, 0xFF	; 255
    4dc4:	4f e7       	ldi	r20, 0x7F	; 127
    4dc6:	57 e4       	ldi	r21, 0x47	; 71
    4dc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4dcc:	18 16       	cp	r1, r24
    4dce:	4c f5       	brge	.+82     	; 0x4e22 <Lcd_VoidSendCommand4bit+0x1134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4dd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4dd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	40 e2       	ldi	r20, 0x20	; 32
    4dde:	51 e4       	ldi	r21, 0x41	; 65
    4de0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	bc 01       	movw	r22, r24
    4dea:	cd 01       	movw	r24, r26
    4dec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9f 83       	std	Y+7, r25	; 0x07
    4df6:	8e 83       	std	Y+6, r24	; 0x06
    4df8:	0f c0       	rjmp	.+30     	; 0x4e18 <Lcd_VoidSendCommand4bit+0x112a>
    4dfa:	88 ec       	ldi	r24, 0xC8	; 200
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	9d 83       	std	Y+5, r25	; 0x05
    4e00:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e02:	8c 81       	ldd	r24, Y+4	; 0x04
    4e04:	9d 81       	ldd	r25, Y+5	; 0x05
    4e06:	01 97       	sbiw	r24, 0x01	; 1
    4e08:	f1 f7       	brne	.-4      	; 0x4e06 <Lcd_VoidSendCommand4bit+0x1118>
    4e0a:	9d 83       	std	Y+5, r25	; 0x05
    4e0c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e10:	9f 81       	ldd	r25, Y+7	; 0x07
    4e12:	01 97       	sbiw	r24, 0x01	; 1
    4e14:	9f 83       	std	Y+7, r25	; 0x07
    4e16:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e18:	8e 81       	ldd	r24, Y+6	; 0x06
    4e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4e1c:	00 97       	sbiw	r24, 0x00	; 0
    4e1e:	69 f7       	brne	.-38     	; 0x4dfa <Lcd_VoidSendCommand4bit+0x110c>
    4e20:	24 c0       	rjmp	.+72     	; 0x4e6a <Lcd_VoidSendCommand4bit+0x117c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e22:	68 85       	ldd	r22, Y+8	; 0x08
    4e24:	79 85       	ldd	r23, Y+9	; 0x09
    4e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e28:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e2e:	dc 01       	movw	r26, r24
    4e30:	cb 01       	movw	r24, r22
    4e32:	9f 83       	std	Y+7, r25	; 0x07
    4e34:	8e 83       	std	Y+6, r24	; 0x06
    4e36:	8e 81       	ldd	r24, Y+6	; 0x06
    4e38:	9f 81       	ldd	r25, Y+7	; 0x07
    4e3a:	9b 83       	std	Y+3, r25	; 0x03
    4e3c:	8a 83       	std	Y+2, r24	; 0x02
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	9b 81       	ldd	r25, Y+3	; 0x03
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	f1 f7       	brne	.-4      	; 0x4e42 <Lcd_VoidSendCommand4bit+0x1154>
    4e46:	9b 83       	std	Y+3, r25	; 0x03
    4e48:	8a 83       	std	Y+2, r24	; 0x02
    4e4a:	0f c0       	rjmp	.+30     	; 0x4e6a <Lcd_VoidSendCommand4bit+0x117c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e4c:	69 89       	ldd	r22, Y+17	; 0x11
    4e4e:	7a 89       	ldd	r23, Y+18	; 0x12
    4e50:	8b 89       	ldd	r24, Y+19	; 0x13
    4e52:	9c 89       	ldd	r25, Y+20	; 0x14
    4e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	88 8b       	std	Y+16, r24	; 0x10
    4e5e:	88 89       	ldd	r24, Y+16	; 0x10
    4e60:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	8a 95       	dec	r24
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <Lcd_VoidSendCommand4bit+0x1176>
    4e68:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(30);
}
    4e6a:	cf 53       	subi	r28, 0x3F	; 63
    4e6c:	df 4f       	sbci	r29, 0xFF	; 255
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	cf 91       	pop	r28
    4e7a:	df 91       	pop	r29
    4e7c:	1f 91       	pop	r17
    4e7e:	0f 91       	pop	r16
    4e80:	08 95       	ret

00004e82 <Lcd_VoidSendString>:

void Lcd_VoidSendString(u8 *Copy_U8Data) {
    4e82:	df 93       	push	r29
    4e84:	cf 93       	push	r28
    4e86:	00 d0       	rcall	.+0      	; 0x4e88 <Lcd_VoidSendString+0x6>
    4e88:	cd b7       	in	r28, 0x3d	; 61
    4e8a:	de b7       	in	r29, 0x3e	; 62
    4e8c:	9a 83       	std	Y+2, r25	; 0x02
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	0a c0       	rjmp	.+20     	; 0x4ea6 <Lcd_VoidSendString+0x24>
	while ((*Copy_U8Data) != '\0') {
		Lcd_VoidSendData(*Copy_U8Data);
    4e92:	e9 81       	ldd	r30, Y+1	; 0x01
    4e94:	fa 81       	ldd	r31, Y+2	; 0x02
    4e96:	80 81       	ld	r24, Z
    4e98:	0e 94 f5 12 	call	0x25ea	; 0x25ea <Lcd_VoidSendData>
		Copy_U8Data++;
    4e9c:	89 81       	ldd	r24, Y+1	; 0x01
    4e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	9a 83       	std	Y+2, r25	; 0x02
    4ea4:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(PortControl, E, LOW);
	_delay_us(30);
}

void Lcd_VoidSendString(u8 *Copy_U8Data) {
	while ((*Copy_U8Data) != '\0') {
    4ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eaa:	80 81       	ld	r24, Z
    4eac:	88 23       	and	r24, r24
    4eae:	89 f7       	brne	.-30     	; 0x4e92 <Lcd_VoidSendString+0x10>
		Lcd_VoidSendData(*Copy_U8Data);
		Copy_U8Data++;
	}
}
    4eb0:	0f 90       	pop	r0
    4eb2:	0f 90       	pop	r0
    4eb4:	cf 91       	pop	r28
    4eb6:	df 91       	pop	r29
    4eb8:	08 95       	ret

00004eba <Lcd_VoidSendString4Bit>:

void Lcd_VoidSendString4Bit(u8 *Copy_U8Data) {
    4eba:	df 93       	push	r29
    4ebc:	cf 93       	push	r28
    4ebe:	00 d0       	rcall	.+0      	; 0x4ec0 <Lcd_VoidSendString4Bit+0x6>
    4ec0:	cd b7       	in	r28, 0x3d	; 61
    4ec2:	de b7       	in	r29, 0x3e	; 62
    4ec4:	9a 83       	std	Y+2, r25	; 0x02
    4ec6:	89 83       	std	Y+1, r24	; 0x01
    4ec8:	0a c0       	rjmp	.+20     	; 0x4ede <Lcd_VoidSendString4Bit+0x24>
	while ((*Copy_U8Data) != '\0') {
		Lcd_VoidSendData4Bit(*Copy_U8Data);
    4eca:	e9 81       	ldd	r30, Y+1	; 0x01
    4ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    4ece:	80 81       	ld	r24, Z
    4ed0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <Lcd_VoidSendData4Bit>
		Copy_U8Data++;
    4ed4:	89 81       	ldd	r24, Y+1	; 0x01
    4ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed8:	01 96       	adiw	r24, 0x01	; 1
    4eda:	9a 83       	std	Y+2, r25	; 0x02
    4edc:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8Data++;
	}
}

void Lcd_VoidSendString4Bit(u8 *Copy_U8Data) {
	while ((*Copy_U8Data) != '\0') {
    4ede:	e9 81       	ldd	r30, Y+1	; 0x01
    4ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ee2:	80 81       	ld	r24, Z
    4ee4:	88 23       	and	r24, r24
    4ee6:	89 f7       	brne	.-30     	; 0x4eca <Lcd_VoidSendString4Bit+0x10>
		Lcd_VoidSendData4Bit(*Copy_U8Data);
		Copy_U8Data++;
	}
}
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	cf 91       	pop	r28
    4eee:	df 91       	pop	r29
    4ef0:	08 95       	ret

00004ef2 <Lcd_VoidSendNumber>:
void Lcd_VoidSendNumber(u32 Copy_U8Data) {
    4ef2:	df 93       	push	r29
    4ef4:	cf 93       	push	r28
    4ef6:	cd b7       	in	r28, 0x3d	; 61
    4ef8:	de b7       	in	r29, 0x3e	; 62
    4efa:	66 97       	sbiw	r28, 0x16	; 22
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	f8 94       	cli
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	6b 8b       	std	Y+19, r22	; 0x13
    4f08:	7c 8b       	std	Y+20, r23	; 0x14
    4f0a:	8d 8b       	std	Y+21, r24	; 0x15
    4f0c:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Buffer[16];
	u8 i = 0, LastNum;
    4f0e:	1a 82       	std	Y+2, r1	; 0x02
    4f10:	30 c0       	rjmp	.+96     	; 0x4f72 <Lcd_VoidSendNumber+0x80>
	while (Copy_U8Data) {
		LastNum = (Copy_U8Data % 10);
    4f12:	8b 89       	ldd	r24, Y+19	; 0x13
    4f14:	9c 89       	ldd	r25, Y+20	; 0x14
    4f16:	ad 89       	ldd	r26, Y+21	; 0x15
    4f18:	be 89       	ldd	r27, Y+22	; 0x16
    4f1a:	2a e0       	ldi	r18, 0x0A	; 10
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e0       	ldi	r20, 0x00	; 0
    4f20:	50 e0       	ldi	r21, 0x00	; 0
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	cb 01       	movw	r24, r22
    4f2e:	89 83       	std	Y+1, r24	; 0x01
		Buffer[i] = LastNum + 48;
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
    4f32:	28 2f       	mov	r18, r24
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	48 2f       	mov	r20, r24
    4f3a:	40 5d       	subi	r20, 0xD0	; 208
    4f3c:	ce 01       	movw	r24, r28
    4f3e:	03 96       	adiw	r24, 0x03	; 3
    4f40:	fc 01       	movw	r30, r24
    4f42:	e2 0f       	add	r30, r18
    4f44:	f3 1f       	adc	r31, r19
    4f46:	40 83       	st	Z, r20
		Copy_U8Data /= 10;
    4f48:	8b 89       	ldd	r24, Y+19	; 0x13
    4f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4f4c:	ad 89       	ldd	r26, Y+21	; 0x15
    4f4e:	be 89       	ldd	r27, Y+22	; 0x16
    4f50:	2a e0       	ldi	r18, 0x0A	; 10
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	40 e0       	ldi	r20, 0x00	; 0
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	bc 01       	movw	r22, r24
    4f5a:	cd 01       	movw	r24, r26
    4f5c:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    4f60:	da 01       	movw	r26, r20
    4f62:	c9 01       	movw	r24, r18
    4f64:	8b 8b       	std	Y+19, r24	; 0x13
    4f66:	9c 8b       	std	Y+20, r25	; 0x14
    4f68:	ad 8b       	std	Y+21, r26	; 0x15
    4f6a:	be 8b       	std	Y+22, r27	; 0x16
		i++;
    4f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6e:	8f 5f       	subi	r24, 0xFF	; 255
    4f70:	8a 83       	std	Y+2, r24	; 0x02
	}
}
void Lcd_VoidSendNumber(u32 Copy_U8Data) {
	u8 Buffer[16];
	u8 i = 0, LastNum;
	while (Copy_U8Data) {
    4f72:	8b 89       	ldd	r24, Y+19	; 0x13
    4f74:	9c 89       	ldd	r25, Y+20	; 0x14
    4f76:	ad 89       	ldd	r26, Y+21	; 0x15
    4f78:	be 89       	ldd	r27, Y+22	; 0x16
    4f7a:	00 97       	sbiw	r24, 0x00	; 0
    4f7c:	a1 05       	cpc	r26, r1
    4f7e:	b1 05       	cpc	r27, r1
    4f80:	41 f6       	brne	.-112    	; 0x4f12 <Lcd_VoidSendNumber+0x20>
		LastNum = (Copy_U8Data % 10);
		Buffer[i] = LastNum + 48;
		Copy_U8Data /= 10;
		i++;
	}
	Buffer[i] = '\0';
    4f82:	8a 81       	ldd	r24, Y+2	; 0x02
    4f84:	28 2f       	mov	r18, r24
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	ce 01       	movw	r24, r28
    4f8a:	03 96       	adiw	r24, 0x03	; 3
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	e2 0f       	add	r30, r18
    4f90:	f3 1f       	adc	r31, r19
    4f92:	10 82       	st	Z, r1
	Swap(Buffer, 0, (i - 1));
    4f94:	8a 81       	ldd	r24, Y+2	; 0x02
    4f96:	28 2f       	mov	r18, r24
    4f98:	21 50       	subi	r18, 0x01	; 1
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	03 96       	adiw	r24, 0x03	; 3
    4f9e:	60 e0       	ldi	r22, 0x00	; 0
    4fa0:	42 2f       	mov	r20, r18
    4fa2:	0e 94 47 28 	call	0x508e	; 0x508e <Swap>
	Lcd_VoidSendString(Buffer);
    4fa6:	ce 01       	movw	r24, r28
    4fa8:	03 96       	adiw	r24, 0x03	; 3
    4faa:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
}
    4fae:	66 96       	adiw	r28, 0x16	; 22
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	cd bf       	out	0x3d, r28	; 61
    4fba:	cf 91       	pop	r28
    4fbc:	df 91       	pop	r29
    4fbe:	08 95       	ret

00004fc0 <Lcd_VoidSendNumber4Bit>:

void Lcd_VoidSendNumber4Bit(u32 Copy_U8Data) {
    4fc0:	df 93       	push	r29
    4fc2:	cf 93       	push	r28
    4fc4:	cd b7       	in	r28, 0x3d	; 61
    4fc6:	de b7       	in	r29, 0x3e	; 62
    4fc8:	66 97       	sbiw	r28, 0x16	; 22
    4fca:	0f b6       	in	r0, 0x3f	; 63
    4fcc:	f8 94       	cli
    4fce:	de bf       	out	0x3e, r29	; 62
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	cd bf       	out	0x3d, r28	; 61
    4fd4:	6b 8b       	std	Y+19, r22	; 0x13
    4fd6:	7c 8b       	std	Y+20, r23	; 0x14
    4fd8:	8d 8b       	std	Y+21, r24	; 0x15
    4fda:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Buffer[16];
	u8 i = 0, LastNum;
    4fdc:	1a 82       	std	Y+2, r1	; 0x02
    4fde:	30 c0       	rjmp	.+96     	; 0x5040 <Lcd_VoidSendNumber4Bit+0x80>
	while (Copy_U8Data) {
		LastNum = (Copy_U8Data % 10);
    4fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe4:	ad 89       	ldd	r26, Y+21	; 0x15
    4fe6:	be 89       	ldd	r27, Y+22	; 0x16
    4fe8:	2a e0       	ldi	r18, 0x0A	; 10
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e0       	ldi	r20, 0x00	; 0
    4fee:	50 e0       	ldi	r21, 0x00	; 0
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	cd 01       	movw	r24, r26
    4ff4:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	89 83       	std	Y+1, r24	; 0x01
		Buffer[i] = LastNum + 48;
    4ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    5000:	28 2f       	mov	r18, r24
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	48 2f       	mov	r20, r24
    5008:	40 5d       	subi	r20, 0xD0	; 208
    500a:	ce 01       	movw	r24, r28
    500c:	03 96       	adiw	r24, 0x03	; 3
    500e:	fc 01       	movw	r30, r24
    5010:	e2 0f       	add	r30, r18
    5012:	f3 1f       	adc	r31, r19
    5014:	40 83       	st	Z, r20
		Copy_U8Data /= 10;
    5016:	8b 89       	ldd	r24, Y+19	; 0x13
    5018:	9c 89       	ldd	r25, Y+20	; 0x14
    501a:	ad 89       	ldd	r26, Y+21	; 0x15
    501c:	be 89       	ldd	r27, Y+22	; 0x16
    501e:	2a e0       	ldi	r18, 0x0A	; 10
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e0       	ldi	r20, 0x00	; 0
    5024:	50 e0       	ldi	r21, 0x00	; 0
    5026:	bc 01       	movw	r22, r24
    5028:	cd 01       	movw	r24, r26
    502a:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    502e:	da 01       	movw	r26, r20
    5030:	c9 01       	movw	r24, r18
    5032:	8b 8b       	std	Y+19, r24	; 0x13
    5034:	9c 8b       	std	Y+20, r25	; 0x14
    5036:	ad 8b       	std	Y+21, r26	; 0x15
    5038:	be 8b       	std	Y+22, r27	; 0x16
		i++;
    503a:	8a 81       	ldd	r24, Y+2	; 0x02
    503c:	8f 5f       	subi	r24, 0xFF	; 255
    503e:	8a 83       	std	Y+2, r24	; 0x02
}

void Lcd_VoidSendNumber4Bit(u32 Copy_U8Data) {
	u8 Buffer[16];
	u8 i = 0, LastNum;
	while (Copy_U8Data) {
    5040:	8b 89       	ldd	r24, Y+19	; 0x13
    5042:	9c 89       	ldd	r25, Y+20	; 0x14
    5044:	ad 89       	ldd	r26, Y+21	; 0x15
    5046:	be 89       	ldd	r27, Y+22	; 0x16
    5048:	00 97       	sbiw	r24, 0x00	; 0
    504a:	a1 05       	cpc	r26, r1
    504c:	b1 05       	cpc	r27, r1
    504e:	41 f6       	brne	.-112    	; 0x4fe0 <Lcd_VoidSendNumber4Bit+0x20>
		LastNum = (Copy_U8Data % 10);
		Buffer[i] = LastNum + 48;
		Copy_U8Data /= 10;
		i++;
	}
	Buffer[i] = '\0';
    5050:	8a 81       	ldd	r24, Y+2	; 0x02
    5052:	28 2f       	mov	r18, r24
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	ce 01       	movw	r24, r28
    5058:	03 96       	adiw	r24, 0x03	; 3
    505a:	fc 01       	movw	r30, r24
    505c:	e2 0f       	add	r30, r18
    505e:	f3 1f       	adc	r31, r19
    5060:	10 82       	st	Z, r1
	Swap(Buffer, 0, (i - 1));
    5062:	8a 81       	ldd	r24, Y+2	; 0x02
    5064:	28 2f       	mov	r18, r24
    5066:	21 50       	subi	r18, 0x01	; 1
    5068:	ce 01       	movw	r24, r28
    506a:	03 96       	adiw	r24, 0x03	; 3
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	42 2f       	mov	r20, r18
    5070:	0e 94 47 28 	call	0x508e	; 0x508e <Swap>
	Lcd_VoidSendString4Bit(Buffer);
    5074:	ce 01       	movw	r24, r28
    5076:	03 96       	adiw	r24, 0x03	; 3
    5078:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Lcd_VoidSendString4Bit>
}
    507c:	66 96       	adiw	r28, 0x16	; 22
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <Swap>:

static u8 Swap(u8 *Buffer, u8 start, u8 end) {
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	00 d0       	rcall	.+0      	; 0x5094 <Swap+0x6>
    5094:	00 d0       	rcall	.+0      	; 0x5096 <Swap+0x8>
    5096:	0f 92       	push	r0
    5098:	cd b7       	in	r28, 0x3d	; 61
    509a:	de b7       	in	r29, 0x3e	; 62
    509c:	9b 83       	std	Y+3, r25	; 0x03
    509e:	8a 83       	std	Y+2, r24	; 0x02
    50a0:	6c 83       	std	Y+4, r22	; 0x04
    50a2:	4d 83       	std	Y+5, r20	; 0x05
    50a4:	2c c0       	rjmp	.+88     	; 0x50fe <Swap+0x70>
	u8 temp;
	while (start < end) {
		temp = Buffer[start];
    50a6:	8c 81       	ldd	r24, Y+4	; 0x04
    50a8:	28 2f       	mov	r18, r24
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	8a 81       	ldd	r24, Y+2	; 0x02
    50ae:	9b 81       	ldd	r25, Y+3	; 0x03
    50b0:	fc 01       	movw	r30, r24
    50b2:	e2 0f       	add	r30, r18
    50b4:	f3 1f       	adc	r31, r19
    50b6:	80 81       	ld	r24, Z
    50b8:	89 83       	std	Y+1, r24	; 0x01
		Buffer[start] = Buffer[end];
    50ba:	8c 81       	ldd	r24, Y+4	; 0x04
    50bc:	28 2f       	mov	r18, r24
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	8a 81       	ldd	r24, Y+2	; 0x02
    50c2:	9b 81       	ldd	r25, Y+3	; 0x03
    50c4:	dc 01       	movw	r26, r24
    50c6:	a2 0f       	add	r26, r18
    50c8:	b3 1f       	adc	r27, r19
    50ca:	8d 81       	ldd	r24, Y+5	; 0x05
    50cc:	28 2f       	mov	r18, r24
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	8a 81       	ldd	r24, Y+2	; 0x02
    50d2:	9b 81       	ldd	r25, Y+3	; 0x03
    50d4:	fc 01       	movw	r30, r24
    50d6:	e2 0f       	add	r30, r18
    50d8:	f3 1f       	adc	r31, r19
    50da:	80 81       	ld	r24, Z
    50dc:	8c 93       	st	X, r24
		Buffer[end] = temp;
    50de:	8d 81       	ldd	r24, Y+5	; 0x05
    50e0:	28 2f       	mov	r18, r24
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	8a 81       	ldd	r24, Y+2	; 0x02
    50e6:	9b 81       	ldd	r25, Y+3	; 0x03
    50e8:	fc 01       	movw	r30, r24
    50ea:	e2 0f       	add	r30, r18
    50ec:	f3 1f       	adc	r31, r19
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	80 83       	st	Z, r24
		start++;
    50f2:	8c 81       	ldd	r24, Y+4	; 0x04
    50f4:	8f 5f       	subi	r24, 0xFF	; 255
    50f6:	8c 83       	std	Y+4, r24	; 0x04
		end--;
    50f8:	8d 81       	ldd	r24, Y+5	; 0x05
    50fa:	81 50       	subi	r24, 0x01	; 1
    50fc:	8d 83       	std	Y+5, r24	; 0x05
	Lcd_VoidSendString4Bit(Buffer);
}

static u8 Swap(u8 *Buffer, u8 start, u8 end) {
	u8 temp;
	while (start < end) {
    50fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5100:	8d 81       	ldd	r24, Y+5	; 0x05
    5102:	98 17       	cp	r25, r24
    5104:	80 f2       	brcs	.-96     	; 0x50a6 <Swap+0x18>
		Buffer[start] = Buffer[end];
		Buffer[end] = temp;
		start++;
		end--;
	}
	return 0;
    5106:	80 e0       	ldi	r24, 0x00	; 0
}
    5108:	0f 90       	pop	r0
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	cf 91       	pop	r28
    5114:	df 91       	pop	r29
    5116:	08 95       	ret

00005118 <LCD_SetPosition>:

void LCD_SetPosition(u8 row, u8 col) {
    5118:	df 93       	push	r29
    511a:	cf 93       	push	r28
    511c:	00 d0       	rcall	.+0      	; 0x511e <LCD_SetPosition+0x6>
    511e:	00 d0       	rcall	.+0      	; 0x5120 <LCD_SetPosition+0x8>
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	89 83       	std	Y+1, r24	; 0x01
    5126:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	28 2f       	mov	r18, r24
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	3c 83       	std	Y+4, r19	; 0x04
    5130:	2b 83       	std	Y+3, r18	; 0x03
    5132:	8b 81       	ldd	r24, Y+3	; 0x03
    5134:	9c 81       	ldd	r25, Y+4	; 0x04
    5136:	81 30       	cpi	r24, 0x01	; 1
    5138:	91 05       	cpc	r25, r1
    513a:	d1 f0       	breq	.+52     	; 0x5170 <LCD_SetPosition+0x58>
    513c:	2b 81       	ldd	r18, Y+3	; 0x03
    513e:	3c 81       	ldd	r19, Y+4	; 0x04
    5140:	22 30       	cpi	r18, 0x02	; 2
    5142:	31 05       	cpc	r19, r1
    5144:	2c f4       	brge	.+10     	; 0x5150 <LCD_SetPosition+0x38>
    5146:	8b 81       	ldd	r24, Y+3	; 0x03
    5148:	9c 81       	ldd	r25, Y+4	; 0x04
    514a:	00 97       	sbiw	r24, 0x00	; 0
    514c:	61 f0       	breq	.+24     	; 0x5166 <LCD_SetPosition+0x4e>
    514e:	1d c0       	rjmp	.+58     	; 0x518a <LCD_SetPosition+0x72>
    5150:	2b 81       	ldd	r18, Y+3	; 0x03
    5152:	3c 81       	ldd	r19, Y+4	; 0x04
    5154:	22 30       	cpi	r18, 0x02	; 2
    5156:	31 05       	cpc	r19, r1
    5158:	81 f0       	breq	.+32     	; 0x517a <LCD_SetPosition+0x62>
    515a:	8b 81       	ldd	r24, Y+3	; 0x03
    515c:	9c 81       	ldd	r25, Y+4	; 0x04
    515e:	83 30       	cpi	r24, 0x03	; 3
    5160:	91 05       	cpc	r25, r1
    5162:	79 f0       	breq	.+30     	; 0x5182 <LCD_SetPosition+0x6a>
    5164:	12 c0       	rjmp	.+36     	; 0x518a <LCD_SetPosition+0x72>
	case 0:
		Lcd_VoidSendCommand(128 + col);
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	80 58       	subi	r24, 0x80	; 128
    516a:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    516e:	0d c0       	rjmp	.+26     	; 0x518a <LCD_SetPosition+0x72>
		break;
	case 1:
		Lcd_VoidSendCommand(192 + col);
    5170:	8a 81       	ldd	r24, Y+2	; 0x02
    5172:	80 54       	subi	r24, 0x40	; 64
    5174:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    5178:	08 c0       	rjmp	.+16     	; 0x518a <LCD_SetPosition+0x72>
		break;
	case 2:
		Lcd_VoidSendCommand(256 + col);
    517a:	8a 81       	ldd	r24, Y+2	; 0x02
    517c:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    5180:	04 c0       	rjmp	.+8      	; 0x518a <LCD_SetPosition+0x72>
		break;
	case 3:
		Lcd_VoidSendCommand(320 + col);
    5182:	8a 81       	ldd	r24, Y+2	; 0x02
    5184:	80 5c       	subi	r24, 0xC0	; 192
    5186:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
	default:
		//
		break;

	}
}
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	cf 91       	pop	r28
    5194:	df 91       	pop	r29
    5196:	08 95       	ret

00005198 <LCD_VoidCreateUserCharacter>:
void LCD_VoidCreateUserCharacter(u8 *Pattern, u8 Location){
    5198:	df 93       	push	r29
    519a:	cf 93       	push	r28
    519c:	00 d0       	rcall	.+0      	; 0x519e <LCD_VoidCreateUserCharacter+0x6>
    519e:	00 d0       	rcall	.+0      	; 0x51a0 <LCD_VoidCreateUserCharacter+0x8>
    51a0:	cd b7       	in	r28, 0x3d	; 61
    51a2:	de b7       	in	r29, 0x3e	; 62
    51a4:	9b 83       	std	Y+3, r25	; 0x03
    51a6:	8a 83       	std	Y+2, r24	; 0x02
    51a8:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	Lcd_VoidSendCommand(0x40 + (Location *8));
    51aa:	8c 81       	ldd	r24, Y+4	; 0x04
    51ac:	88 2f       	mov	r24, r24
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	08 96       	adiw	r24, 0x08	; 8
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	88 0f       	add	r24, r24
    51b8:	99 1f       	adc	r25, r25
    51ba:	88 0f       	add	r24, r24
    51bc:	99 1f       	adc	r25, r25
    51be:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
	for(i=0;i<8;i++){
    51c2:	19 82       	std	Y+1, r1	; 0x01
    51c4:	0e c0       	rjmp	.+28     	; 0x51e2 <LCD_VoidCreateUserCharacter+0x4a>
		Lcd_VoidSendData(Pattern[i]);
    51c6:	89 81       	ldd	r24, Y+1	; 0x01
    51c8:	28 2f       	mov	r18, r24
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	8a 81       	ldd	r24, Y+2	; 0x02
    51ce:	9b 81       	ldd	r25, Y+3	; 0x03
    51d0:	fc 01       	movw	r30, r24
    51d2:	e2 0f       	add	r30, r18
    51d4:	f3 1f       	adc	r31, r19
    51d6:	80 81       	ld	r24, Z
    51d8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <Lcd_VoidSendData>
	}
}
void LCD_VoidCreateUserCharacter(u8 *Pattern, u8 Location){
	u8 i;
	Lcd_VoidSendCommand(0x40 + (Location *8));
	for(i=0;i<8;i++){
    51dc:	89 81       	ldd	r24, Y+1	; 0x01
    51de:	8f 5f       	subi	r24, 0xFF	; 255
    51e0:	89 83       	std	Y+1, r24	; 0x01
    51e2:	89 81       	ldd	r24, Y+1	; 0x01
    51e4:	88 30       	cpi	r24, 0x08	; 8
    51e6:	78 f3       	brcs	.-34     	; 0x51c6 <LCD_VoidCreateUserCharacter+0x2e>
		Lcd_VoidSendData(Pattern[i]);
	}
}
    51e8:	0f 90       	pop	r0
    51ea:	0f 90       	pop	r0
    51ec:	0f 90       	pop	r0
    51ee:	0f 90       	pop	r0
    51f0:	cf 91       	pop	r28
    51f2:	df 91       	pop	r29
    51f4:	08 95       	ret

000051f6 <LCD_VoidDisplayShift>:


void LCD_VoidDisplayShift(u8 Copy_u8Direction)
{
    51f6:	df 93       	push	r29
    51f8:	cf 93       	push	r28
    51fa:	0f 92       	push	r0
    51fc:	cd b7       	in	r28, 0x3d	; 61
    51fe:	de b7       	in	r29, 0x3e	; 62
    5200:	89 83       	std	Y+1, r24	; 0x01
	if ( Copy_u8Direction == 'R' )
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	82 35       	cpi	r24, 0x52	; 82
    5206:	21 f4       	brne	.+8      	; 0x5210 <LCD_VoidDisplayShift+0x1a>
	{
		Lcd_VoidSendCommand(SHIFT_RIGHT_COMMAND);
    5208:	88 e1       	ldi	r24, 0x18	; 24
    520a:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
    520e:	06 c0       	rjmp	.+12     	; 0x521c <LCD_VoidDisplayShift+0x26>
	}
	else if ( Copy_u8Direction == 'L' )
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	8c 34       	cpi	r24, 0x4C	; 76
    5214:	19 f4       	brne	.+6      	; 0x521c <LCD_VoidDisplayShift+0x26>
	{
		Lcd_VoidSendCommand(SHIFT_LEFT_COMMAND);
    5216:	8c e1       	ldi	r24, 0x1C	; 28
    5218:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
	}
}
    521c:	0f 90       	pop	r0
    521e:	cf 91       	pop	r28
    5220:	df 91       	pop	r29
    5222:	08 95       	ret

00005224 <LCD_VoidSendStringToRowColumn>:

void LCD_VoidSendStringToRowColumn(u8 Copy_u8Row , u8 Copy_u8Column ,  u8 *Copy_u8String){
    5224:	df 93       	push	r29
    5226:	cf 93       	push	r28
    5228:	00 d0       	rcall	.+0      	; 0x522a <LCD_VoidSendStringToRowColumn+0x6>
    522a:	00 d0       	rcall	.+0      	; 0x522c <LCD_VoidSendStringToRowColumn+0x8>
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
    5230:	89 83       	std	Y+1, r24	; 0x01
    5232:	6a 83       	std	Y+2, r22	; 0x02
    5234:	5c 83       	std	Y+4, r21	; 0x04
    5236:	4b 83       	std	Y+3, r20	; 0x03
	LCD_SetPosition(Copy_u8Row , Copy_u8Column);
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	6a 81       	ldd	r22, Y+2	; 0x02
    523c:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
	Lcd_VoidSendString(Copy_u8String);
    5240:	8b 81       	ldd	r24, Y+3	; 0x03
    5242:	9c 81       	ldd	r25, Y+4	; 0x04
    5244:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
}
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	0f 90       	pop	r0
    524e:	0f 90       	pop	r0
    5250:	cf 91       	pop	r28
    5252:	df 91       	pop	r29
    5254:	08 95       	ret

00005256 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
    5256:	df 93       	push	r29
    5258:	cf 93       	push	r28
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
	Lcd_VoidSendCommand(DISPLAY_CLEAR);
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <Lcd_VoidSendCommand>
}
    5264:	cf 91       	pop	r28
    5266:	df 91       	pop	r29
    5268:	08 95       	ret

0000526a <USART_VoidInt>:
 */
#include"STD_TYPE.h"
#include"BIT_MATH.h"
#include"UART_Private.h"
#include"UART_Interface.h"
void USART_VoidInt(void) {
    526a:	df 93       	push	r29
    526c:	cf 93       	push	r28
    526e:	0f 92       	push	r0
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_HELP = 0;
    5274:	19 82       	std	Y+1, r1	; 0x01
	//u8 VALUE_BAUD_RATE = (((F_CPU / (9600 * 8UL))) - 1);

	SET_BIT(UCSRB, RXEN); //ENABLE Receiver
    5276:	aa e2       	ldi	r26, 0x2A	; 42
    5278:	b0 e0       	ldi	r27, 0x00	; 0
    527a:	ea e2       	ldi	r30, 0x2A	; 42
    527c:	f0 e0       	ldi	r31, 0x00	; 0
    527e:	80 81       	ld	r24, Z
    5280:	80 61       	ori	r24, 0x10	; 16
    5282:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN); //ENABLE Transmitter
    5284:	aa e2       	ldi	r26, 0x2A	; 42
    5286:	b0 e0       	ldi	r27, 0x00	; 0
    5288:	ea e2       	ldi	r30, 0x2A	; 42
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	80 81       	ld	r24, Z
    528e:	88 60       	ori	r24, 0x08	; 8
    5290:	8c 93       	st	X, r24

	/* UCSRC UCSZ0 UCSZ1 */

	/* USE HELP REGISTER THEN ASSIGN IT AS ONE TIME*/

	SET_BIT(UCSRC_HELP, URSEL); //must be one when writing in this reg
    5292:	89 81       	ldd	r24, Y+1	; 0x01
    5294:	80 68       	ori	r24, 0x80	; 128
    5296:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_HELP, UMSEL); // asynchronous
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	8f 7b       	andi	r24, 0xBF	; 191
    529c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_HELP, UPM0); //parity disable
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	8f 7e       	andi	r24, 0xEF	; 239
    52a2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_HELP, UPM1); //parity disable
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	8f 7d       	andi	r24, 0xDF	; 223
    52a8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_HELP, USBS); //1 stop bit*/
    52aa:	89 81       	ldd	r24, Y+1	; 0x01
    52ac:	87 7f       	andi	r24, 0xF7	; 247
    52ae:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(UCSRC_HELP, UCSZ0); //8 bit
    52b0:	89 81       	ldd	r24, Y+1	; 0x01
    52b2:	82 60       	ori	r24, 0x02	; 2
    52b4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_HELP, UCSZ1); //8bit
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	84 60       	ori	r24, 0x04	; 4
    52ba:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_HELP, UCPOL); //
    52bc:	89 81       	ldd	r24, Y+1	; 0x01
    52be:	8e 7f       	andi	r24, 0xFE	; 254
    52c0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB, UCSZ2); //8 bit
    52c2:	aa e2       	ldi	r26, 0x2A	; 42
    52c4:	b0 e0       	ldi	r27, 0x00	; 0
    52c6:	ea e2       	ldi	r30, 0x2A	; 42
    52c8:	f0 e0       	ldi	r31, 0x00	; 0
    52ca:	80 81       	ld	r24, Z
    52cc:	8b 7f       	andi	r24, 0xFB	; 251
    52ce:	8c 93       	st	X, r24
	ASSIGN_REG(UCSRC, UCSRC_HELP);
    52d0:	e0 e4       	ldi	r30, 0x40	; 64
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	80 83       	st	Z, r24

	/* baud rate*/
	UBRRL = 51;
    52d8:	e9 e2       	ldi	r30, 0x29	; 41
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	83 e3       	ldi	r24, 0x33	; 51
    52de:	80 83       	st	Z, r24

}
    52e0:	0f 90       	pop	r0
    52e2:	cf 91       	pop	r28
    52e4:	df 91       	pop	r29
    52e6:	08 95       	ret

000052e8 <USART_VoidSendData>:

void USART_VoidSendData(u8 DATA) {
    52e8:	df 93       	push	r29
    52ea:	cf 93       	push	r28
    52ec:	0f 92       	push	r0
    52ee:	cd b7       	in	r28, 0x3d	; 61
    52f0:	de b7       	in	r29, 0x3e	; 62
    52f2:	89 83       	std	Y+1, r24	; 0x01
//	while(GET_BIT(UCSRA,TXC));
	while (!GET_BIT(UCSRA, UDRE))
    52f4:	eb e2       	ldi	r30, 0x2B	; 43
    52f6:	f0 e0       	ldi	r31, 0x00	; 0
    52f8:	80 81       	ld	r24, Z
    52fa:	82 95       	swap	r24
    52fc:	86 95       	lsr	r24
    52fe:	87 70       	andi	r24, 0x07	; 7
    5300:	88 2f       	mov	r24, r24
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	81 70       	andi	r24, 0x01	; 1
    5306:	90 70       	andi	r25, 0x00	; 0
    5308:	00 97       	sbiw	r24, 0x00	; 0
    530a:	a1 f3       	breq	.-24     	; 0x52f4 <USART_VoidSendData+0xc>
		;
	UDR = DATA;
    530c:	ec e2       	ldi	r30, 0x2C	; 44
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	80 83       	st	Z, r24
}
    5314:	0f 90       	pop	r0
    5316:	cf 91       	pop	r28
    5318:	df 91       	pop	r29
    531a:	08 95       	ret

0000531c <USART_VoidReseiveData>:
u8 USART_VoidReseiveData(void) {
    531c:	df 93       	push	r29
    531e:	cf 93       	push	r28
    5320:	cd b7       	in	r28, 0x3d	; 61
    5322:	de b7       	in	r29, 0x3e	; 62
	while (!GET_BIT(UCSRA, RXC))
    5324:	eb e2       	ldi	r30, 0x2B	; 43
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	88 23       	and	r24, r24
    532c:	dc f7       	brge	.-10     	; 0x5324 <USART_VoidReseiveData+0x8>
		;
	return UDR;
    532e:	ec e2       	ldi	r30, 0x2C	; 44
    5330:	f0 e0       	ldi	r31, 0x00	; 0
    5332:	80 81       	ld	r24, Z
}
    5334:	cf 91       	pop	r28
    5336:	df 91       	pop	r29
    5338:	08 95       	ret

0000533a <USART_sendString>:

void USART_sendString(const u8 *Str) {
    533a:	df 93       	push	r29
    533c:	cf 93       	push	r28
    533e:	00 d0       	rcall	.+0      	; 0x5340 <USART_sendString+0x6>
    5340:	cd b7       	in	r28, 0x3d	; 61
    5342:	de b7       	in	r29, 0x3e	; 62
    5344:	9a 83       	std	Y+2, r25	; 0x02
    5346:	89 83       	std	Y+1, r24	; 0x01
    5348:	0a c0       	rjmp	.+20     	; 0x535e <USART_sendString+0x24>

	while (*Str != '\0') {
		USART_VoidSendData(*Str);
    534a:	e9 81       	ldd	r30, Y+1	; 0x01
    534c:	fa 81       	ldd	r31, Y+2	; 0x02
    534e:	80 81       	ld	r24, Z
    5350:	0e 94 74 29 	call	0x52e8	; 0x52e8 <USART_VoidSendData>
		Str++;
    5354:	89 81       	ldd	r24, Y+1	; 0x01
    5356:	9a 81       	ldd	r25, Y+2	; 0x02
    5358:	01 96       	adiw	r24, 0x01	; 1
    535a:	9a 83       	std	Y+2, r25	; 0x02
    535c:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_sendString(const u8 *Str) {

	while (*Str != '\0') {
    535e:	e9 81       	ldd	r30, Y+1	; 0x01
    5360:	fa 81       	ldd	r31, Y+2	; 0x02
    5362:	80 81       	ld	r24, Z
    5364:	88 23       	and	r24, r24
    5366:	89 f7       	brne	.-30     	; 0x534a <USART_sendString+0x10>
		USART_VoidSendData(*Str);
		Str++;
	}
}
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	cf 91       	pop	r28
    536e:	df 91       	pop	r29
    5370:	08 95       	ret

00005372 <USART_ReseiveString>:

void USART_ReseiveString(u8 *Str) {
    5372:	0f 93       	push	r16
    5374:	1f 93       	push	r17
    5376:	df 93       	push	r29
    5378:	cf 93       	push	r28
    537a:	00 d0       	rcall	.+0      	; 0x537c <USART_ReseiveString+0xa>
    537c:	0f 92       	push	r0
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	9b 83       	std	Y+3, r25	; 0x03
    5384:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    5386:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = USART_VoidReseiveData();
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	28 2f       	mov	r18, r24
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	8a 81       	ldd	r24, Y+2	; 0x02
    5390:	9b 81       	ldd	r25, Y+3	; 0x03
    5392:	8c 01       	movw	r16, r24
    5394:	02 0f       	add	r16, r18
    5396:	13 1f       	adc	r17, r19
    5398:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    539c:	f8 01       	movw	r30, r16
    539e:	80 83       	st	Z, r24
    53a0:	0f c0       	rjmp	.+30     	; 0x53c0 <USART_ReseiveString+0x4e>
	while (Str[i] != '#') {
		i++;
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	8f 5f       	subi	r24, 0xFF	; 255
    53a6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_VoidReseiveData();
    53a8:	89 81       	ldd	r24, Y+1	; 0x01
    53aa:	28 2f       	mov	r18, r24
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	8a 81       	ldd	r24, Y+2	; 0x02
    53b0:	9b 81       	ldd	r25, Y+3	; 0x03
    53b2:	8c 01       	movw	r16, r24
    53b4:	02 0f       	add	r16, r18
    53b6:	13 1f       	adc	r17, r19
    53b8:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    53bc:	f8 01       	movw	r30, r16
    53be:	80 83       	st	Z, r24
}

void USART_ReseiveString(u8 *Str) {
	u8 i=0;
	Str[i] = USART_VoidReseiveData();
	while (Str[i] != '#') {
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	28 2f       	mov	r18, r24
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	8a 81       	ldd	r24, Y+2	; 0x02
    53c8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ca:	fc 01       	movw	r30, r24
    53cc:	e2 0f       	add	r30, r18
    53ce:	f3 1f       	adc	r31, r19
    53d0:	80 81       	ld	r24, Z
    53d2:	83 32       	cpi	r24, 0x23	; 35
    53d4:	31 f7       	brne	.-52     	; 0x53a2 <USART_ReseiveString+0x30>
		i++;
		Str[i] = USART_VoidReseiveData();
	}
	Str[i] = '\0';
    53d6:	89 81       	ldd	r24, Y+1	; 0x01
    53d8:	28 2f       	mov	r18, r24
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	8a 81       	ldd	r24, Y+2	; 0x02
    53de:	9b 81       	ldd	r25, Y+3	; 0x03
    53e0:	fc 01       	movw	r30, r24
    53e2:	e2 0f       	add	r30, r18
    53e4:	f3 1f       	adc	r31, r19
    53e6:	10 82       	st	Z, r1
}
    53e8:	0f 90       	pop	r0
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	cf 91       	pop	r28
    53f0:	df 91       	pop	r29
    53f2:	1f 91       	pop	r17
    53f4:	0f 91       	pop	r16
    53f6:	08 95       	ret

000053f8 <main>:
void Light_OPeration(void);
void Temp_OPeration(void);
//void Buzzer_led(void);
void BYBY(void);

int main(void) {
    53f8:	0f 93       	push	r16
    53fa:	1f 93       	push	r17
    53fc:	df 93       	push	r29
    53fe:	cf 93       	push	r28
    5400:	cd b7       	in	r28, 0x3d	; 61
    5402:	de b7       	in	r29, 0x3e	; 62
    5404:	cf 54       	subi	r28, 0x4F	; 79
    5406:	d0 40       	sbci	r29, 0x00	; 0
    5408:	0f b6       	in	r0, 0x3f	; 63
    540a:	f8 94       	cli
    540c:	de bf       	out	0x3e, r29	; 62
    540e:	0f be       	out	0x3f, r0	; 63
    5410:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidInti();
    5412:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_VoidInti>
	ADC_VoidInit();
    5416:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_VoidInit>
	USART_VoidInt();
    541a:	0e 94 35 29 	call	0x526a	; 0x526a <USART_VoidInt>
	intAlLOperation();
    541e:	0e 94 b5 2c 	call	0x596a	; 0x596a <intAlLOperation>

	u8 key;
	u32 Operation_number = 0;
    5422:	fe 01       	movw	r30, r28
    5424:	e5 5b       	subi	r30, 0xB5	; 181
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	10 82       	st	Z, r1
    542a:	11 82       	std	Z+1, r1	; 0x01
    542c:	12 82       	std	Z+2, r1	; 0x02
    542e:	13 82       	std	Z+3, r1	; 0x03
	u32 shifting_num = 0;
    5430:	fe 01       	movw	r30, r28
    5432:	e9 5b       	subi	r30, 0xB9	; 185
    5434:	ff 4f       	sbci	r31, 0xFF	; 255
    5436:	10 82       	st	Z, r1
    5438:	11 82       	std	Z+1, r1	; 0x01
    543a:	12 82       	std	Z+2, r1	; 0x02
    543c:	13 82       	std	Z+3, r1	; 0x03

	Lcd_VoidSendString("Welcome Salsabil");
    543e:	80 e6       	ldi	r24, 0x60	; 96
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
    5446:	fe 01       	movw	r30, r28
    5448:	ed 5b       	subi	r30, 0xBD	; 189
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	80 e0       	ldi	r24, 0x00	; 0
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	aa e7       	ldi	r26, 0x7A	; 122
    5452:	b4 e4       	ldi	r27, 0x44	; 68
    5454:	80 83       	st	Z, r24
    5456:	91 83       	std	Z+1, r25	; 0x01
    5458:	a2 83       	std	Z+2, r26	; 0x02
    545a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545c:	8e 01       	movw	r16, r28
    545e:	01 5c       	subi	r16, 0xC1	; 193
    5460:	1f 4f       	sbci	r17, 0xFF	; 255
    5462:	fe 01       	movw	r30, r28
    5464:	ed 5b       	subi	r30, 0xBD	; 189
    5466:	ff 4f       	sbci	r31, 0xFF	; 255
    5468:	60 81       	ld	r22, Z
    546a:	71 81       	ldd	r23, Z+1	; 0x01
    546c:	82 81       	ldd	r24, Z+2	; 0x02
    546e:	93 81       	ldd	r25, Z+3	; 0x03
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	4a ef       	ldi	r20, 0xFA	; 250
    5476:	54 e4       	ldi	r21, 0x44	; 68
    5478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22
    5480:	f8 01       	movw	r30, r16
    5482:	80 83       	st	Z, r24
    5484:	91 83       	std	Z+1, r25	; 0x01
    5486:	a2 83       	std	Z+2, r26	; 0x02
    5488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    548a:	fe 01       	movw	r30, r28
    548c:	ff 96       	adiw	r30, 0x3f	; 63
    548e:	60 81       	ld	r22, Z
    5490:	71 81       	ldd	r23, Z+1	; 0x01
    5492:	82 81       	ldd	r24, Z+2	; 0x02
    5494:	93 81       	ldd	r25, Z+3	; 0x03
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e8       	ldi	r20, 0x80	; 128
    549c:	5f e3       	ldi	r21, 0x3F	; 63
    549e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    54a2:	88 23       	and	r24, r24
    54a4:	2c f4       	brge	.+10     	; 0x54b0 <main+0xb8>
		__ticks = 1;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	9e af       	std	Y+62, r25	; 0x3e
    54ac:	8d af       	std	Y+61, r24	; 0x3d
    54ae:	46 c0       	rjmp	.+140    	; 0x553c <main+0x144>
	else if (__tmp > 65535)
    54b0:	fe 01       	movw	r30, r28
    54b2:	ff 96       	adiw	r30, 0x3f	; 63
    54b4:	60 81       	ld	r22, Z
    54b6:	71 81       	ldd	r23, Z+1	; 0x01
    54b8:	82 81       	ldd	r24, Z+2	; 0x02
    54ba:	93 81       	ldd	r25, Z+3	; 0x03
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	3f ef       	ldi	r19, 0xFF	; 255
    54c0:	4f e7       	ldi	r20, 0x7F	; 127
    54c2:	57 e4       	ldi	r21, 0x47	; 71
    54c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    54c8:	18 16       	cp	r1, r24
    54ca:	64 f5       	brge	.+88     	; 0x5524 <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54cc:	fe 01       	movw	r30, r28
    54ce:	ed 5b       	subi	r30, 0xBD	; 189
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	60 81       	ld	r22, Z
    54d4:	71 81       	ldd	r23, Z+1	; 0x01
    54d6:	82 81       	ldd	r24, Z+2	; 0x02
    54d8:	93 81       	ldd	r25, Z+3	; 0x03
    54da:	20 e0       	ldi	r18, 0x00	; 0
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	40 e2       	ldi	r20, 0x20	; 32
    54e0:	51 e4       	ldi	r21, 0x41	; 65
    54e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	bc 01       	movw	r22, r24
    54ec:	cd 01       	movw	r24, r26
    54ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	9e af       	std	Y+62, r25	; 0x3e
    54f8:	8d af       	std	Y+61, r24	; 0x3d
    54fa:	0f c0       	rjmp	.+30     	; 0x551a <main+0x122>
    54fc:	88 ec       	ldi	r24, 0xC8	; 200
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9c af       	std	Y+60, r25	; 0x3c
    5502:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5504:	8b ad       	ldd	r24, Y+59	; 0x3b
    5506:	9c ad       	ldd	r25, Y+60	; 0x3c
    5508:	01 97       	sbiw	r24, 0x01	; 1
    550a:	f1 f7       	brne	.-4      	; 0x5508 <main+0x110>
    550c:	9c af       	std	Y+60, r25	; 0x3c
    550e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5510:	8d ad       	ldd	r24, Y+61	; 0x3d
    5512:	9e ad       	ldd	r25, Y+62	; 0x3e
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	9e af       	std	Y+62, r25	; 0x3e
    5518:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    551a:	8d ad       	ldd	r24, Y+61	; 0x3d
    551c:	9e ad       	ldd	r25, Y+62	; 0x3e
    551e:	00 97       	sbiw	r24, 0x00	; 0
    5520:	69 f7       	brne	.-38     	; 0x54fc <main+0x104>
    5522:	16 c0       	rjmp	.+44     	; 0x5550 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5524:	fe 01       	movw	r30, r28
    5526:	ff 96       	adiw	r30, 0x3f	; 63
    5528:	60 81       	ld	r22, Z
    552a:	71 81       	ldd	r23, Z+1	; 0x01
    552c:	82 81       	ldd	r24, Z+2	; 0x02
    552e:	93 81       	ldd	r25, Z+3	; 0x03
    5530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
    5538:	9e af       	std	Y+62, r25	; 0x3e
    553a:	8d af       	std	Y+61, r24	; 0x3d
    553c:	8d ad       	ldd	r24, Y+61	; 0x3d
    553e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5540:	9a af       	std	Y+58, r25	; 0x3a
    5542:	89 af       	std	Y+57, r24	; 0x39
    5544:	89 ad       	ldd	r24, Y+57	; 0x39
    5546:	9a ad       	ldd	r25, Y+58	; 0x3a
    5548:	01 97       	sbiw	r24, 0x01	; 1
    554a:	f1 f7       	brne	.-4      	; 0x5548 <main+0x150>
    554c:	9a af       	std	Y+58, r25	; 0x3a
    554e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);

	LCD_ClearScreen();
    5550:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	ID_Screen();
    5554:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <ID_Screen>

	while (1) {

		shifting_num = Get_Password();
    5558:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <Get_Password>
    555c:	dc 01       	movw	r26, r24
    555e:	cb 01       	movw	r24, r22
    5560:	fe 01       	movw	r30, r28
    5562:	e9 5b       	subi	r30, 0xB9	; 185
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	80 83       	st	Z, r24
    5568:	91 83       	std	Z+1, r25	; 0x01
    556a:	a2 83       	std	Z+2, r26	; 0x02
    556c:	b3 83       	std	Z+3, r27	; 0x03
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	aa e7       	ldi	r26, 0x7A	; 122
    5574:	b4 e4       	ldi	r27, 0x44	; 68
    5576:	8d ab       	std	Y+53, r24	; 0x35
    5578:	9e ab       	std	Y+54, r25	; 0x36
    557a:	af ab       	std	Y+55, r26	; 0x37
    557c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    557e:	6d a9       	ldd	r22, Y+53	; 0x35
    5580:	7e a9       	ldd	r23, Y+54	; 0x36
    5582:	8f a9       	ldd	r24, Y+55	; 0x37
    5584:	98 ad       	ldd	r25, Y+56	; 0x38
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	4a ef       	ldi	r20, 0xFA	; 250
    558c:	54 e4       	ldi	r21, 0x44	; 68
    558e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	89 ab       	std	Y+49, r24	; 0x31
    5598:	9a ab       	std	Y+50, r25	; 0x32
    559a:	ab ab       	std	Y+51, r26	; 0x33
    559c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    559e:	69 a9       	ldd	r22, Y+49	; 0x31
    55a0:	7a a9       	ldd	r23, Y+50	; 0x32
    55a2:	8b a9       	ldd	r24, Y+51	; 0x33
    55a4:	9c a9       	ldd	r25, Y+52	; 0x34
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	40 e8       	ldi	r20, 0x80	; 128
    55ac:	5f e3       	ldi	r21, 0x3F	; 63
    55ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    55b2:	88 23       	and	r24, r24
    55b4:	2c f4       	brge	.+10     	; 0x55c0 <main+0x1c8>
		__ticks = 1;
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	98 ab       	std	Y+48, r25	; 0x30
    55bc:	8f a7       	std	Y+47, r24	; 0x2f
    55be:	3f c0       	rjmp	.+126    	; 0x563e <main+0x246>
	else if (__tmp > 65535)
    55c0:	69 a9       	ldd	r22, Y+49	; 0x31
    55c2:	7a a9       	ldd	r23, Y+50	; 0x32
    55c4:	8b a9       	ldd	r24, Y+51	; 0x33
    55c6:	9c a9       	ldd	r25, Y+52	; 0x34
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	3f ef       	ldi	r19, 0xFF	; 255
    55cc:	4f e7       	ldi	r20, 0x7F	; 127
    55ce:	57 e4       	ldi	r21, 0x47	; 71
    55d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    55d4:	18 16       	cp	r1, r24
    55d6:	4c f5       	brge	.+82     	; 0x562a <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55d8:	6d a9       	ldd	r22, Y+53	; 0x35
    55da:	7e a9       	ldd	r23, Y+54	; 0x36
    55dc:	8f a9       	ldd	r24, Y+55	; 0x37
    55de:	98 ad       	ldd	r25, Y+56	; 0x38
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	40 e2       	ldi	r20, 0x20	; 32
    55e6:	51 e4       	ldi	r21, 0x41	; 65
    55e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	bc 01       	movw	r22, r24
    55f2:	cd 01       	movw	r24, r26
    55f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	98 ab       	std	Y+48, r25	; 0x30
    55fe:	8f a7       	std	Y+47, r24	; 0x2f
    5600:	0f c0       	rjmp	.+30     	; 0x5620 <main+0x228>
    5602:	88 ec       	ldi	r24, 0xC8	; 200
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	9e a7       	std	Y+46, r25	; 0x2e
    5608:	8d a7       	std	Y+45, r24	; 0x2d
    560a:	8d a5       	ldd	r24, Y+45	; 0x2d
    560c:	9e a5       	ldd	r25, Y+46	; 0x2e
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	f1 f7       	brne	.-4      	; 0x560e <main+0x216>
    5612:	9e a7       	std	Y+46, r25	; 0x2e
    5614:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5616:	8f a5       	ldd	r24, Y+47	; 0x2f
    5618:	98 a9       	ldd	r25, Y+48	; 0x30
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	98 ab       	std	Y+48, r25	; 0x30
    561e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5620:	8f a5       	ldd	r24, Y+47	; 0x2f
    5622:	98 a9       	ldd	r25, Y+48	; 0x30
    5624:	00 97       	sbiw	r24, 0x00	; 0
    5626:	69 f7       	brne	.-38     	; 0x5602 <main+0x20a>
    5628:	14 c0       	rjmp	.+40     	; 0x5652 <main+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    562a:	69 a9       	ldd	r22, Y+49	; 0x31
    562c:	7a a9       	ldd	r23, Y+50	; 0x32
    562e:	8b a9       	ldd	r24, Y+51	; 0x33
    5630:	9c a9       	ldd	r25, Y+52	; 0x34
    5632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	98 ab       	std	Y+48, r25	; 0x30
    563c:	8f a7       	std	Y+47, r24	; 0x2f
    563e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5640:	98 a9       	ldd	r25, Y+48	; 0x30
    5642:	9c a7       	std	Y+44, r25	; 0x2c
    5644:	8b a7       	std	Y+43, r24	; 0x2b
    5646:	8b a5       	ldd	r24, Y+43	; 0x2b
    5648:	9c a5       	ldd	r25, Y+44	; 0x2c
    564a:	01 97       	sbiw	r24, 0x01	; 1
    564c:	f1 f7       	brne	.-4      	; 0x564a <main+0x252>
    564e:	9c a7       	std	Y+44, r25	; 0x2c
    5650:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		if (shifting_num == 1234) {
    5652:	fe 01       	movw	r30, r28
    5654:	e9 5b       	subi	r30, 0xB9	; 185
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	80 81       	ld	r24, Z
    565a:	91 81       	ldd	r25, Z+1	; 0x01
    565c:	a2 81       	ldd	r26, Z+2	; 0x02
    565e:	b3 81       	ldd	r27, Z+3	; 0x03
    5660:	82 3d       	cpi	r24, 0xD2	; 210
    5662:	f4 e0       	ldi	r31, 0x04	; 4
    5664:	9f 07       	cpc	r25, r31
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	af 07       	cpc	r26, r31
    566a:	f0 e0       	ldi	r31, 0x00	; 0
    566c:	bf 07       	cpc	r27, r31
    566e:	09 f0       	breq	.+2      	; 0x5672 <main+0x27a>
    5670:	8f c0       	rjmp	.+286    	; 0x5790 <main+0x398>
			LCD_ClearScreen();
    5672:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
			Lcd_VoidSendString("Welcome Salsabil");
    5676:	80 e6       	ldi	r24, 0x60	; 96
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	aa e7       	ldi	r26, 0x7A	; 122
    5684:	b4 e4       	ldi	r27, 0x44	; 68
    5686:	8f a3       	std	Y+39, r24	; 0x27
    5688:	98 a7       	std	Y+40, r25	; 0x28
    568a:	a9 a7       	std	Y+41, r26	; 0x29
    568c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    568e:	6f a1       	ldd	r22, Y+39	; 0x27
    5690:	78 a5       	ldd	r23, Y+40	; 0x28
    5692:	89 a5       	ldd	r24, Y+41	; 0x29
    5694:	9a a5       	ldd	r25, Y+42	; 0x2a
    5696:	20 e0       	ldi	r18, 0x00	; 0
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	4a ef       	ldi	r20, 0xFA	; 250
    569c:	54 e4       	ldi	r21, 0x44	; 68
    569e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    56a2:	dc 01       	movw	r26, r24
    56a4:	cb 01       	movw	r24, r22
    56a6:	8b a3       	std	Y+35, r24	; 0x23
    56a8:	9c a3       	std	Y+36, r25	; 0x24
    56aa:	ad a3       	std	Y+37, r26	; 0x25
    56ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56ae:	6b a1       	ldd	r22, Y+35	; 0x23
    56b0:	7c a1       	ldd	r23, Y+36	; 0x24
    56b2:	8d a1       	ldd	r24, Y+37	; 0x25
    56b4:	9e a1       	ldd	r25, Y+38	; 0x26
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e8       	ldi	r20, 0x80	; 128
    56bc:	5f e3       	ldi	r21, 0x3F	; 63
    56be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    56c2:	88 23       	and	r24, r24
    56c4:	2c f4       	brge	.+10     	; 0x56d0 <main+0x2d8>
		__ticks = 1;
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	9a a3       	std	Y+34, r25	; 0x22
    56cc:	89 a3       	std	Y+33, r24	; 0x21
    56ce:	3f c0       	rjmp	.+126    	; 0x574e <main+0x356>
	else if (__tmp > 65535)
    56d0:	6b a1       	ldd	r22, Y+35	; 0x23
    56d2:	7c a1       	ldd	r23, Y+36	; 0x24
    56d4:	8d a1       	ldd	r24, Y+37	; 0x25
    56d6:	9e a1       	ldd	r25, Y+38	; 0x26
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	3f ef       	ldi	r19, 0xFF	; 255
    56dc:	4f e7       	ldi	r20, 0x7F	; 127
    56de:	57 e4       	ldi	r21, 0x47	; 71
    56e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    56e4:	18 16       	cp	r1, r24
    56e6:	4c f5       	brge	.+82     	; 0x573a <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56e8:	6f a1       	ldd	r22, Y+39	; 0x27
    56ea:	78 a5       	ldd	r23, Y+40	; 0x28
    56ec:	89 a5       	ldd	r24, Y+41	; 0x29
    56ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	40 e2       	ldi	r20, 0x20	; 32
    56f6:	51 e4       	ldi	r21, 0x41	; 65
    56f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	bc 01       	movw	r22, r24
    5702:	cd 01       	movw	r24, r26
    5704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	9a a3       	std	Y+34, r25	; 0x22
    570e:	89 a3       	std	Y+33, r24	; 0x21
    5710:	0f c0       	rjmp	.+30     	; 0x5730 <main+0x338>
    5712:	88 ec       	ldi	r24, 0xC8	; 200
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	98 a3       	std	Y+32, r25	; 0x20
    5718:	8f 8f       	std	Y+31, r24	; 0x1f
    571a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    571c:	98 a1       	ldd	r25, Y+32	; 0x20
    571e:	01 97       	sbiw	r24, 0x01	; 1
    5720:	f1 f7       	brne	.-4      	; 0x571e <main+0x326>
    5722:	98 a3       	std	Y+32, r25	; 0x20
    5724:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5726:	89 a1       	ldd	r24, Y+33	; 0x21
    5728:	9a a1       	ldd	r25, Y+34	; 0x22
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	9a a3       	std	Y+34, r25	; 0x22
    572e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5730:	89 a1       	ldd	r24, Y+33	; 0x21
    5732:	9a a1       	ldd	r25, Y+34	; 0x22
    5734:	00 97       	sbiw	r24, 0x00	; 0
    5736:	69 f7       	brne	.-38     	; 0x5712 <main+0x31a>
    5738:	14 c0       	rjmp	.+40     	; 0x5762 <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573a:	6b a1       	ldd	r22, Y+35	; 0x23
    573c:	7c a1       	ldd	r23, Y+36	; 0x24
    573e:	8d a1       	ldd	r24, Y+37	; 0x25
    5740:	9e a1       	ldd	r25, Y+38	; 0x26
    5742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5746:	dc 01       	movw	r26, r24
    5748:	cb 01       	movw	r24, r22
    574a:	9a a3       	std	Y+34, r25	; 0x22
    574c:	89 a3       	std	Y+33, r24	; 0x21
    574e:	89 a1       	ldd	r24, Y+33	; 0x21
    5750:	9a a1       	ldd	r25, Y+34	; 0x22
    5752:	9e 8f       	std	Y+30, r25	; 0x1e
    5754:	8d 8f       	std	Y+29, r24	; 0x1d
    5756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    575a:	01 97       	sbiw	r24, 0x01	; 1
    575c:	f1 f7       	brne	.-4      	; 0x575a <main+0x362>
    575e:	9e 8f       	std	Y+30, r25	; 0x1e
    5760:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			while (1) {
				Operation_number = Welcome_Screen();
    5762:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <Welcome_Screen>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	fe 01       	movw	r30, r28
    576c:	e5 5b       	subi	r30, 0xB5	; 181
    576e:	ff 4f       	sbci	r31, 0xFF	; 255
    5770:	80 83       	st	Z, r24
    5772:	91 83       	std	Z+1, r25	; 0x01
    5774:	a2 83       	std	Z+2, r26	; 0x02
    5776:	b3 83       	std	Z+3, r27	; 0x03

				check_Operation(Operation_number);
    5778:	fe 01       	movw	r30, r28
    577a:	e5 5b       	subi	r30, 0xB5	; 181
    577c:	ff 4f       	sbci	r31, 0xFF	; 255
    577e:	80 81       	ld	r24, Z
    5780:	91 81       	ldd	r25, Z+1	; 0x01
    5782:	a2 81       	ldd	r26, Z+2	; 0x02
    5784:	b3 81       	ldd	r27, Z+3	; 0x03
    5786:	bc 01       	movw	r22, r24
    5788:	cd 01       	movw	r24, r26
    578a:	0e 94 75 2f 	call	0x5eea	; 0x5eea <check_Operation>
    578e:	e9 cf       	rjmp	.-46     	; 0x5762 <main+0x36a>

			}

		} else {
			LCD_ClearScreen();
    5790:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
			Lcd_VoidSendString("Wrong ID");
    5794:	81 e7       	ldi	r24, 0x71	; 113
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
    579c:	80 e0       	ldi	r24, 0x00	; 0
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	aa e7       	ldi	r26, 0x7A	; 122
    57a2:	b4 e4       	ldi	r27, 0x44	; 68
    57a4:	89 8f       	std	Y+25, r24	; 0x19
    57a6:	9a 8f       	std	Y+26, r25	; 0x1a
    57a8:	ab 8f       	std	Y+27, r26	; 0x1b
    57aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ac:	69 8d       	ldd	r22, Y+25	; 0x19
    57ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57b4:	20 e0       	ldi	r18, 0x00	; 0
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	4a ef       	ldi	r20, 0xFA	; 250
    57ba:	54 e4       	ldi	r21, 0x44	; 68
    57bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    57c0:	dc 01       	movw	r26, r24
    57c2:	cb 01       	movw	r24, r22
    57c4:	8d 8b       	std	Y+21, r24	; 0x15
    57c6:	9e 8b       	std	Y+22, r25	; 0x16
    57c8:	af 8b       	std	Y+23, r26	; 0x17
    57ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57cc:	6d 89       	ldd	r22, Y+21	; 0x15
    57ce:	7e 89       	ldd	r23, Y+22	; 0x16
    57d0:	8f 89       	ldd	r24, Y+23	; 0x17
    57d2:	98 8d       	ldd	r25, Y+24	; 0x18
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	40 e8       	ldi	r20, 0x80	; 128
    57da:	5f e3       	ldi	r21, 0x3F	; 63
    57dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    57e0:	88 23       	and	r24, r24
    57e2:	2c f4       	brge	.+10     	; 0x57ee <main+0x3f6>
		__ticks = 1;
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	9c 8b       	std	Y+20, r25	; 0x14
    57ea:	8b 8b       	std	Y+19, r24	; 0x13
    57ec:	3f c0       	rjmp	.+126    	; 0x586c <main+0x474>
	else if (__tmp > 65535)
    57ee:	6d 89       	ldd	r22, Y+21	; 0x15
    57f0:	7e 89       	ldd	r23, Y+22	; 0x16
    57f2:	8f 89       	ldd	r24, Y+23	; 0x17
    57f4:	98 8d       	ldd	r25, Y+24	; 0x18
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	3f ef       	ldi	r19, 0xFF	; 255
    57fa:	4f e7       	ldi	r20, 0x7F	; 127
    57fc:	57 e4       	ldi	r21, 0x47	; 71
    57fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5802:	18 16       	cp	r1, r24
    5804:	4c f5       	brge	.+82     	; 0x5858 <main+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5806:	69 8d       	ldd	r22, Y+25	; 0x19
    5808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    580a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    580c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    580e:	20 e0       	ldi	r18, 0x00	; 0
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	40 e2       	ldi	r20, 0x20	; 32
    5814:	51 e4       	ldi	r21, 0x41	; 65
    5816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    581a:	dc 01       	movw	r26, r24
    581c:	cb 01       	movw	r24, r22
    581e:	bc 01       	movw	r22, r24
    5820:	cd 01       	movw	r24, r26
    5822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	9c 8b       	std	Y+20, r25	; 0x14
    582c:	8b 8b       	std	Y+19, r24	; 0x13
    582e:	0f c0       	rjmp	.+30     	; 0x584e <main+0x456>
    5830:	88 ec       	ldi	r24, 0xC8	; 200
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	9a 8b       	std	Y+18, r25	; 0x12
    5836:	89 8b       	std	Y+17, r24	; 0x11
    5838:	89 89       	ldd	r24, Y+17	; 0x11
    583a:	9a 89       	ldd	r25, Y+18	; 0x12
    583c:	01 97       	sbiw	r24, 0x01	; 1
    583e:	f1 f7       	brne	.-4      	; 0x583c <main+0x444>
    5840:	9a 8b       	std	Y+18, r25	; 0x12
    5842:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5844:	8b 89       	ldd	r24, Y+19	; 0x13
    5846:	9c 89       	ldd	r25, Y+20	; 0x14
    5848:	01 97       	sbiw	r24, 0x01	; 1
    584a:	9c 8b       	std	Y+20, r25	; 0x14
    584c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    584e:	8b 89       	ldd	r24, Y+19	; 0x13
    5850:	9c 89       	ldd	r25, Y+20	; 0x14
    5852:	00 97       	sbiw	r24, 0x00	; 0
    5854:	69 f7       	brne	.-38     	; 0x5830 <main+0x438>
    5856:	14 c0       	rjmp	.+40     	; 0x5880 <main+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5858:	6d 89       	ldd	r22, Y+21	; 0x15
    585a:	7e 89       	ldd	r23, Y+22	; 0x16
    585c:	8f 89       	ldd	r24, Y+23	; 0x17
    585e:	98 8d       	ldd	r25, Y+24	; 0x18
    5860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5864:	dc 01       	movw	r26, r24
    5866:	cb 01       	movw	r24, r22
    5868:	9c 8b       	std	Y+20, r25	; 0x14
    586a:	8b 8b       	std	Y+19, r24	; 0x13
    586c:	8b 89       	ldd	r24, Y+19	; 0x13
    586e:	9c 89       	ldd	r25, Y+20	; 0x14
    5870:	98 8b       	std	Y+16, r25	; 0x10
    5872:	8f 87       	std	Y+15, r24	; 0x0f
    5874:	8f 85       	ldd	r24, Y+15	; 0x0f
    5876:	98 89       	ldd	r25, Y+16	; 0x10
    5878:	01 97       	sbiw	r24, 0x01	; 1
    587a:	f1 f7       	brne	.-4      	; 0x5878 <main+0x480>
    587c:	98 8b       	std	Y+16, r25	; 0x10
    587e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
		}

		ID_Screen();
    5880:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <ID_Screen>
    5884:	80 e0       	ldi	r24, 0x00	; 0
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	aa e7       	ldi	r26, 0x7A	; 122
    588a:	b4 e4       	ldi	r27, 0x44	; 68
    588c:	8b 87       	std	Y+11, r24	; 0x0b
    588e:	9c 87       	std	Y+12, r25	; 0x0c
    5890:	ad 87       	std	Y+13, r26	; 0x0d
    5892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5894:	6b 85       	ldd	r22, Y+11	; 0x0b
    5896:	7c 85       	ldd	r23, Y+12	; 0x0c
    5898:	8d 85       	ldd	r24, Y+13	; 0x0d
    589a:	9e 85       	ldd	r25, Y+14	; 0x0e
    589c:	20 e0       	ldi	r18, 0x00	; 0
    589e:	30 e0       	ldi	r19, 0x00	; 0
    58a0:	4a ef       	ldi	r20, 0xFA	; 250
    58a2:	54 e4       	ldi	r21, 0x44	; 68
    58a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    58a8:	dc 01       	movw	r26, r24
    58aa:	cb 01       	movw	r24, r22
    58ac:	8f 83       	std	Y+7, r24	; 0x07
    58ae:	98 87       	std	Y+8, r25	; 0x08
    58b0:	a9 87       	std	Y+9, r26	; 0x09
    58b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58b4:	6f 81       	ldd	r22, Y+7	; 0x07
    58b6:	78 85       	ldd	r23, Y+8	; 0x08
    58b8:	89 85       	ldd	r24, Y+9	; 0x09
    58ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    58bc:	20 e0       	ldi	r18, 0x00	; 0
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	40 e8       	ldi	r20, 0x80	; 128
    58c2:	5f e3       	ldi	r21, 0x3F	; 63
    58c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    58c8:	88 23       	and	r24, r24
    58ca:	2c f4       	brge	.+10     	; 0x58d6 <main+0x4de>
		__ticks = 1;
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	9e 83       	std	Y+6, r25	; 0x06
    58d2:	8d 83       	std	Y+5, r24	; 0x05
    58d4:	3f c0       	rjmp	.+126    	; 0x5954 <main+0x55c>
	else if (__tmp > 65535)
    58d6:	6f 81       	ldd	r22, Y+7	; 0x07
    58d8:	78 85       	ldd	r23, Y+8	; 0x08
    58da:	89 85       	ldd	r24, Y+9	; 0x09
    58dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    58de:	20 e0       	ldi	r18, 0x00	; 0
    58e0:	3f ef       	ldi	r19, 0xFF	; 255
    58e2:	4f e7       	ldi	r20, 0x7F	; 127
    58e4:	57 e4       	ldi	r21, 0x47	; 71
    58e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    58ea:	18 16       	cp	r1, r24
    58ec:	4c f5       	brge	.+82     	; 0x5940 <main+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    58f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    58f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    58f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    58f6:	20 e0       	ldi	r18, 0x00	; 0
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	40 e2       	ldi	r20, 0x20	; 32
    58fc:	51 e4       	ldi	r21, 0x41	; 65
    58fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5902:	dc 01       	movw	r26, r24
    5904:	cb 01       	movw	r24, r22
    5906:	bc 01       	movw	r22, r24
    5908:	cd 01       	movw	r24, r26
    590a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    590e:	dc 01       	movw	r26, r24
    5910:	cb 01       	movw	r24, r22
    5912:	9e 83       	std	Y+6, r25	; 0x06
    5914:	8d 83       	std	Y+5, r24	; 0x05
    5916:	0f c0       	rjmp	.+30     	; 0x5936 <main+0x53e>
    5918:	88 ec       	ldi	r24, 0xC8	; 200
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	9c 83       	std	Y+4, r25	; 0x04
    591e:	8b 83       	std	Y+3, r24	; 0x03
    5920:	8b 81       	ldd	r24, Y+3	; 0x03
    5922:	9c 81       	ldd	r25, Y+4	; 0x04
    5924:	01 97       	sbiw	r24, 0x01	; 1
    5926:	f1 f7       	brne	.-4      	; 0x5924 <main+0x52c>
    5928:	9c 83       	std	Y+4, r25	; 0x04
    592a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    592c:	8d 81       	ldd	r24, Y+5	; 0x05
    592e:	9e 81       	ldd	r25, Y+6	; 0x06
    5930:	01 97       	sbiw	r24, 0x01	; 1
    5932:	9e 83       	std	Y+6, r25	; 0x06
    5934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5936:	8d 81       	ldd	r24, Y+5	; 0x05
    5938:	9e 81       	ldd	r25, Y+6	; 0x06
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	69 f7       	brne	.-38     	; 0x5918 <main+0x520>
    593e:	0c ce       	rjmp	.-1000   	; 0x5558 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5940:	6f 81       	ldd	r22, Y+7	; 0x07
    5942:	78 85       	ldd	r23, Y+8	; 0x08
    5944:	89 85       	ldd	r24, Y+9	; 0x09
    5946:	9a 85       	ldd	r25, Y+10	; 0x0a
    5948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    594c:	dc 01       	movw	r26, r24
    594e:	cb 01       	movw	r24, r22
    5950:	9e 83       	std	Y+6, r25	; 0x06
    5952:	8d 83       	std	Y+5, r24	; 0x05
    5954:	8d 81       	ldd	r24, Y+5	; 0x05
    5956:	9e 81       	ldd	r25, Y+6	; 0x06
    5958:	9a 83       	std	Y+2, r25	; 0x02
    595a:	89 83       	std	Y+1, r24	; 0x01
    595c:	89 81       	ldd	r24, Y+1	; 0x01
    595e:	9a 81       	ldd	r25, Y+2	; 0x02
    5960:	01 97       	sbiw	r24, 0x01	; 1
    5962:	f1 f7       	brne	.-4      	; 0x5960 <main+0x568>
    5964:	9a 83       	std	Y+2, r25	; 0x02
    5966:	89 83       	std	Y+1, r24	; 0x01
    5968:	f7 cd       	rjmp	.-1042   	; 0x5558 <main+0x160>

0000596a <intAlLOperation>:
	}

	return 0;
}

void intAlLOperation(void) {
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinValue(PORTB, PIN3, LOW);
	 DIO_SetPinValue(PORTB, PIN4, HIGH);*/
	// motor with transistor

	/*pin 1&4*/
	DIO_SetPinDirection(PORTB, PIN4, OUTPUT);
    5972:	81 e0       	ldi	r24, 0x01	; 1
    5974:	64 e0       	ldi	r22, 0x04	; 4
    5976:	41 e0       	ldi	r20, 0x01	; 1
    5978:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, PIN5, OUTPUT);
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	65 e0       	ldi	r22, 0x05	; 5
    5980:	41 e0       	ldi	r20, 0x01	; 1
    5982:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>

	/*pin 2&3*/
	DIO_SetPinDirection(PORTB, PIN6, OUTPUT);
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	66 e0       	ldi	r22, 0x06	; 6
    598a:	41 e0       	ldi	r20, 0x01	; 1
    598c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, PIN7, OUTPUT);
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	67 e0       	ldi	r22, 0x07	; 7
    5994:	41 e0       	ldi	r20, 0x01	; 1
    5996:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>

	// fist intialization

	DIO_SetPinValue(PORTB, PIN4, LOW);
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	64 e0       	ldi	r22, 0x04	; 4
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB, PIN5, LOW);
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	65 e0       	ldi	r22, 0x05	; 5
    59a8:	40 e0       	ldi	r20, 0x00	; 0
    59aa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB, PIN6, LOW);
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	66 e0       	ldi	r22, 0x06	; 6
    59b2:	40 e0       	ldi	r20, 0x00	; 0
    59b4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PORTB, PIN7, LOW);
    59b8:	81 e0       	ldi	r24, 0x01	; 1
    59ba:	67 e0       	ldi	r22, 0x07	; 7
    59bc:	40 e0       	ldi	r20, 0x00	; 0
    59be:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

	// led output
	DIO_SetPinDirection(PORTA, PIN0, OUTPUT);   //  LED WITH SRRA 0
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	41 e0       	ldi	r20, 0x01	; 1
    59c8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	// led of
	DIO_SetPinValue(PORTA, PIN0, LOW); // WIH ME 2
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	60 e0       	ldi	r22, 0x00	; 0
    59d0:	40 e0       	ldi	r20, 0x00	; 0
    59d2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

	// BUZZER

	// led output
	DIO_SetPinDirection(PORTA, PIN2, OUTPUT);   //  LED WITH SRRA 0
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	62 e0       	ldi	r22, 0x02	; 2
    59da:	41 e0       	ldi	r20, 0x01	; 1
    59dc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	// led of
	DIO_SetPinValue(PORTA, PIN2, LOW); // WIH ME 2
    59e0:	80 e0       	ldi	r24, 0x00	; 0
    59e2:	62 e0       	ldi	r22, 0x02	; 2
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

	// usART
	DIO_SetPinDirection(PORTD, PIN1, OUTPUT); // transmite
    59ea:	83 e0       	ldi	r24, 0x03	; 3
    59ec:	61 e0       	ldi	r22, 0x01	; 1
    59ee:	41 e0       	ldi	r20, 0x01	; 1
    59f0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, PIN0, INPUT); // recieve
    59f4:	83 e0       	ldi	r24, 0x03	; 3
    59f6:	60 e0       	ldi	r22, 0x00	; 0
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_SetPinDirection>

}
    59fe:	cf 91       	pop	r28
    5a00:	df 91       	pop	r29
    5a02:	08 95       	ret

00005a04 <Get_Password>:
u32 Get_Password(void) {
    5a04:	df 93       	push	r29
    5a06:	cf 93       	push	r28
    5a08:	cd b7       	in	r28, 0x3d	; 61
    5a0a:	de b7       	in	r29, 0x3e	; 62
    5a0c:	e0 97       	sbiw	r28, 0x30	; 48
    5a0e:	0f b6       	in	r0, 0x3f	; 63
    5a10:	f8 94       	cli
    5a12:	de bf       	out	0x3e, r29	; 62
    5a14:	0f be       	out	0x3f, r0	; 63
    5a16:	cd bf       	out	0x3d, r28	; 61
	u8 i, key;
	u32 Shift_num = 0;
    5a18:	1b a6       	std	Y+43, r1	; 0x2b
    5a1a:	1c a6       	std	Y+44, r1	; 0x2c
    5a1c:	1d a6       	std	Y+45, r1	; 0x2d
    5a1e:	1e a6       	std	Y+46, r1	; 0x2e
	for (i = 0; i <= 3; i++) {
    5a20:	18 aa       	std	Y+48, r1	; 0x30
    5a22:	16 c1       	rjmp	.+556    	; 0x5c50 <Get_Password+0x24c>
//		key = KeyPad_getPressedKey();
		key = USART_VoidReseiveData();
    5a24:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    5a28:	8f a7       	std	Y+47, r24	; 0x2f
		if (key >= '0' && key <= '9') {
    5a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a2c:	80 33       	cpi	r24, 0x30	; 48
    5a2e:	08 f4       	brcc	.+2      	; 0x5a32 <Get_Password+0x2e>
    5a30:	9a c0       	rjmp	.+308    	; 0x5b66 <Get_Password+0x162>
    5a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a34:	8a 33       	cpi	r24, 0x3A	; 58
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <Get_Password+0x36>
    5a38:	96 c0       	rjmp	.+300    	; 0x5b66 <Get_Password+0x162>
			Lcd_VoidSendNumber(key);
    5a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a3c:	88 2f       	mov	r24, r24
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	a0 e0       	ldi	r26, 0x00	; 0
    5a42:	b0 e0       	ldi	r27, 0x00	; 0
    5a44:	bc 01       	movw	r22, r24
    5a46:	cd 01       	movw	r24, r26
    5a48:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <Lcd_VoidSendNumber>
			Shift_num = (Shift_num * 10) + key;
    5a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a50:	ad a5       	ldd	r26, Y+45	; 0x2d
    5a52:	be a5       	ldd	r27, Y+46	; 0x2e
    5a54:	2a e0       	ldi	r18, 0x0A	; 10
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	40 e0       	ldi	r20, 0x00	; 0
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	bc 01       	movw	r22, r24
    5a5e:	cd 01       	movw	r24, r26
    5a60:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    5a64:	9b 01       	movw	r18, r22
    5a66:	ac 01       	movw	r20, r24
    5a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a6a:	88 2f       	mov	r24, r24
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	a0 e0       	ldi	r26, 0x00	; 0
    5a70:	b0 e0       	ldi	r27, 0x00	; 0
    5a72:	82 0f       	add	r24, r18
    5a74:	93 1f       	adc	r25, r19
    5a76:	a4 1f       	adc	r26, r20
    5a78:	b5 1f       	adc	r27, r21
    5a7a:	8b a7       	std	Y+43, r24	; 0x2b
    5a7c:	9c a7       	std	Y+44, r25	; 0x2c
    5a7e:	ad a7       	std	Y+45, r26	; 0x2d
    5a80:	be a7       	std	Y+46, r27	; 0x2e
    5a82:	80 e0       	ldi	r24, 0x00	; 0
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	aa e7       	ldi	r26, 0x7A	; 122
    5a88:	b3 e4       	ldi	r27, 0x43	; 67
    5a8a:	8f a3       	std	Y+39, r24	; 0x27
    5a8c:	98 a7       	std	Y+40, r25	; 0x28
    5a8e:	a9 a7       	std	Y+41, r26	; 0x29
    5a90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a92:	6f a1       	ldd	r22, Y+39	; 0x27
    5a94:	78 a5       	ldd	r23, Y+40	; 0x28
    5a96:	89 a5       	ldd	r24, Y+41	; 0x29
    5a98:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
    5a9e:	4a ef       	ldi	r20, 0xFA	; 250
    5aa0:	54 e4       	ldi	r21, 0x44	; 68
    5aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	cb 01       	movw	r24, r22
    5aaa:	8b a3       	std	Y+35, r24	; 0x23
    5aac:	9c a3       	std	Y+36, r25	; 0x24
    5aae:	ad a3       	std	Y+37, r26	; 0x25
    5ab0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ab2:	6b a1       	ldd	r22, Y+35	; 0x23
    5ab4:	7c a1       	ldd	r23, Y+36	; 0x24
    5ab6:	8d a1       	ldd	r24, Y+37	; 0x25
    5ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	40 e8       	ldi	r20, 0x80	; 128
    5ac0:	5f e3       	ldi	r21, 0x3F	; 63
    5ac2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5ac6:	88 23       	and	r24, r24
    5ac8:	2c f4       	brge	.+10     	; 0x5ad4 <Get_Password+0xd0>
		__ticks = 1;
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	9a a3       	std	Y+34, r25	; 0x22
    5ad0:	89 a3       	std	Y+33, r24	; 0x21
    5ad2:	3f c0       	rjmp	.+126    	; 0x5b52 <Get_Password+0x14e>
	else if (__tmp > 65535)
    5ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    5ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    5ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    5ada:	9e a1       	ldd	r25, Y+38	; 0x26
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	3f ef       	ldi	r19, 0xFF	; 255
    5ae0:	4f e7       	ldi	r20, 0x7F	; 127
    5ae2:	57 e4       	ldi	r21, 0x47	; 71
    5ae4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5ae8:	18 16       	cp	r1, r24
    5aea:	4c f5       	brge	.+82     	; 0x5b3e <Get_Password+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aec:	6f a1       	ldd	r22, Y+39	; 0x27
    5aee:	78 a5       	ldd	r23, Y+40	; 0x28
    5af0:	89 a5       	ldd	r24, Y+41	; 0x29
    5af2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5af4:	20 e0       	ldi	r18, 0x00	; 0
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	40 e2       	ldi	r20, 0x20	; 32
    5afa:	51 e4       	ldi	r21, 0x41	; 65
    5afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5b00:	dc 01       	movw	r26, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	bc 01       	movw	r22, r24
    5b06:	cd 01       	movw	r24, r26
    5b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	9a a3       	std	Y+34, r25	; 0x22
    5b12:	89 a3       	std	Y+33, r24	; 0x21
    5b14:	0f c0       	rjmp	.+30     	; 0x5b34 <Get_Password+0x130>
    5b16:	88 ec       	ldi	r24, 0xC8	; 200
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	98 a3       	std	Y+32, r25	; 0x20
    5b1c:	8f 8f       	std	Y+31, r24	; 0x1f
    5b1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b20:	98 a1       	ldd	r25, Y+32	; 0x20
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <Get_Password+0x11e>
    5b26:	98 a3       	std	Y+32, r25	; 0x20
    5b28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	9a a3       	std	Y+34, r25	; 0x22
    5b32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b34:	89 a1       	ldd	r24, Y+33	; 0x21
    5b36:	9a a1       	ldd	r25, Y+34	; 0x22
    5b38:	00 97       	sbiw	r24, 0x00	; 0
    5b3a:	69 f7       	brne	.-38     	; 0x5b16 <Get_Password+0x112>
    5b3c:	14 c0       	rjmp	.+40     	; 0x5b66 <Get_Password+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    5b40:	7c a1       	ldd	r23, Y+36	; 0x24
    5b42:	8d a1       	ldd	r24, Y+37	; 0x25
    5b44:	9e a1       	ldd	r25, Y+38	; 0x26
    5b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5b4a:	dc 01       	movw	r26, r24
    5b4c:	cb 01       	movw	r24, r22
    5b4e:	9a a3       	std	Y+34, r25	; 0x22
    5b50:	89 a3       	std	Y+33, r24	; 0x21
    5b52:	89 a1       	ldd	r24, Y+33	; 0x21
    5b54:	9a a1       	ldd	r25, Y+34	; 0x22
    5b56:	9e 8f       	std	Y+30, r25	; 0x1e
    5b58:	8d 8f       	std	Y+29, r24	; 0x1d
    5b5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b5e:	01 97       	sbiw	r24, 0x01	; 1
    5b60:	f1 f7       	brne	.-4      	; 0x5b5e <Get_Password+0x15a>
    5b62:	9e 8f       	std	Y+30, r25	; 0x1e
    5b64:	8d 8f       	std	Y+29, r24	; 0x1d
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	aa e7       	ldi	r26, 0x7A	; 122
    5b6c:	b3 e4       	ldi	r27, 0x43	; 67
    5b6e:	89 8f       	std	Y+25, r24	; 0x19
    5b70:	9a 8f       	std	Y+26, r25	; 0x1a
    5b72:	ab 8f       	std	Y+27, r26	; 0x1b
    5b74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b76:	69 8d       	ldd	r22, Y+25	; 0x19
    5b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b7e:	20 e0       	ldi	r18, 0x00	; 0
    5b80:	30 e0       	ldi	r19, 0x00	; 0
    5b82:	4a ef       	ldi	r20, 0xFA	; 250
    5b84:	54 e4       	ldi	r21, 0x44	; 68
    5b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	8d 8b       	std	Y+21, r24	; 0x15
    5b90:	9e 8b       	std	Y+22, r25	; 0x16
    5b92:	af 8b       	std	Y+23, r26	; 0x17
    5b94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b96:	6d 89       	ldd	r22, Y+21	; 0x15
    5b98:	7e 89       	ldd	r23, Y+22	; 0x16
    5b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    5b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    5b9e:	20 e0       	ldi	r18, 0x00	; 0
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	40 e8       	ldi	r20, 0x80	; 128
    5ba4:	5f e3       	ldi	r21, 0x3F	; 63
    5ba6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5baa:	88 23       	and	r24, r24
    5bac:	2c f4       	brge	.+10     	; 0x5bb8 <Get_Password+0x1b4>
		__ticks = 1;
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	9c 8b       	std	Y+20, r25	; 0x14
    5bb4:	8b 8b       	std	Y+19, r24	; 0x13
    5bb6:	3f c0       	rjmp	.+126    	; 0x5c36 <Get_Password+0x232>
	else if (__tmp > 65535)
    5bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    5bba:	7e 89       	ldd	r23, Y+22	; 0x16
    5bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    5bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    5bc0:	20 e0       	ldi	r18, 0x00	; 0
    5bc2:	3f ef       	ldi	r19, 0xFF	; 255
    5bc4:	4f e7       	ldi	r20, 0x7F	; 127
    5bc6:	57 e4       	ldi	r21, 0x47	; 71
    5bc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5bcc:	18 16       	cp	r1, r24
    5bce:	4c f5       	brge	.+82     	; 0x5c22 <Get_Password+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    5bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bd8:	20 e0       	ldi	r18, 0x00	; 0
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	40 e2       	ldi	r20, 0x20	; 32
    5bde:	51 e4       	ldi	r21, 0x41	; 65
    5be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5be4:	dc 01       	movw	r26, r24
    5be6:	cb 01       	movw	r24, r22
    5be8:	bc 01       	movw	r22, r24
    5bea:	cd 01       	movw	r24, r26
    5bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	9c 8b       	std	Y+20, r25	; 0x14
    5bf6:	8b 8b       	std	Y+19, r24	; 0x13
    5bf8:	0f c0       	rjmp	.+30     	; 0x5c18 <Get_Password+0x214>
    5bfa:	88 ec       	ldi	r24, 0xC8	; 200
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	9a 8b       	std	Y+18, r25	; 0x12
    5c00:	89 8b       	std	Y+17, r24	; 0x11
    5c02:	89 89       	ldd	r24, Y+17	; 0x11
    5c04:	9a 89       	ldd	r25, Y+18	; 0x12
    5c06:	01 97       	sbiw	r24, 0x01	; 1
    5c08:	f1 f7       	brne	.-4      	; 0x5c06 <Get_Password+0x202>
    5c0a:	9a 8b       	std	Y+18, r25	; 0x12
    5c0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    5c10:	9c 89       	ldd	r25, Y+20	; 0x14
    5c12:	01 97       	sbiw	r24, 0x01	; 1
    5c14:	9c 8b       	std	Y+20, r25	; 0x14
    5c16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c18:	8b 89       	ldd	r24, Y+19	; 0x13
    5c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    5c1c:	00 97       	sbiw	r24, 0x00	; 0
    5c1e:	69 f7       	brne	.-38     	; 0x5bfa <Get_Password+0x1f6>
    5c20:	14 c0       	rjmp	.+40     	; 0x5c4a <Get_Password+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c22:	6d 89       	ldd	r22, Y+21	; 0x15
    5c24:	7e 89       	ldd	r23, Y+22	; 0x16
    5c26:	8f 89       	ldd	r24, Y+23	; 0x17
    5c28:	98 8d       	ldd	r25, Y+24	; 0x18
    5c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5c2e:	dc 01       	movw	r26, r24
    5c30:	cb 01       	movw	r24, r22
    5c32:	9c 8b       	std	Y+20, r25	; 0x14
    5c34:	8b 8b       	std	Y+19, r24	; 0x13
    5c36:	8b 89       	ldd	r24, Y+19	; 0x13
    5c38:	9c 89       	ldd	r25, Y+20	; 0x14
    5c3a:	98 8b       	std	Y+16, r25	; 0x10
    5c3c:	8f 87       	std	Y+15, r24	; 0x0f
    5c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c40:	98 89       	ldd	r25, Y+16	; 0x10
    5c42:	01 97       	sbiw	r24, 0x01	; 1
    5c44:	f1 f7       	brne	.-4      	; 0x5c42 <Get_Password+0x23e>
    5c46:	98 8b       	std	Y+16, r25	; 0x10
    5c48:	8f 87       	std	Y+15, r24	; 0x0f

}
u32 Get_Password(void) {
	u8 i, key;
	u32 Shift_num = 0;
	for (i = 0; i <= 3; i++) {
    5c4a:	88 a9       	ldd	r24, Y+48	; 0x30
    5c4c:	8f 5f       	subi	r24, 0xFF	; 255
    5c4e:	88 ab       	std	Y+48, r24	; 0x30
    5c50:	88 a9       	ldd	r24, Y+48	; 0x30
    5c52:	84 30       	cpi	r24, 0x04	; 4
    5c54:	08 f4       	brcc	.+2      	; 0x5c58 <Get_Password+0x254>
    5c56:	e6 ce       	rjmp	.-564    	; 0x5a24 <Get_Password+0x20>
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	aa e7       	ldi	r26, 0x7A	; 122
    5c5e:	b3 e4       	ldi	r27, 0x43	; 67
    5c60:	8b 87       	std	Y+11, r24	; 0x0b
    5c62:	9c 87       	std	Y+12, r25	; 0x0c
    5c64:	ad 87       	std	Y+13, r26	; 0x0d
    5c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	4a ef       	ldi	r20, 0xFA	; 250
    5c76:	54 e4       	ldi	r21, 0x44	; 68
    5c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	8f 83       	std	Y+7, r24	; 0x07
    5c82:	98 87       	std	Y+8, r25	; 0x08
    5c84:	a9 87       	std	Y+9, r26	; 0x09
    5c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c88:	6f 81       	ldd	r22, Y+7	; 0x07
    5c8a:	78 85       	ldd	r23, Y+8	; 0x08
    5c8c:	89 85       	ldd	r24, Y+9	; 0x09
    5c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	40 e8       	ldi	r20, 0x80	; 128
    5c96:	5f e3       	ldi	r21, 0x3F	; 63
    5c98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5c9c:	88 23       	and	r24, r24
    5c9e:	2c f4       	brge	.+10     	; 0x5caa <Get_Password+0x2a6>
		__ticks = 1;
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	9e 83       	std	Y+6, r25	; 0x06
    5ca6:	8d 83       	std	Y+5, r24	; 0x05
    5ca8:	3f c0       	rjmp	.+126    	; 0x5d28 <Get_Password+0x324>
	else if (__tmp > 65535)
    5caa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cac:	78 85       	ldd	r23, Y+8	; 0x08
    5cae:	89 85       	ldd	r24, Y+9	; 0x09
    5cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	3f ef       	ldi	r19, 0xFF	; 255
    5cb6:	4f e7       	ldi	r20, 0x7F	; 127
    5cb8:	57 e4       	ldi	r21, 0x47	; 71
    5cba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5cbe:	18 16       	cp	r1, r24
    5cc0:	4c f5       	brge	.+82     	; 0x5d14 <Get_Password+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cca:	20 e0       	ldi	r18, 0x00	; 0
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	40 e2       	ldi	r20, 0x20	; 32
    5cd0:	51 e4       	ldi	r21, 0x41	; 65
    5cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	bc 01       	movw	r22, r24
    5cdc:	cd 01       	movw	r24, r26
    5cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	9e 83       	std	Y+6, r25	; 0x06
    5ce8:	8d 83       	std	Y+5, r24	; 0x05
    5cea:	0f c0       	rjmp	.+30     	; 0x5d0a <Get_Password+0x306>
    5cec:	88 ec       	ldi	r24, 0xC8	; 200
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	9c 83       	std	Y+4, r25	; 0x04
    5cf2:	8b 83       	std	Y+3, r24	; 0x03
    5cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    5cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    5cf8:	01 97       	sbiw	r24, 0x01	; 1
    5cfa:	f1 f7       	brne	.-4      	; 0x5cf8 <Get_Password+0x2f4>
    5cfc:	9c 83       	std	Y+4, r25	; 0x04
    5cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d00:	8d 81       	ldd	r24, Y+5	; 0x05
    5d02:	9e 81       	ldd	r25, Y+6	; 0x06
    5d04:	01 97       	sbiw	r24, 0x01	; 1
    5d06:	9e 83       	std	Y+6, r25	; 0x06
    5d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    5d0e:	00 97       	sbiw	r24, 0x00	; 0
    5d10:	69 f7       	brne	.-38     	; 0x5cec <Get_Password+0x2e8>
    5d12:	14 c0       	rjmp	.+40     	; 0x5d3c <Get_Password+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d14:	6f 81       	ldd	r22, Y+7	; 0x07
    5d16:	78 85       	ldd	r23, Y+8	; 0x08
    5d18:	89 85       	ldd	r24, Y+9	; 0x09
    5d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5d20:	dc 01       	movw	r26, r24
    5d22:	cb 01       	movw	r24, r22
    5d24:	9e 83       	std	Y+6, r25	; 0x06
    5d26:	8d 83       	std	Y+5, r24	; 0x05
    5d28:	8d 81       	ldd	r24, Y+5	; 0x05
    5d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d2c:	9a 83       	std	Y+2, r25	; 0x02
    5d2e:	89 83       	std	Y+1, r24	; 0x01
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	9a 81       	ldd	r25, Y+2	; 0x02
    5d34:	01 97       	sbiw	r24, 0x01	; 1
    5d36:	f1 f7       	brne	.-4      	; 0x5d34 <Get_Password+0x330>
    5d38:	9a 83       	std	Y+2, r25	; 0x02
    5d3a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
		}
		_delay_ms(250);
	}
	_delay_ms(250);
	return Shift_num;
    5d3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d40:	ad a5       	ldd	r26, Y+45	; 0x2d
    5d42:	be a5       	ldd	r27, Y+46	; 0x2e
}
    5d44:	bc 01       	movw	r22, r24
    5d46:	cd 01       	movw	r24, r26
    5d48:	e0 96       	adiw	r28, 0x30	; 48
    5d4a:	0f b6       	in	r0, 0x3f	; 63
    5d4c:	f8 94       	cli
    5d4e:	de bf       	out	0x3e, r29	; 62
    5d50:	0f be       	out	0x3f, r0	; 63
    5d52:	cd bf       	out	0x3d, r28	; 61
    5d54:	cf 91       	pop	r28
    5d56:	df 91       	pop	r29
    5d58:	08 95       	ret

00005d5a <ID_Screen>:

void ID_Screen(void) {
    5d5a:	df 93       	push	r29
    5d5c:	cf 93       	push	r28
    5d5e:	cd b7       	in	r28, 0x3d	; 61
    5d60:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    5d62:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	Lcd_VoidSendString("Enter Your ID");
    5d66:	8a e7       	ldi	r24, 0x7A	; 122
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
	LCD_SetPosition(1, 5);
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	65 e0       	ldi	r22, 0x05	; 5
    5d72:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
}
    5d76:	cf 91       	pop	r28
    5d78:	df 91       	pop	r29
    5d7a:	08 95       	ret

00005d7c <Welcome_Screen>:

u32 Welcome_Screen(void) {
    5d7c:	df 93       	push	r29
    5d7e:	cf 93       	push	r28
    5d80:	cd b7       	in	r28, 0x3d	; 61
    5d82:	de b7       	in	r29, 0x3e	; 62
    5d84:	62 97       	sbiw	r28, 0x12	; 18
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	f8 94       	cli
    5d8a:	de bf       	out	0x3e, r29	; 62
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	cd bf       	out	0x3d, r28	; 61
	u32 key = 0;
    5d90:	1f 86       	std	Y+15, r1	; 0x0f
    5d92:	18 8a       	std	Y+16, r1	; 0x10
    5d94:	19 8a       	std	Y+17, r1	; 0x11
    5d96:	1a 8a       	std	Y+18, r1	; 0x12
	LCD_ClearScreen();
    5d98:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	LCD_VoidSendStringToRowColumn(0, 0, "1-TEMP"); //print tempature
    5d9c:	28 e8       	ldi	r18, 0x88	; 136
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	60 e0       	ldi	r22, 0x00	; 0
    5da4:	a9 01       	movw	r20, r18
    5da6:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(0, 8, "2-Light"); //print light
    5daa:	2f e8       	ldi	r18, 0x8F	; 143
    5dac:	30 e0       	ldi	r19, 0x00	; 0
    5dae:	80 e0       	ldi	r24, 0x00	; 0
    5db0:	68 e0       	ldi	r22, 0x08	; 8
    5db2:	a9 01       	movw	r20, r18
    5db4:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 0, "3-Door"); //print motors
    5db8:	27 e9       	ldi	r18, 0x97	; 151
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	81 e0       	ldi	r24, 0x01	; 1
    5dbe:	60 e0       	ldi	r22, 0x00	; 0
    5dc0:	a9 01       	movw	r20, r18
    5dc2:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 8, "4-EXIST"); // back to welcome screen
    5dc6:	2e e9       	ldi	r18, 0x9E	; 158
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	68 e0       	ldi	r22, 0x08	; 8
    5dce:	a9 01       	movw	r20, r18
    5dd0:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
//	key = KeyPad_getPressedKey();
	key = USART_VoidReseiveData();
    5dd4:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    5dd8:	88 2f       	mov	r24, r24
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	a0 e0       	ldi	r26, 0x00	; 0
    5dde:	b0 e0       	ldi	r27, 0x00	; 0
    5de0:	8f 87       	std	Y+15, r24	; 0x0f
    5de2:	98 8b       	std	Y+16, r25	; 0x10
    5de4:	a9 8b       	std	Y+17, r26	; 0x11
    5de6:	ba 8b       	std	Y+18, r27	; 0x12
    5de8:	80 e0       	ldi	r24, 0x00	; 0
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	aa e7       	ldi	r26, 0x7A	; 122
    5dee:	b4 e4       	ldi	r27, 0x44	; 68
    5df0:	8b 87       	std	Y+11, r24	; 0x0b
    5df2:	9c 87       	std	Y+12, r25	; 0x0c
    5df4:	ad 87       	std	Y+13, r26	; 0x0d
    5df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e00:	20 e0       	ldi	r18, 0x00	; 0
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	4a ef       	ldi	r20, 0xFA	; 250
    5e06:	54 e4       	ldi	r21, 0x44	; 68
    5e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	8f 83       	std	Y+7, r24	; 0x07
    5e12:	98 87       	std	Y+8, r25	; 0x08
    5e14:	a9 87       	std	Y+9, r26	; 0x09
    5e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e18:	6f 81       	ldd	r22, Y+7	; 0x07
    5e1a:	78 85       	ldd	r23, Y+8	; 0x08
    5e1c:	89 85       	ldd	r24, Y+9	; 0x09
    5e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	30 e0       	ldi	r19, 0x00	; 0
    5e24:	40 e8       	ldi	r20, 0x80	; 128
    5e26:	5f e3       	ldi	r21, 0x3F	; 63
    5e28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5e2c:	88 23       	and	r24, r24
    5e2e:	2c f4       	brge	.+10     	; 0x5e3a <Welcome_Screen+0xbe>
		__ticks = 1;
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	9e 83       	std	Y+6, r25	; 0x06
    5e36:	8d 83       	std	Y+5, r24	; 0x05
    5e38:	3f c0       	rjmp	.+126    	; 0x5eb8 <Welcome_Screen+0x13c>
	else if (__tmp > 65535)
    5e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e3c:	78 85       	ldd	r23, Y+8	; 0x08
    5e3e:	89 85       	ldd	r24, Y+9	; 0x09
    5e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	3f ef       	ldi	r19, 0xFF	; 255
    5e46:	4f e7       	ldi	r20, 0x7F	; 127
    5e48:	57 e4       	ldi	r21, 0x47	; 71
    5e4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5e4e:	18 16       	cp	r1, r24
    5e50:	4c f5       	brge	.+82     	; 0x5ea4 <Welcome_Screen+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
    5e5c:	30 e0       	ldi	r19, 0x00	; 0
    5e5e:	40 e2       	ldi	r20, 0x20	; 32
    5e60:	51 e4       	ldi	r21, 0x41	; 65
    5e62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5e66:	dc 01       	movw	r26, r24
    5e68:	cb 01       	movw	r24, r22
    5e6a:	bc 01       	movw	r22, r24
    5e6c:	cd 01       	movw	r24, r26
    5e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5e72:	dc 01       	movw	r26, r24
    5e74:	cb 01       	movw	r24, r22
    5e76:	9e 83       	std	Y+6, r25	; 0x06
    5e78:	8d 83       	std	Y+5, r24	; 0x05
    5e7a:	0f c0       	rjmp	.+30     	; 0x5e9a <Welcome_Screen+0x11e>
    5e7c:	88 ec       	ldi	r24, 0xC8	; 200
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	9c 83       	std	Y+4, r25	; 0x04
    5e82:	8b 83       	std	Y+3, r24	; 0x03
    5e84:	8b 81       	ldd	r24, Y+3	; 0x03
    5e86:	9c 81       	ldd	r25, Y+4	; 0x04
    5e88:	01 97       	sbiw	r24, 0x01	; 1
    5e8a:	f1 f7       	brne	.-4      	; 0x5e88 <Welcome_Screen+0x10c>
    5e8c:	9c 83       	std	Y+4, r25	; 0x04
    5e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e90:	8d 81       	ldd	r24, Y+5	; 0x05
    5e92:	9e 81       	ldd	r25, Y+6	; 0x06
    5e94:	01 97       	sbiw	r24, 0x01	; 1
    5e96:	9e 83       	std	Y+6, r25	; 0x06
    5e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5e9e:	00 97       	sbiw	r24, 0x00	; 0
    5ea0:	69 f7       	brne	.-38     	; 0x5e7c <Welcome_Screen+0x100>
    5ea2:	14 c0       	rjmp	.+40     	; 0x5ecc <Welcome_Screen+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ea6:	78 85       	ldd	r23, Y+8	; 0x08
    5ea8:	89 85       	ldd	r24, Y+9	; 0x09
    5eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	cb 01       	movw	r24, r22
    5eb4:	9e 83       	std	Y+6, r25	; 0x06
    5eb6:	8d 83       	std	Y+5, r24	; 0x05
    5eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eba:	9e 81       	ldd	r25, Y+6	; 0x06
    5ebc:	9a 83       	std	Y+2, r25	; 0x02
    5ebe:	89 83       	std	Y+1, r24	; 0x01
    5ec0:	89 81       	ldd	r24, Y+1	; 0x01
    5ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
    5ec6:	f1 f7       	brne	.-4      	; 0x5ec4 <Welcome_Screen+0x148>
    5ec8:	9a 83       	std	Y+2, r25	; 0x02
    5eca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return key;
    5ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ece:	98 89       	ldd	r25, Y+16	; 0x10
    5ed0:	a9 89       	ldd	r26, Y+17	; 0x11
    5ed2:	ba 89       	ldd	r27, Y+18	; 0x12

}
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	cd 01       	movw	r24, r26
    5ed8:	62 96       	adiw	r28, 0x12	; 18
    5eda:	0f b6       	in	r0, 0x3f	; 63
    5edc:	f8 94       	cli
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	cd bf       	out	0x3d, r28	; 61
    5ee4:	cf 91       	pop	r28
    5ee6:	df 91       	pop	r29
    5ee8:	08 95       	ret

00005eea <check_Operation>:

void check_Operation(u32 num) {
    5eea:	df 93       	push	r29
    5eec:	cf 93       	push	r28
    5eee:	00 d0       	rcall	.+0      	; 0x5ef0 <check_Operation+0x6>
    5ef0:	00 d0       	rcall	.+0      	; 0x5ef2 <check_Operation+0x8>
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
    5ef6:	69 83       	std	Y+1, r22	; 0x01
    5ef8:	7a 83       	std	Y+2, r23	; 0x02
    5efa:	8b 83       	std	Y+3, r24	; 0x03
    5efc:	9c 83       	std	Y+4, r25	; 0x04
	if (num == '1') {
    5efe:	89 81       	ldd	r24, Y+1	; 0x01
    5f00:	9a 81       	ldd	r25, Y+2	; 0x02
    5f02:	ab 81       	ldd	r26, Y+3	; 0x03
    5f04:	bc 81       	ldd	r27, Y+4	; 0x04
    5f06:	81 33       	cpi	r24, 0x31	; 49
    5f08:	91 05       	cpc	r25, r1
    5f0a:	a1 05       	cpc	r26, r1
    5f0c:	b1 05       	cpc	r27, r1
    5f0e:	19 f4       	brne	.+6      	; 0x5f16 <check_Operation+0x2c>
		Temp_OPeration();
    5f10:	0e 94 91 33 	call	0x6722	; 0x6722 <Temp_OPeration>
    5f14:	23 c0       	rjmp	.+70     	; 0x5f5c <check_Operation+0x72>
		return;
	} else if (num == '2') {
    5f16:	89 81       	ldd	r24, Y+1	; 0x01
    5f18:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1a:	ab 81       	ldd	r26, Y+3	; 0x03
    5f1c:	bc 81       	ldd	r27, Y+4	; 0x04
    5f1e:	82 33       	cpi	r24, 0x32	; 50
    5f20:	91 05       	cpc	r25, r1
    5f22:	a1 05       	cpc	r26, r1
    5f24:	b1 05       	cpc	r27, r1
    5f26:	19 f4       	brne	.+6      	; 0x5f2e <check_Operation+0x44>
		Light_OPeration();
    5f28:	0e 94 c6 31 	call	0x638c	; 0x638c <Light_OPeration>
    5f2c:	17 c0       	rjmp	.+46     	; 0x5f5c <check_Operation+0x72>
		return;
	} else if (num == '3') {
    5f2e:	89 81       	ldd	r24, Y+1	; 0x01
    5f30:	9a 81       	ldd	r25, Y+2	; 0x02
    5f32:	ab 81       	ldd	r26, Y+3	; 0x03
    5f34:	bc 81       	ldd	r27, Y+4	; 0x04
    5f36:	83 33       	cpi	r24, 0x33	; 51
    5f38:	91 05       	cpc	r25, r1
    5f3a:	a1 05       	cpc	r26, r1
    5f3c:	b1 05       	cpc	r27, r1
    5f3e:	19 f4       	brne	.+6      	; 0x5f46 <check_Operation+0x5c>
		DOOR_OPeration();
    5f40:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <DOOR_OPeration>
    5f44:	0b c0       	rjmp	.+22     	; 0x5f5c <check_Operation+0x72>
		return;
	} else if (num == '4') {
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
    5f48:	9a 81       	ldd	r25, Y+2	; 0x02
    5f4a:	ab 81       	ldd	r26, Y+3	; 0x03
    5f4c:	bc 81       	ldd	r27, Y+4	; 0x04
    5f4e:	84 33       	cpi	r24, 0x34	; 52
    5f50:	91 05       	cpc	r25, r1
    5f52:	a1 05       	cpc	r26, r1
    5f54:	b1 05       	cpc	r27, r1
    5f56:	11 f4       	brne	.+4      	; 0x5f5c <check_Operation+0x72>
		BYBY();
    5f58:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <BYBY>
	} else {
		//Welcome_Screen();
	}

}
    5f5c:	0f 90       	pop	r0
    5f5e:	0f 90       	pop	r0
    5f60:	0f 90       	pop	r0
    5f62:	0f 90       	pop	r0
    5f64:	cf 91       	pop	r28
    5f66:	df 91       	pop	r29
    5f68:	08 95       	ret

00005f6a <DOOR_OPeration>:

void DOOR_OPeration(void) {
    5f6a:	df 93       	push	r29
    5f6c:	cf 93       	push	r28
    5f6e:	cd b7       	in	r28, 0x3d	; 61
    5f70:	de b7       	in	r29, 0x3e	; 62
    5f72:	ae 97       	sbiw	r28, 0x2e	; 46
    5f74:	0f b6       	in	r0, 0x3f	; 63
    5f76:	f8 94       	cli
    5f78:	de bf       	out	0x3e, r29	; 62
    5f7a:	0f be       	out	0x3f, r0	; 63
    5f7c:	cd bf       	out	0x3d, r28	; 61
	u32 key;
	LCD_ClearScreen();
    5f7e:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	LCD_VoidSendStringToRowColumn(0, 0, "1-Open"); // open door
    5f82:	26 ea       	ldi	r18, 0xA6	; 166
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	80 e0       	ldi	r24, 0x00	; 0
    5f88:	60 e0       	ldi	r22, 0x00	; 0
    5f8a:	a9 01       	movw	r20, r18
    5f8c:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 0, "2-Close"); // close door
    5f90:	2d ea       	ldi	r18, 0xAD	; 173
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	60 e0       	ldi	r22, 0x00	; 0
    5f98:	a9 01       	movw	r20, r18
    5f9a:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 9, "4-Back"); // back to welcome screen
    5f9e:	25 eb       	ldi	r18, 0xB5	; 181
    5fa0:	30 e0       	ldi	r19, 0x00	; 0
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	69 e0       	ldi	r22, 0x09	; 9
    5fa6:	a9 01       	movw	r20, r18
    5fa8:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
//	key = KeyPad_getPressedKey();
	key = USART_VoidReseiveData();
    5fac:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    5fb0:	88 2f       	mov	r24, r24
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	a0 e0       	ldi	r26, 0x00	; 0
    5fb6:	b0 e0       	ldi	r27, 0x00	; 0
    5fb8:	8b a7       	std	Y+43, r24	; 0x2b
    5fba:	9c a7       	std	Y+44, r25	; 0x2c
    5fbc:	ad a7       	std	Y+45, r26	; 0x2d
    5fbe:	be a7       	std	Y+46, r27	; 0x2e
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	aa e7       	ldi	r26, 0x7A	; 122
    5fc6:	b4 e4       	ldi	r27, 0x44	; 68
    5fc8:	8f a3       	std	Y+39, r24	; 0x27
    5fca:	98 a7       	std	Y+40, r25	; 0x28
    5fcc:	a9 a7       	std	Y+41, r26	; 0x29
    5fce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    5fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    5fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    5fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	4a ef       	ldi	r20, 0xFA	; 250
    5fde:	54 e4       	ldi	r21, 0x44	; 68
    5fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5fe4:	dc 01       	movw	r26, r24
    5fe6:	cb 01       	movw	r24, r22
    5fe8:	8b a3       	std	Y+35, r24	; 0x23
    5fea:	9c a3       	std	Y+36, r25	; 0x24
    5fec:	ad a3       	std	Y+37, r26	; 0x25
    5fee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ff8:	20 e0       	ldi	r18, 0x00	; 0
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	40 e8       	ldi	r20, 0x80	; 128
    5ffe:	5f e3       	ldi	r21, 0x3F	; 63
    6000:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6004:	88 23       	and	r24, r24
    6006:	2c f4       	brge	.+10     	; 0x6012 <DOOR_OPeration+0xa8>
		__ticks = 1;
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	9a a3       	std	Y+34, r25	; 0x22
    600e:	89 a3       	std	Y+33, r24	; 0x21
    6010:	3f c0       	rjmp	.+126    	; 0x6090 <DOOR_OPeration+0x126>
	else if (__tmp > 65535)
    6012:	6b a1       	ldd	r22, Y+35	; 0x23
    6014:	7c a1       	ldd	r23, Y+36	; 0x24
    6016:	8d a1       	ldd	r24, Y+37	; 0x25
    6018:	9e a1       	ldd	r25, Y+38	; 0x26
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	3f ef       	ldi	r19, 0xFF	; 255
    601e:	4f e7       	ldi	r20, 0x7F	; 127
    6020:	57 e4       	ldi	r21, 0x47	; 71
    6022:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6026:	18 16       	cp	r1, r24
    6028:	4c f5       	brge	.+82     	; 0x607c <DOOR_OPeration+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    602a:	6f a1       	ldd	r22, Y+39	; 0x27
    602c:	78 a5       	ldd	r23, Y+40	; 0x28
    602e:	89 a5       	ldd	r24, Y+41	; 0x29
    6030:	9a a5       	ldd	r25, Y+42	; 0x2a
    6032:	20 e0       	ldi	r18, 0x00	; 0
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	40 e2       	ldi	r20, 0x20	; 32
    6038:	51 e4       	ldi	r21, 0x41	; 65
    603a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    603e:	dc 01       	movw	r26, r24
    6040:	cb 01       	movw	r24, r22
    6042:	bc 01       	movw	r22, r24
    6044:	cd 01       	movw	r24, r26
    6046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	9a a3       	std	Y+34, r25	; 0x22
    6050:	89 a3       	std	Y+33, r24	; 0x21
    6052:	0f c0       	rjmp	.+30     	; 0x6072 <DOOR_OPeration+0x108>
    6054:	88 ec       	ldi	r24, 0xC8	; 200
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	98 a3       	std	Y+32, r25	; 0x20
    605a:	8f 8f       	std	Y+31, r24	; 0x1f
    605c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    605e:	98 a1       	ldd	r25, Y+32	; 0x20
    6060:	01 97       	sbiw	r24, 0x01	; 1
    6062:	f1 f7       	brne	.-4      	; 0x6060 <DOOR_OPeration+0xf6>
    6064:	98 a3       	std	Y+32, r25	; 0x20
    6066:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6068:	89 a1       	ldd	r24, Y+33	; 0x21
    606a:	9a a1       	ldd	r25, Y+34	; 0x22
    606c:	01 97       	sbiw	r24, 0x01	; 1
    606e:	9a a3       	std	Y+34, r25	; 0x22
    6070:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6072:	89 a1       	ldd	r24, Y+33	; 0x21
    6074:	9a a1       	ldd	r25, Y+34	; 0x22
    6076:	00 97       	sbiw	r24, 0x00	; 0
    6078:	69 f7       	brne	.-38     	; 0x6054 <DOOR_OPeration+0xea>
    607a:	14 c0       	rjmp	.+40     	; 0x60a4 <DOOR_OPeration+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    607c:	6b a1       	ldd	r22, Y+35	; 0x23
    607e:	7c a1       	ldd	r23, Y+36	; 0x24
    6080:	8d a1       	ldd	r24, Y+37	; 0x25
    6082:	9e a1       	ldd	r25, Y+38	; 0x26
    6084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6088:	dc 01       	movw	r26, r24
    608a:	cb 01       	movw	r24, r22
    608c:	9a a3       	std	Y+34, r25	; 0x22
    608e:	89 a3       	std	Y+33, r24	; 0x21
    6090:	89 a1       	ldd	r24, Y+33	; 0x21
    6092:	9a a1       	ldd	r25, Y+34	; 0x22
    6094:	9e 8f       	std	Y+30, r25	; 0x1e
    6096:	8d 8f       	std	Y+29, r24	; 0x1d
    6098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    609a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    609c:	01 97       	sbiw	r24, 0x01	; 1
    609e:	f1 f7       	brne	.-4      	; 0x609c <DOOR_OPeration+0x132>
    60a0:	9e 8f       	std	Y+30, r25	; 0x1e
    60a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	if (key == '1') {
    60a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    60a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    60a8:	ad a5       	ldd	r26, Y+45	; 0x2d
    60aa:	be a5       	ldd	r27, Y+46	; 0x2e
    60ac:	81 33       	cpi	r24, 0x31	; 49
    60ae:	91 05       	cpc	r25, r1
    60b0:	a1 05       	cpc	r26, r1
    60b2:	b1 05       	cpc	r27, r1
    60b4:	09 f0       	breq	.+2      	; 0x60b8 <DOOR_OPeration+0x14e>
    60b6:	a6 c0       	rjmp	.+332    	; 0x6204 <DOOR_OPeration+0x29a>
		LCD_ClearScreen();
    60b8:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
		LCD_VoidSendStringToRowColumn(0, 0, "Openning door ...."); // open door
    60bc:	2c eb       	ldi	r18, 0xBC	; 188
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	80 e0       	ldi	r24, 0x00	; 0
    60c2:	60 e0       	ldi	r22, 0x00	; 0
    60c4:	a9 01       	movw	r20, r18
    60c6:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
		DIO_SetPinValue(PORTB, PIN4, HIGH);
    60ca:	81 e0       	ldi	r24, 0x01	; 1
    60cc:	64 e0       	ldi	r22, 0x04	; 4
    60ce:	41 e0       	ldi	r20, 0x01	; 1
    60d0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN5, HIGH);
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	65 e0       	ldi	r22, 0x05	; 5
    60d8:	41 e0       	ldi	r20, 0x01	; 1
    60da:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN6, LOW);
    60de:	81 e0       	ldi	r24, 0x01	; 1
    60e0:	66 e0       	ldi	r22, 0x06	; 6
    60e2:	40 e0       	ldi	r20, 0x00	; 0
    60e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN7, LOW);
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	67 e0       	ldi	r22, 0x07	; 7
    60ec:	40 e0       	ldi	r20, 0x00	; 0
    60ee:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    60f2:	80 e0       	ldi	r24, 0x00	; 0
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	aa e7       	ldi	r26, 0x7A	; 122
    60f8:	b4 e4       	ldi	r27, 0x44	; 68
    60fa:	89 8f       	std	Y+25, r24	; 0x19
    60fc:	9a 8f       	std	Y+26, r25	; 0x1a
    60fe:	ab 8f       	std	Y+27, r26	; 0x1b
    6100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6102:	69 8d       	ldd	r22, Y+25	; 0x19
    6104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    610a:	20 e0       	ldi	r18, 0x00	; 0
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	4a ef       	ldi	r20, 0xFA	; 250
    6110:	54 e4       	ldi	r21, 0x44	; 68
    6112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6116:	dc 01       	movw	r26, r24
    6118:	cb 01       	movw	r24, r22
    611a:	8d 8b       	std	Y+21, r24	; 0x15
    611c:	9e 8b       	std	Y+22, r25	; 0x16
    611e:	af 8b       	std	Y+23, r26	; 0x17
    6120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6122:	6d 89       	ldd	r22, Y+21	; 0x15
    6124:	7e 89       	ldd	r23, Y+22	; 0x16
    6126:	8f 89       	ldd	r24, Y+23	; 0x17
    6128:	98 8d       	ldd	r25, Y+24	; 0x18
    612a:	20 e0       	ldi	r18, 0x00	; 0
    612c:	30 e0       	ldi	r19, 0x00	; 0
    612e:	40 e8       	ldi	r20, 0x80	; 128
    6130:	5f e3       	ldi	r21, 0x3F	; 63
    6132:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6136:	88 23       	and	r24, r24
    6138:	2c f4       	brge	.+10     	; 0x6144 <DOOR_OPeration+0x1da>
		__ticks = 1;
    613a:	81 e0       	ldi	r24, 0x01	; 1
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	9c 8b       	std	Y+20, r25	; 0x14
    6140:	8b 8b       	std	Y+19, r24	; 0x13
    6142:	3f c0       	rjmp	.+126    	; 0x61c2 <DOOR_OPeration+0x258>
	else if (__tmp > 65535)
    6144:	6d 89       	ldd	r22, Y+21	; 0x15
    6146:	7e 89       	ldd	r23, Y+22	; 0x16
    6148:	8f 89       	ldd	r24, Y+23	; 0x17
    614a:	98 8d       	ldd	r25, Y+24	; 0x18
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	3f ef       	ldi	r19, 0xFF	; 255
    6150:	4f e7       	ldi	r20, 0x7F	; 127
    6152:	57 e4       	ldi	r21, 0x47	; 71
    6154:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6158:	18 16       	cp	r1, r24
    615a:	4c f5       	brge	.+82     	; 0x61ae <DOOR_OPeration+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    615c:	69 8d       	ldd	r22, Y+25	; 0x19
    615e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	30 e0       	ldi	r19, 0x00	; 0
    6168:	40 e2       	ldi	r20, 0x20	; 32
    616a:	51 e4       	ldi	r21, 0x41	; 65
    616c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6170:	dc 01       	movw	r26, r24
    6172:	cb 01       	movw	r24, r22
    6174:	bc 01       	movw	r22, r24
    6176:	cd 01       	movw	r24, r26
    6178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    617c:	dc 01       	movw	r26, r24
    617e:	cb 01       	movw	r24, r22
    6180:	9c 8b       	std	Y+20, r25	; 0x14
    6182:	8b 8b       	std	Y+19, r24	; 0x13
    6184:	0f c0       	rjmp	.+30     	; 0x61a4 <DOOR_OPeration+0x23a>
    6186:	88 ec       	ldi	r24, 0xC8	; 200
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	9a 8b       	std	Y+18, r25	; 0x12
    618c:	89 8b       	std	Y+17, r24	; 0x11
    618e:	89 89       	ldd	r24, Y+17	; 0x11
    6190:	9a 89       	ldd	r25, Y+18	; 0x12
    6192:	01 97       	sbiw	r24, 0x01	; 1
    6194:	f1 f7       	brne	.-4      	; 0x6192 <DOOR_OPeration+0x228>
    6196:	9a 8b       	std	Y+18, r25	; 0x12
    6198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    619a:	8b 89       	ldd	r24, Y+19	; 0x13
    619c:	9c 89       	ldd	r25, Y+20	; 0x14
    619e:	01 97       	sbiw	r24, 0x01	; 1
    61a0:	9c 8b       	std	Y+20, r25	; 0x14
    61a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a4:	8b 89       	ldd	r24, Y+19	; 0x13
    61a6:	9c 89       	ldd	r25, Y+20	; 0x14
    61a8:	00 97       	sbiw	r24, 0x00	; 0
    61aa:	69 f7       	brne	.-38     	; 0x6186 <DOOR_OPeration+0x21c>
    61ac:	14 c0       	rjmp	.+40     	; 0x61d6 <DOOR_OPeration+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ae:	6d 89       	ldd	r22, Y+21	; 0x15
    61b0:	7e 89       	ldd	r23, Y+22	; 0x16
    61b2:	8f 89       	ldd	r24, Y+23	; 0x17
    61b4:	98 8d       	ldd	r25, Y+24	; 0x18
    61b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    61ba:	dc 01       	movw	r26, r24
    61bc:	cb 01       	movw	r24, r22
    61be:	9c 8b       	std	Y+20, r25	; 0x14
    61c0:	8b 8b       	std	Y+19, r24	; 0x13
    61c2:	8b 89       	ldd	r24, Y+19	; 0x13
    61c4:	9c 89       	ldd	r25, Y+20	; 0x14
    61c6:	98 8b       	std	Y+16, r25	; 0x10
    61c8:	8f 87       	std	Y+15, r24	; 0x0f
    61ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    61cc:	98 89       	ldd	r25, Y+16	; 0x10
    61ce:	01 97       	sbiw	r24, 0x01	; 1
    61d0:	f1 f7       	brne	.-4      	; 0x61ce <DOOR_OPeration+0x264>
    61d2:	98 8b       	std	Y+16, r25	; 0x10
    61d4:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1000);

		DIO_SetPinValue(PORTB, PIN4, LOW);
    61d6:	81 e0       	ldi	r24, 0x01	; 1
    61d8:	64 e0       	ldi	r22, 0x04	; 4
    61da:	40 e0       	ldi	r20, 0x00	; 0
    61dc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN5, LOW);
    61e0:	81 e0       	ldi	r24, 0x01	; 1
    61e2:	65 e0       	ldi	r22, 0x05	; 5
    61e4:	40 e0       	ldi	r20, 0x00	; 0
    61e6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN6, LOW);
    61ea:	81 e0       	ldi	r24, 0x01	; 1
    61ec:	66 e0       	ldi	r22, 0x06	; 6
    61ee:	40 e0       	ldi	r20, 0x00	; 0
    61f0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN7, LOW);
    61f4:	81 e0       	ldi	r24, 0x01	; 1
    61f6:	67 e0       	ldi	r22, 0x07	; 7
    61f8:	40 e0       	ldi	r20, 0x00	; 0
    61fa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

		DOOR_OPeration();
    61fe:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <DOOR_OPeration>
    6202:	bb c0       	rjmp	.+374    	; 0x637a <DOOR_OPeration+0x410>
	} else if (key == '2') {
    6204:	8b a5       	ldd	r24, Y+43	; 0x2b
    6206:	9c a5       	ldd	r25, Y+44	; 0x2c
    6208:	ad a5       	ldd	r26, Y+45	; 0x2d
    620a:	be a5       	ldd	r27, Y+46	; 0x2e
    620c:	82 33       	cpi	r24, 0x32	; 50
    620e:	91 05       	cpc	r25, r1
    6210:	a1 05       	cpc	r26, r1
    6212:	b1 05       	cpc	r27, r1
    6214:	09 f0       	breq	.+2      	; 0x6218 <DOOR_OPeration+0x2ae>
    6216:	a6 c0       	rjmp	.+332    	; 0x6364 <DOOR_OPeration+0x3fa>
		LCD_ClearScreen();
    6218:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
		LCD_VoidSendStringToRowColumn(0, 0, "Closing door ...."); // open door
    621c:	2f ec       	ldi	r18, 0xCF	; 207
    621e:	30 e0       	ldi	r19, 0x00	; 0
    6220:	80 e0       	ldi	r24, 0x00	; 0
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	a9 01       	movw	r20, r18
    6226:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
		DIO_SetPinValue(PORTB, PIN4, LOW);
    622a:	81 e0       	ldi	r24, 0x01	; 1
    622c:	64 e0       	ldi	r22, 0x04	; 4
    622e:	40 e0       	ldi	r20, 0x00	; 0
    6230:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN5, LOW);
    6234:	81 e0       	ldi	r24, 0x01	; 1
    6236:	65 e0       	ldi	r22, 0x05	; 5
    6238:	40 e0       	ldi	r20, 0x00	; 0
    623a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN6, HIGH);
    623e:	81 e0       	ldi	r24, 0x01	; 1
    6240:	66 e0       	ldi	r22, 0x06	; 6
    6242:	41 e0       	ldi	r20, 0x01	; 1
    6244:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN7, HIGH);
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	67 e0       	ldi	r22, 0x07	; 7
    624c:	41 e0       	ldi	r20, 0x01	; 1
    624e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    6252:	80 e0       	ldi	r24, 0x00	; 0
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	aa e7       	ldi	r26, 0x7A	; 122
    6258:	b4 e4       	ldi	r27, 0x44	; 68
    625a:	8b 87       	std	Y+11, r24	; 0x0b
    625c:	9c 87       	std	Y+12, r25	; 0x0c
    625e:	ad 87       	std	Y+13, r26	; 0x0d
    6260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6262:	6b 85       	ldd	r22, Y+11	; 0x0b
    6264:	7c 85       	ldd	r23, Y+12	; 0x0c
    6266:	8d 85       	ldd	r24, Y+13	; 0x0d
    6268:	9e 85       	ldd	r25, Y+14	; 0x0e
    626a:	20 e0       	ldi	r18, 0x00	; 0
    626c:	30 e0       	ldi	r19, 0x00	; 0
    626e:	4a ef       	ldi	r20, 0xFA	; 250
    6270:	54 e4       	ldi	r21, 0x44	; 68
    6272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6276:	dc 01       	movw	r26, r24
    6278:	cb 01       	movw	r24, r22
    627a:	8f 83       	std	Y+7, r24	; 0x07
    627c:	98 87       	std	Y+8, r25	; 0x08
    627e:	a9 87       	std	Y+9, r26	; 0x09
    6280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6282:	6f 81       	ldd	r22, Y+7	; 0x07
    6284:	78 85       	ldd	r23, Y+8	; 0x08
    6286:	89 85       	ldd	r24, Y+9	; 0x09
    6288:	9a 85       	ldd	r25, Y+10	; 0x0a
    628a:	20 e0       	ldi	r18, 0x00	; 0
    628c:	30 e0       	ldi	r19, 0x00	; 0
    628e:	40 e8       	ldi	r20, 0x80	; 128
    6290:	5f e3       	ldi	r21, 0x3F	; 63
    6292:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6296:	88 23       	and	r24, r24
    6298:	2c f4       	brge	.+10     	; 0x62a4 <DOOR_OPeration+0x33a>
		__ticks = 1;
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	9e 83       	std	Y+6, r25	; 0x06
    62a0:	8d 83       	std	Y+5, r24	; 0x05
    62a2:	3f c0       	rjmp	.+126    	; 0x6322 <DOOR_OPeration+0x3b8>
	else if (__tmp > 65535)
    62a4:	6f 81       	ldd	r22, Y+7	; 0x07
    62a6:	78 85       	ldd	r23, Y+8	; 0x08
    62a8:	89 85       	ldd	r24, Y+9	; 0x09
    62aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ac:	20 e0       	ldi	r18, 0x00	; 0
    62ae:	3f ef       	ldi	r19, 0xFF	; 255
    62b0:	4f e7       	ldi	r20, 0x7F	; 127
    62b2:	57 e4       	ldi	r21, 0x47	; 71
    62b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    62b8:	18 16       	cp	r1, r24
    62ba:	4c f5       	brge	.+82     	; 0x630e <DOOR_OPeration+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    62be:	7c 85       	ldd	r23, Y+12	; 0x0c
    62c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e2       	ldi	r20, 0x20	; 32
    62ca:	51 e4       	ldi	r21, 0x41	; 65
    62cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    62d0:	dc 01       	movw	r26, r24
    62d2:	cb 01       	movw	r24, r22
    62d4:	bc 01       	movw	r22, r24
    62d6:	cd 01       	movw	r24, r26
    62d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    62dc:	dc 01       	movw	r26, r24
    62de:	cb 01       	movw	r24, r22
    62e0:	9e 83       	std	Y+6, r25	; 0x06
    62e2:	8d 83       	std	Y+5, r24	; 0x05
    62e4:	0f c0       	rjmp	.+30     	; 0x6304 <DOOR_OPeration+0x39a>
    62e6:	88 ec       	ldi	r24, 0xC8	; 200
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	9c 83       	std	Y+4, r25	; 0x04
    62ec:	8b 83       	std	Y+3, r24	; 0x03
    62ee:	8b 81       	ldd	r24, Y+3	; 0x03
    62f0:	9c 81       	ldd	r25, Y+4	; 0x04
    62f2:	01 97       	sbiw	r24, 0x01	; 1
    62f4:	f1 f7       	brne	.-4      	; 0x62f2 <DOOR_OPeration+0x388>
    62f6:	9c 83       	std	Y+4, r25	; 0x04
    62f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62fa:	8d 81       	ldd	r24, Y+5	; 0x05
    62fc:	9e 81       	ldd	r25, Y+6	; 0x06
    62fe:	01 97       	sbiw	r24, 0x01	; 1
    6300:	9e 83       	std	Y+6, r25	; 0x06
    6302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6304:	8d 81       	ldd	r24, Y+5	; 0x05
    6306:	9e 81       	ldd	r25, Y+6	; 0x06
    6308:	00 97       	sbiw	r24, 0x00	; 0
    630a:	69 f7       	brne	.-38     	; 0x62e6 <DOOR_OPeration+0x37c>
    630c:	14 c0       	rjmp	.+40     	; 0x6336 <DOOR_OPeration+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    630e:	6f 81       	ldd	r22, Y+7	; 0x07
    6310:	78 85       	ldd	r23, Y+8	; 0x08
    6312:	89 85       	ldd	r24, Y+9	; 0x09
    6314:	9a 85       	ldd	r25, Y+10	; 0x0a
    6316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    631a:	dc 01       	movw	r26, r24
    631c:	cb 01       	movw	r24, r22
    631e:	9e 83       	std	Y+6, r25	; 0x06
    6320:	8d 83       	std	Y+5, r24	; 0x05
    6322:	8d 81       	ldd	r24, Y+5	; 0x05
    6324:	9e 81       	ldd	r25, Y+6	; 0x06
    6326:	9a 83       	std	Y+2, r25	; 0x02
    6328:	89 83       	std	Y+1, r24	; 0x01
    632a:	89 81       	ldd	r24, Y+1	; 0x01
    632c:	9a 81       	ldd	r25, Y+2	; 0x02
    632e:	01 97       	sbiw	r24, 0x01	; 1
    6330:	f1 f7       	brne	.-4      	; 0x632e <DOOR_OPeration+0x3c4>
    6332:	9a 83       	std	Y+2, r25	; 0x02
    6334:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
		DIO_SetPinValue(PORTB, PIN4, LOW);
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	64 e0       	ldi	r22, 0x04	; 4
    633a:	40 e0       	ldi	r20, 0x00	; 0
    633c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN5, LOW);
    6340:	81 e0       	ldi	r24, 0x01	; 1
    6342:	65 e0       	ldi	r22, 0x05	; 5
    6344:	40 e0       	ldi	r20, 0x00	; 0
    6346:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN6, LOW);
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	66 e0       	ldi	r22, 0x06	; 6
    634e:	40 e0       	ldi	r20, 0x00	; 0
    6350:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTB, PIN7, LOW);
    6354:	81 e0       	ldi	r24, 0x01	; 1
    6356:	67 e0       	ldi	r22, 0x07	; 7
    6358:	40 e0       	ldi	r20, 0x00	; 0
    635a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>

		DOOR_OPeration();
    635e:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <DOOR_OPeration>
    6362:	0b c0       	rjmp	.+22     	; 0x637a <DOOR_OPeration+0x410>
	} else if (key == '4') {
    6364:	8b a5       	ldd	r24, Y+43	; 0x2b
    6366:	9c a5       	ldd	r25, Y+44	; 0x2c
    6368:	ad a5       	ldd	r26, Y+45	; 0x2d
    636a:	be a5       	ldd	r27, Y+46	; 0x2e
    636c:	84 33       	cpi	r24, 0x34	; 52
    636e:	91 05       	cpc	r25, r1
    6370:	a1 05       	cpc	r26, r1
    6372:	b1 05       	cpc	r27, r1
    6374:	11 f0       	breq	.+4      	; 0x637a <DOOR_OPeration+0x410>
		return;
	} else {
		DOOR_OPeration();
    6376:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <DOOR_OPeration>
	}

}
    637a:	ae 96       	adiw	r28, 0x2e	; 46
    637c:	0f b6       	in	r0, 0x3f	; 63
    637e:	f8 94       	cli
    6380:	de bf       	out	0x3e, r29	; 62
    6382:	0f be       	out	0x3f, r0	; 63
    6384:	cd bf       	out	0x3d, r28	; 61
    6386:	cf 91       	pop	r28
    6388:	df 91       	pop	r29
    638a:	08 95       	ret

0000638c <Light_OPeration>:

void Light_OPeration(void) {
    638c:	df 93       	push	r29
    638e:	cf 93       	push	r28
    6390:	cd b7       	in	r28, 0x3d	; 61
    6392:	de b7       	in	r29, 0x3e	; 62
    6394:	ae 97       	sbiw	r28, 0x2e	; 46
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	f8 94       	cli
    639a:	de bf       	out	0x3e, r29	; 62
    639c:	0f be       	out	0x3f, r0	; 63
    639e:	cd bf       	out	0x3d, r28	; 61
	u32 key;
	LCD_ClearScreen();
    63a0:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	LCD_VoidSendStringToRowColumn(0, 0, "1-LED ON"); // open door
    63a4:	21 ee       	ldi	r18, 0xE1	; 225
    63a6:	30 e0       	ldi	r19, 0x00	; 0
    63a8:	80 e0       	ldi	r24, 0x00	; 0
    63aa:	60 e0       	ldi	r22, 0x00	; 0
    63ac:	a9 01       	movw	r20, r18
    63ae:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 0, "2-LED OF"); // close door
    63b2:	2a ee       	ldi	r18, 0xEA	; 234
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	81 e0       	ldi	r24, 0x01	; 1
    63b8:	60 e0       	ldi	r22, 0x00	; 0
    63ba:	a9 01       	movw	r20, r18
    63bc:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
	LCD_VoidSendStringToRowColumn(1, 10, "4-Back"); // back to welcome screen
    63c0:	25 eb       	ldi	r18, 0xB5	; 181
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	81 e0       	ldi	r24, 0x01	; 1
    63c6:	6a e0       	ldi	r22, 0x0A	; 10
    63c8:	a9 01       	movw	r20, r18
    63ca:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
//	key = KeyPad_getPressedKey();
	key = USART_VoidReseiveData();
    63ce:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    63d2:	88 2f       	mov	r24, r24
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	a0 e0       	ldi	r26, 0x00	; 0
    63d8:	b0 e0       	ldi	r27, 0x00	; 0
    63da:	8b a7       	std	Y+43, r24	; 0x2b
    63dc:	9c a7       	std	Y+44, r25	; 0x2c
    63de:	ad a7       	std	Y+45, r26	; 0x2d
    63e0:	be a7       	std	Y+46, r27	; 0x2e
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	aa e7       	ldi	r26, 0x7A	; 122
    63e8:	b4 e4       	ldi	r27, 0x44	; 68
    63ea:	8f a3       	std	Y+39, r24	; 0x27
    63ec:	98 a7       	std	Y+40, r25	; 0x28
    63ee:	a9 a7       	std	Y+41, r26	; 0x29
    63f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63f2:	6f a1       	ldd	r22, Y+39	; 0x27
    63f4:	78 a5       	ldd	r23, Y+40	; 0x28
    63f6:	89 a5       	ldd	r24, Y+41	; 0x29
    63f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    63fa:	20 e0       	ldi	r18, 0x00	; 0
    63fc:	30 e0       	ldi	r19, 0x00	; 0
    63fe:	4a ef       	ldi	r20, 0xFA	; 250
    6400:	54 e4       	ldi	r21, 0x44	; 68
    6402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6406:	dc 01       	movw	r26, r24
    6408:	cb 01       	movw	r24, r22
    640a:	8b a3       	std	Y+35, r24	; 0x23
    640c:	9c a3       	std	Y+36, r25	; 0x24
    640e:	ad a3       	std	Y+37, r26	; 0x25
    6410:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6412:	6b a1       	ldd	r22, Y+35	; 0x23
    6414:	7c a1       	ldd	r23, Y+36	; 0x24
    6416:	8d a1       	ldd	r24, Y+37	; 0x25
    6418:	9e a1       	ldd	r25, Y+38	; 0x26
    641a:	20 e0       	ldi	r18, 0x00	; 0
    641c:	30 e0       	ldi	r19, 0x00	; 0
    641e:	40 e8       	ldi	r20, 0x80	; 128
    6420:	5f e3       	ldi	r21, 0x3F	; 63
    6422:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6426:	88 23       	and	r24, r24
    6428:	2c f4       	brge	.+10     	; 0x6434 <Light_OPeration+0xa8>
		__ticks = 1;
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	9a a3       	std	Y+34, r25	; 0x22
    6430:	89 a3       	std	Y+33, r24	; 0x21
    6432:	3f c0       	rjmp	.+126    	; 0x64b2 <Light_OPeration+0x126>
	else if (__tmp > 65535)
    6434:	6b a1       	ldd	r22, Y+35	; 0x23
    6436:	7c a1       	ldd	r23, Y+36	; 0x24
    6438:	8d a1       	ldd	r24, Y+37	; 0x25
    643a:	9e a1       	ldd	r25, Y+38	; 0x26
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	3f ef       	ldi	r19, 0xFF	; 255
    6440:	4f e7       	ldi	r20, 0x7F	; 127
    6442:	57 e4       	ldi	r21, 0x47	; 71
    6444:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6448:	18 16       	cp	r1, r24
    644a:	4c f5       	brge	.+82     	; 0x649e <Light_OPeration+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    644c:	6f a1       	ldd	r22, Y+39	; 0x27
    644e:	78 a5       	ldd	r23, Y+40	; 0x28
    6450:	89 a5       	ldd	r24, Y+41	; 0x29
    6452:	9a a5       	ldd	r25, Y+42	; 0x2a
    6454:	20 e0       	ldi	r18, 0x00	; 0
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	40 e2       	ldi	r20, 0x20	; 32
    645a:	51 e4       	ldi	r21, 0x41	; 65
    645c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6460:	dc 01       	movw	r26, r24
    6462:	cb 01       	movw	r24, r22
    6464:	bc 01       	movw	r22, r24
    6466:	cd 01       	movw	r24, r26
    6468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	9a a3       	std	Y+34, r25	; 0x22
    6472:	89 a3       	std	Y+33, r24	; 0x21
    6474:	0f c0       	rjmp	.+30     	; 0x6494 <Light_OPeration+0x108>
    6476:	88 ec       	ldi	r24, 0xC8	; 200
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	98 a3       	std	Y+32, r25	; 0x20
    647c:	8f 8f       	std	Y+31, r24	; 0x1f
    647e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6480:	98 a1       	ldd	r25, Y+32	; 0x20
    6482:	01 97       	sbiw	r24, 0x01	; 1
    6484:	f1 f7       	brne	.-4      	; 0x6482 <Light_OPeration+0xf6>
    6486:	98 a3       	std	Y+32, r25	; 0x20
    6488:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    648a:	89 a1       	ldd	r24, Y+33	; 0x21
    648c:	9a a1       	ldd	r25, Y+34	; 0x22
    648e:	01 97       	sbiw	r24, 0x01	; 1
    6490:	9a a3       	std	Y+34, r25	; 0x22
    6492:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6494:	89 a1       	ldd	r24, Y+33	; 0x21
    6496:	9a a1       	ldd	r25, Y+34	; 0x22
    6498:	00 97       	sbiw	r24, 0x00	; 0
    649a:	69 f7       	brne	.-38     	; 0x6476 <Light_OPeration+0xea>
    649c:	14 c0       	rjmp	.+40     	; 0x64c6 <Light_OPeration+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    649e:	6b a1       	ldd	r22, Y+35	; 0x23
    64a0:	7c a1       	ldd	r23, Y+36	; 0x24
    64a2:	8d a1       	ldd	r24, Y+37	; 0x25
    64a4:	9e a1       	ldd	r25, Y+38	; 0x26
    64a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    64aa:	dc 01       	movw	r26, r24
    64ac:	cb 01       	movw	r24, r22
    64ae:	9a a3       	std	Y+34, r25	; 0x22
    64b0:	89 a3       	std	Y+33, r24	; 0x21
    64b2:	89 a1       	ldd	r24, Y+33	; 0x21
    64b4:	9a a1       	ldd	r25, Y+34	; 0x22
    64b6:	9e 8f       	std	Y+30, r25	; 0x1e
    64b8:	8d 8f       	std	Y+29, r24	; 0x1d
    64ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    64bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    64be:	01 97       	sbiw	r24, 0x01	; 1
    64c0:	f1 f7       	brne	.-4      	; 0x64be <Light_OPeration+0x132>
    64c2:	9e 8f       	std	Y+30, r25	; 0x1e
    64c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	if (key == '1') {
    64c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    64c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    64ca:	ad a5       	ldd	r26, Y+45	; 0x2d
    64cc:	be a5       	ldd	r27, Y+46	; 0x2e
    64ce:	81 33       	cpi	r24, 0x31	; 49
    64d0:	91 05       	cpc	r25, r1
    64d2:	a1 05       	cpc	r26, r1
    64d4:	b1 05       	cpc	r27, r1
    64d6:	09 f0       	breq	.+2      	; 0x64da <Light_OPeration+0x14e>
    64d8:	83 c0       	rjmp	.+262    	; 0x65e0 <Light_OPeration+0x254>
		LCD_ClearScreen();
    64da:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
		LCD_VoidSendStringToRowColumn(0, 0, "LED ON  ...."); // open door
    64de:	23 ef       	ldi	r18, 0xF3	; 243
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	80 e0       	ldi	r24, 0x00	; 0
    64e4:	60 e0       	ldi	r22, 0x00	; 0
    64e6:	a9 01       	movw	r20, r18
    64e8:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
		DIO_SetPinValue(PORTA, PIN0, HIGH);
    64ec:	80 e0       	ldi	r24, 0x00	; 0
    64ee:	60 e0       	ldi	r22, 0x00	; 0
    64f0:	41 e0       	ldi	r20, 0x01	; 1
    64f2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    64f6:	80 e0       	ldi	r24, 0x00	; 0
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	aa e7       	ldi	r26, 0x7A	; 122
    64fc:	b4 e4       	ldi	r27, 0x44	; 68
    64fe:	89 8f       	std	Y+25, r24	; 0x19
    6500:	9a 8f       	std	Y+26, r25	; 0x1a
    6502:	ab 8f       	std	Y+27, r26	; 0x1b
    6504:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6506:	69 8d       	ldd	r22, Y+25	; 0x19
    6508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    650a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    650c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    650e:	20 e0       	ldi	r18, 0x00	; 0
    6510:	30 e0       	ldi	r19, 0x00	; 0
    6512:	4a ef       	ldi	r20, 0xFA	; 250
    6514:	54 e4       	ldi	r21, 0x44	; 68
    6516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    651a:	dc 01       	movw	r26, r24
    651c:	cb 01       	movw	r24, r22
    651e:	8d 8b       	std	Y+21, r24	; 0x15
    6520:	9e 8b       	std	Y+22, r25	; 0x16
    6522:	af 8b       	std	Y+23, r26	; 0x17
    6524:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6526:	6d 89       	ldd	r22, Y+21	; 0x15
    6528:	7e 89       	ldd	r23, Y+22	; 0x16
    652a:	8f 89       	ldd	r24, Y+23	; 0x17
    652c:	98 8d       	ldd	r25, Y+24	; 0x18
    652e:	20 e0       	ldi	r18, 0x00	; 0
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	40 e8       	ldi	r20, 0x80	; 128
    6534:	5f e3       	ldi	r21, 0x3F	; 63
    6536:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    653a:	88 23       	and	r24, r24
    653c:	2c f4       	brge	.+10     	; 0x6548 <Light_OPeration+0x1bc>
		__ticks = 1;
    653e:	81 e0       	ldi	r24, 0x01	; 1
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	9c 8b       	std	Y+20, r25	; 0x14
    6544:	8b 8b       	std	Y+19, r24	; 0x13
    6546:	3f c0       	rjmp	.+126    	; 0x65c6 <Light_OPeration+0x23a>
	else if (__tmp > 65535)
    6548:	6d 89       	ldd	r22, Y+21	; 0x15
    654a:	7e 89       	ldd	r23, Y+22	; 0x16
    654c:	8f 89       	ldd	r24, Y+23	; 0x17
    654e:	98 8d       	ldd	r25, Y+24	; 0x18
    6550:	20 e0       	ldi	r18, 0x00	; 0
    6552:	3f ef       	ldi	r19, 0xFF	; 255
    6554:	4f e7       	ldi	r20, 0x7F	; 127
    6556:	57 e4       	ldi	r21, 0x47	; 71
    6558:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    655c:	18 16       	cp	r1, r24
    655e:	4c f5       	brge	.+82     	; 0x65b2 <Light_OPeration+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6560:	69 8d       	ldd	r22, Y+25	; 0x19
    6562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6568:	20 e0       	ldi	r18, 0x00	; 0
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	40 e2       	ldi	r20, 0x20	; 32
    656e:	51 e4       	ldi	r21, 0x41	; 65
    6570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6574:	dc 01       	movw	r26, r24
    6576:	cb 01       	movw	r24, r22
    6578:	bc 01       	movw	r22, r24
    657a:	cd 01       	movw	r24, r26
    657c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6580:	dc 01       	movw	r26, r24
    6582:	cb 01       	movw	r24, r22
    6584:	9c 8b       	std	Y+20, r25	; 0x14
    6586:	8b 8b       	std	Y+19, r24	; 0x13
    6588:	0f c0       	rjmp	.+30     	; 0x65a8 <Light_OPeration+0x21c>
    658a:	88 ec       	ldi	r24, 0xC8	; 200
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	9a 8b       	std	Y+18, r25	; 0x12
    6590:	89 8b       	std	Y+17, r24	; 0x11
    6592:	89 89       	ldd	r24, Y+17	; 0x11
    6594:	9a 89       	ldd	r25, Y+18	; 0x12
    6596:	01 97       	sbiw	r24, 0x01	; 1
    6598:	f1 f7       	brne	.-4      	; 0x6596 <Light_OPeration+0x20a>
    659a:	9a 8b       	std	Y+18, r25	; 0x12
    659c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    659e:	8b 89       	ldd	r24, Y+19	; 0x13
    65a0:	9c 89       	ldd	r25, Y+20	; 0x14
    65a2:	01 97       	sbiw	r24, 0x01	; 1
    65a4:	9c 8b       	std	Y+20, r25	; 0x14
    65a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65a8:	8b 89       	ldd	r24, Y+19	; 0x13
    65aa:	9c 89       	ldd	r25, Y+20	; 0x14
    65ac:	00 97       	sbiw	r24, 0x00	; 0
    65ae:	69 f7       	brne	.-38     	; 0x658a <Light_OPeration+0x1fe>
    65b0:	14 c0       	rjmp	.+40     	; 0x65da <Light_OPeration+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65b2:	6d 89       	ldd	r22, Y+21	; 0x15
    65b4:	7e 89       	ldd	r23, Y+22	; 0x16
    65b6:	8f 89       	ldd	r24, Y+23	; 0x17
    65b8:	98 8d       	ldd	r25, Y+24	; 0x18
    65ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    65be:	dc 01       	movw	r26, r24
    65c0:	cb 01       	movw	r24, r22
    65c2:	9c 8b       	std	Y+20, r25	; 0x14
    65c4:	8b 8b       	std	Y+19, r24	; 0x13
    65c6:	8b 89       	ldd	r24, Y+19	; 0x13
    65c8:	9c 89       	ldd	r25, Y+20	; 0x14
    65ca:	98 8b       	std	Y+16, r25	; 0x10
    65cc:	8f 87       	std	Y+15, r24	; 0x0f
    65ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    65d0:	98 89       	ldd	r25, Y+16	; 0x10
    65d2:	01 97       	sbiw	r24, 0x01	; 1
    65d4:	f1 f7       	brne	.-4      	; 0x65d2 <Light_OPeration+0x246>
    65d6:	98 8b       	std	Y+16, r25	; 0x10
    65d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		Light_OPeration();
    65da:	0e 94 c6 31 	call	0x638c	; 0x638c <Light_OPeration>
    65de:	98 c0       	rjmp	.+304    	; 0x6710 <Light_OPeration+0x384>
	} else if (key == '2') {
    65e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    65e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    65e4:	ad a5       	ldd	r26, Y+45	; 0x2d
    65e6:	be a5       	ldd	r27, Y+46	; 0x2e
    65e8:	82 33       	cpi	r24, 0x32	; 50
    65ea:	91 05       	cpc	r25, r1
    65ec:	a1 05       	cpc	r26, r1
    65ee:	b1 05       	cpc	r27, r1
    65f0:	09 f0       	breq	.+2      	; 0x65f4 <Light_OPeration+0x268>
    65f2:	83 c0       	rjmp	.+262    	; 0x66fa <Light_OPeration+0x36e>
		LCD_ClearScreen();
    65f4:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
		LCD_VoidSendStringToRowColumn(0, 0, "LED OF ...."); // open door
    65f8:	20 e0       	ldi	r18, 0x00	; 0
    65fa:	31 e0       	ldi	r19, 0x01	; 1
    65fc:	80 e0       	ldi	r24, 0x00	; 0
    65fe:	60 e0       	ldi	r22, 0x00	; 0
    6600:	a9 01       	movw	r20, r18
    6602:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
		DIO_SetPinValue(PORTA, PIN0, LOW);
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	60 e0       	ldi	r22, 0x00	; 0
    660a:	40 e0       	ldi	r20, 0x00	; 0
    660c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	aa e7       	ldi	r26, 0x7A	; 122
    6616:	b4 e4       	ldi	r27, 0x44	; 68
    6618:	8b 87       	std	Y+11, r24	; 0x0b
    661a:	9c 87       	std	Y+12, r25	; 0x0c
    661c:	ad 87       	std	Y+13, r26	; 0x0d
    661e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6620:	6b 85       	ldd	r22, Y+11	; 0x0b
    6622:	7c 85       	ldd	r23, Y+12	; 0x0c
    6624:	8d 85       	ldd	r24, Y+13	; 0x0d
    6626:	9e 85       	ldd	r25, Y+14	; 0x0e
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	4a ef       	ldi	r20, 0xFA	; 250
    662e:	54 e4       	ldi	r21, 0x44	; 68
    6630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6634:	dc 01       	movw	r26, r24
    6636:	cb 01       	movw	r24, r22
    6638:	8f 83       	std	Y+7, r24	; 0x07
    663a:	98 87       	std	Y+8, r25	; 0x08
    663c:	a9 87       	std	Y+9, r26	; 0x09
    663e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6640:	6f 81       	ldd	r22, Y+7	; 0x07
    6642:	78 85       	ldd	r23, Y+8	; 0x08
    6644:	89 85       	ldd	r24, Y+9	; 0x09
    6646:	9a 85       	ldd	r25, Y+10	; 0x0a
    6648:	20 e0       	ldi	r18, 0x00	; 0
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	40 e8       	ldi	r20, 0x80	; 128
    664e:	5f e3       	ldi	r21, 0x3F	; 63
    6650:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6654:	88 23       	and	r24, r24
    6656:	2c f4       	brge	.+10     	; 0x6662 <Light_OPeration+0x2d6>
		__ticks = 1;
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	9e 83       	std	Y+6, r25	; 0x06
    665e:	8d 83       	std	Y+5, r24	; 0x05
    6660:	3f c0       	rjmp	.+126    	; 0x66e0 <Light_OPeration+0x354>
	else if (__tmp > 65535)
    6662:	6f 81       	ldd	r22, Y+7	; 0x07
    6664:	78 85       	ldd	r23, Y+8	; 0x08
    6666:	89 85       	ldd	r24, Y+9	; 0x09
    6668:	9a 85       	ldd	r25, Y+10	; 0x0a
    666a:	20 e0       	ldi	r18, 0x00	; 0
    666c:	3f ef       	ldi	r19, 0xFF	; 255
    666e:	4f e7       	ldi	r20, 0x7F	; 127
    6670:	57 e4       	ldi	r21, 0x47	; 71
    6672:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6676:	18 16       	cp	r1, r24
    6678:	4c f5       	brge	.+82     	; 0x66cc <Light_OPeration+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    667a:	6b 85       	ldd	r22, Y+11	; 0x0b
    667c:	7c 85       	ldd	r23, Y+12	; 0x0c
    667e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6680:	9e 85       	ldd	r25, Y+14	; 0x0e
    6682:	20 e0       	ldi	r18, 0x00	; 0
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	40 e2       	ldi	r20, 0x20	; 32
    6688:	51 e4       	ldi	r21, 0x41	; 65
    668a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    668e:	dc 01       	movw	r26, r24
    6690:	cb 01       	movw	r24, r22
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9e 83       	std	Y+6, r25	; 0x06
    66a0:	8d 83       	std	Y+5, r24	; 0x05
    66a2:	0f c0       	rjmp	.+30     	; 0x66c2 <Light_OPeration+0x336>
    66a4:	88 ec       	ldi	r24, 0xC8	; 200
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	9c 83       	std	Y+4, r25	; 0x04
    66aa:	8b 83       	std	Y+3, r24	; 0x03
    66ac:	8b 81       	ldd	r24, Y+3	; 0x03
    66ae:	9c 81       	ldd	r25, Y+4	; 0x04
    66b0:	01 97       	sbiw	r24, 0x01	; 1
    66b2:	f1 f7       	brne	.-4      	; 0x66b0 <Light_OPeration+0x324>
    66b4:	9c 83       	std	Y+4, r25	; 0x04
    66b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66b8:	8d 81       	ldd	r24, Y+5	; 0x05
    66ba:	9e 81       	ldd	r25, Y+6	; 0x06
    66bc:	01 97       	sbiw	r24, 0x01	; 1
    66be:	9e 83       	std	Y+6, r25	; 0x06
    66c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66c2:	8d 81       	ldd	r24, Y+5	; 0x05
    66c4:	9e 81       	ldd	r25, Y+6	; 0x06
    66c6:	00 97       	sbiw	r24, 0x00	; 0
    66c8:	69 f7       	brne	.-38     	; 0x66a4 <Light_OPeration+0x318>
    66ca:	14 c0       	rjmp	.+40     	; 0x66f4 <Light_OPeration+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66cc:	6f 81       	ldd	r22, Y+7	; 0x07
    66ce:	78 85       	ldd	r23, Y+8	; 0x08
    66d0:	89 85       	ldd	r24, Y+9	; 0x09
    66d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    66d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	9e 83       	std	Y+6, r25	; 0x06
    66de:	8d 83       	std	Y+5, r24	; 0x05
    66e0:	8d 81       	ldd	r24, Y+5	; 0x05
    66e2:	9e 81       	ldd	r25, Y+6	; 0x06
    66e4:	9a 83       	std	Y+2, r25	; 0x02
    66e6:	89 83       	std	Y+1, r24	; 0x01
    66e8:	89 81       	ldd	r24, Y+1	; 0x01
    66ea:	9a 81       	ldd	r25, Y+2	; 0x02
    66ec:	01 97       	sbiw	r24, 0x01	; 1
    66ee:	f1 f7       	brne	.-4      	; 0x66ec <Light_OPeration+0x360>
    66f0:	9a 83       	std	Y+2, r25	; 0x02
    66f2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		Light_OPeration();
    66f4:	0e 94 c6 31 	call	0x638c	; 0x638c <Light_OPeration>
    66f8:	0b c0       	rjmp	.+22     	; 0x6710 <Light_OPeration+0x384>
	} else if (key == '4') {
    66fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    66fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    66fe:	ad a5       	ldd	r26, Y+45	; 0x2d
    6700:	be a5       	ldd	r27, Y+46	; 0x2e
    6702:	84 33       	cpi	r24, 0x34	; 52
    6704:	91 05       	cpc	r25, r1
    6706:	a1 05       	cpc	r26, r1
    6708:	b1 05       	cpc	r27, r1
    670a:	11 f0       	breq	.+4      	; 0x6710 <Light_OPeration+0x384>
		return;
	} else {
		Light_OPeration();
    670c:	0e 94 c6 31 	call	0x638c	; 0x638c <Light_OPeration>
	}

}
    6710:	ae 96       	adiw	r28, 0x2e	; 46
    6712:	0f b6       	in	r0, 0x3f	; 63
    6714:	f8 94       	cli
    6716:	de bf       	out	0x3e, r29	; 62
    6718:	0f be       	out	0x3f, r0	; 63
    671a:	cd bf       	out	0x3d, r28	; 61
    671c:	cf 91       	pop	r28
    671e:	df 91       	pop	r29
    6720:	08 95       	ret

00006722 <Temp_OPeration>:
 }
 }

 }
 */
void Temp_OPeration(void) {
    6722:	df 93       	push	r29
    6724:	cf 93       	push	r28
    6726:	cd b7       	in	r28, 0x3d	; 61
    6728:	de b7       	in	r29, 0x3e	; 62
    672a:	ea 97       	sbiw	r28, 0x3a	; 58
    672c:	0f b6       	in	r0, 0x3f	; 63
    672e:	f8 94       	cli
    6730:	de bf       	out	0x3e, r29	; 62
    6732:	0f be       	out	0x3f, r0	; 63
    6734:	cd bf       	out	0x3d, r28	; 61
	u32 key = 0, temp = 0, analog_value = 0, digital_value = 0;
    6736:	1b aa       	std	Y+51, r1	; 0x33
    6738:	1c aa       	std	Y+52, r1	; 0x34
    673a:	1d aa       	std	Y+53, r1	; 0x35
    673c:	1e aa       	std	Y+54, r1	; 0x36
    673e:	1f a6       	std	Y+47, r1	; 0x2f
    6740:	18 aa       	std	Y+48, r1	; 0x30
    6742:	19 aa       	std	Y+49, r1	; 0x31
    6744:	1a aa       	std	Y+50, r1	; 0x32
    6746:	1b a6       	std	Y+43, r1	; 0x2b
    6748:	1c a6       	std	Y+44, r1	; 0x2c
    674a:	1d a6       	std	Y+45, r1	; 0x2d
    674c:	1e a6       	std	Y+46, r1	; 0x2e
    674e:	1f aa       	std	Y+55, r1	; 0x37
    6750:	18 ae       	std	Y+56, r1	; 0x38
    6752:	19 ae       	std	Y+57, r1	; 0x39
    6754:	1a ae       	std	Y+58, r1	; 0x3a
	LCD_ClearScreen();
    6756:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	Lcd_VoidSendString("Temp = ");
    675a:	8c e0       	ldi	r24, 0x0C	; 12
    675c:	91 e0       	ldi	r25, 0x01	; 1
    675e:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
	LCD_SetPosition(0, 10);
    6762:	80 e0       	ldi	r24, 0x00	; 0
    6764:	6a e0       	ldi	r22, 0x0A	; 10
    6766:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
	Lcd_VoidSendData('C');
    676a:	83 e4       	ldi	r24, 0x43	; 67
    676c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <Lcd_VoidSendData>
	LCD_SetPosition(0, 7);
    6770:	80 e0       	ldi	r24, 0x00	; 0
    6772:	67 e0       	ldi	r22, 0x07	; 7
    6774:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
	ADC_GetDigitalValue(1, &digital_value);
    6778:	9e 01       	movw	r18, r28
    677a:	29 5c       	subi	r18, 0xC9	; 201
    677c:	3f 4f       	sbci	r19, 0xFF	; 255
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	b9 01       	movw	r22, r18
    6782:	0e 94 86 06 	call	0xd0c	; 0xd0c <ADC_GetDigitalValue>
	analog_value = ((digital_value * (u32) 5000) / 1023);
    6786:	8f a9       	ldd	r24, Y+55	; 0x37
    6788:	98 ad       	ldd	r25, Y+56	; 0x38
    678a:	a9 ad       	ldd	r26, Y+57	; 0x39
    678c:	ba ad       	ldd	r27, Y+58	; 0x3a
    678e:	28 e8       	ldi	r18, 0x88	; 136
    6790:	33 e1       	ldi	r19, 0x13	; 19
    6792:	40 e0       	ldi	r20, 0x00	; 0
    6794:	50 e0       	ldi	r21, 0x00	; 0
    6796:	bc 01       	movw	r22, r24
    6798:	cd 01       	movw	r24, r26
    679a:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    679e:	dc 01       	movw	r26, r24
    67a0:	cb 01       	movw	r24, r22
    67a2:	2f ef       	ldi	r18, 0xFF	; 255
    67a4:	33 e0       	ldi	r19, 0x03	; 3
    67a6:	40 e0       	ldi	r20, 0x00	; 0
    67a8:	50 e0       	ldi	r21, 0x00	; 0
    67aa:	bc 01       	movw	r22, r24
    67ac:	cd 01       	movw	r24, r26
    67ae:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    67b2:	da 01       	movw	r26, r20
    67b4:	c9 01       	movw	r24, r18
    67b6:	8b a7       	std	Y+43, r24	; 0x2b
    67b8:	9c a7       	std	Y+44, r25	; 0x2c
    67ba:	ad a7       	std	Y+45, r26	; 0x2d
    67bc:	be a7       	std	Y+46, r27	; 0x2e
	temp = analog_value / 10;
    67be:	8b a5       	ldd	r24, Y+43	; 0x2b
    67c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    67c2:	ad a5       	ldd	r26, Y+45	; 0x2d
    67c4:	be a5       	ldd	r27, Y+46	; 0x2e
    67c6:	2a e0       	ldi	r18, 0x0A	; 10
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	40 e0       	ldi	r20, 0x00	; 0
    67cc:	50 e0       	ldi	r21, 0x00	; 0
    67ce:	bc 01       	movw	r22, r24
    67d0:	cd 01       	movw	r24, r26
    67d2:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    67d6:	da 01       	movw	r26, r20
    67d8:	c9 01       	movw	r24, r18
    67da:	8f a7       	std	Y+47, r24	; 0x2f
    67dc:	98 ab       	std	Y+48, r25	; 0x30
    67de:	a9 ab       	std	Y+49, r26	; 0x31
    67e0:	ba ab       	std	Y+50, r27	; 0x32
	Lcd_VoidSendNumber(temp);
    67e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    67e4:	98 a9       	ldd	r25, Y+48	; 0x30
    67e6:	a9 a9       	ldd	r26, Y+49	; 0x31
    67e8:	ba a9       	ldd	r27, Y+50	; 0x32
    67ea:	bc 01       	movw	r22, r24
    67ec:	cd 01       	movw	r24, r26
    67ee:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <Lcd_VoidSendNumber>
	LCD_VoidSendStringToRowColumn(1, 9, "4-Back"); // back to welcome screen
    67f2:	25 eb       	ldi	r18, 0xB5	; 181
    67f4:	30 e0       	ldi	r19, 0x00	; 0
    67f6:	81 e0       	ldi	r24, 0x01	; 1
    67f8:	69 e0       	ldi	r22, 0x09	; 9
    67fa:	a9 01       	movw	r20, r18
    67fc:	0e 94 12 29 	call	0x5224	; 0x5224 <LCD_VoidSendStringToRowColumn>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	aa e7       	ldi	r26, 0x7A	; 122
    6806:	b4 e4       	ldi	r27, 0x44	; 68
    6808:	8f a3       	std	Y+39, r24	; 0x27
    680a:	98 a7       	std	Y+40, r25	; 0x28
    680c:	a9 a7       	std	Y+41, r26	; 0x29
    680e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6810:	6f a1       	ldd	r22, Y+39	; 0x27
    6812:	78 a5       	ldd	r23, Y+40	; 0x28
    6814:	89 a5       	ldd	r24, Y+41	; 0x29
    6816:	9a a5       	ldd	r25, Y+42	; 0x2a
    6818:	20 e0       	ldi	r18, 0x00	; 0
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	4a ef       	ldi	r20, 0xFA	; 250
    681e:	54 e4       	ldi	r21, 0x44	; 68
    6820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6824:	dc 01       	movw	r26, r24
    6826:	cb 01       	movw	r24, r22
    6828:	8b a3       	std	Y+35, r24	; 0x23
    682a:	9c a3       	std	Y+36, r25	; 0x24
    682c:	ad a3       	std	Y+37, r26	; 0x25
    682e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6830:	6b a1       	ldd	r22, Y+35	; 0x23
    6832:	7c a1       	ldd	r23, Y+36	; 0x24
    6834:	8d a1       	ldd	r24, Y+37	; 0x25
    6836:	9e a1       	ldd	r25, Y+38	; 0x26
    6838:	20 e0       	ldi	r18, 0x00	; 0
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	40 e8       	ldi	r20, 0x80	; 128
    683e:	5f e3       	ldi	r21, 0x3F	; 63
    6840:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6844:	88 23       	and	r24, r24
    6846:	2c f4       	brge	.+10     	; 0x6852 <Temp_OPeration+0x130>
		__ticks = 1;
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	9a a3       	std	Y+34, r25	; 0x22
    684e:	89 a3       	std	Y+33, r24	; 0x21
    6850:	3f c0       	rjmp	.+126    	; 0x68d0 <Temp_OPeration+0x1ae>
	else if (__tmp > 65535)
    6852:	6b a1       	ldd	r22, Y+35	; 0x23
    6854:	7c a1       	ldd	r23, Y+36	; 0x24
    6856:	8d a1       	ldd	r24, Y+37	; 0x25
    6858:	9e a1       	ldd	r25, Y+38	; 0x26
    685a:	20 e0       	ldi	r18, 0x00	; 0
    685c:	3f ef       	ldi	r19, 0xFF	; 255
    685e:	4f e7       	ldi	r20, 0x7F	; 127
    6860:	57 e4       	ldi	r21, 0x47	; 71
    6862:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6866:	18 16       	cp	r1, r24
    6868:	4c f5       	brge	.+82     	; 0x68bc <Temp_OPeration+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    686a:	6f a1       	ldd	r22, Y+39	; 0x27
    686c:	78 a5       	ldd	r23, Y+40	; 0x28
    686e:	89 a5       	ldd	r24, Y+41	; 0x29
    6870:	9a a5       	ldd	r25, Y+42	; 0x2a
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	40 e2       	ldi	r20, 0x20	; 32
    6878:	51 e4       	ldi	r21, 0x41	; 65
    687a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    687e:	dc 01       	movw	r26, r24
    6880:	cb 01       	movw	r24, r22
    6882:	bc 01       	movw	r22, r24
    6884:	cd 01       	movw	r24, r26
    6886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    688a:	dc 01       	movw	r26, r24
    688c:	cb 01       	movw	r24, r22
    688e:	9a a3       	std	Y+34, r25	; 0x22
    6890:	89 a3       	std	Y+33, r24	; 0x21
    6892:	0f c0       	rjmp	.+30     	; 0x68b2 <Temp_OPeration+0x190>
    6894:	88 ec       	ldi	r24, 0xC8	; 200
    6896:	90 e0       	ldi	r25, 0x00	; 0
    6898:	98 a3       	std	Y+32, r25	; 0x20
    689a:	8f 8f       	std	Y+31, r24	; 0x1f
    689c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    689e:	98 a1       	ldd	r25, Y+32	; 0x20
    68a0:	01 97       	sbiw	r24, 0x01	; 1
    68a2:	f1 f7       	brne	.-4      	; 0x68a0 <Temp_OPeration+0x17e>
    68a4:	98 a3       	std	Y+32, r25	; 0x20
    68a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a8:	89 a1       	ldd	r24, Y+33	; 0x21
    68aa:	9a a1       	ldd	r25, Y+34	; 0x22
    68ac:	01 97       	sbiw	r24, 0x01	; 1
    68ae:	9a a3       	std	Y+34, r25	; 0x22
    68b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68b2:	89 a1       	ldd	r24, Y+33	; 0x21
    68b4:	9a a1       	ldd	r25, Y+34	; 0x22
    68b6:	00 97       	sbiw	r24, 0x00	; 0
    68b8:	69 f7       	brne	.-38     	; 0x6894 <Temp_OPeration+0x172>
    68ba:	14 c0       	rjmp	.+40     	; 0x68e4 <Temp_OPeration+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68bc:	6b a1       	ldd	r22, Y+35	; 0x23
    68be:	7c a1       	ldd	r23, Y+36	; 0x24
    68c0:	8d a1       	ldd	r24, Y+37	; 0x25
    68c2:	9e a1       	ldd	r25, Y+38	; 0x26
    68c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    68c8:	dc 01       	movw	r26, r24
    68ca:	cb 01       	movw	r24, r22
    68cc:	9a a3       	std	Y+34, r25	; 0x22
    68ce:	89 a3       	std	Y+33, r24	; 0x21
    68d0:	89 a1       	ldd	r24, Y+33	; 0x21
    68d2:	9a a1       	ldd	r25, Y+34	; 0x22
    68d4:	9e 8f       	std	Y+30, r25	; 0x1e
    68d6:	8d 8f       	std	Y+29, r24	; 0x1d
    68d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    68dc:	01 97       	sbiw	r24, 0x01	; 1
    68de:	f1 f7       	brne	.-4      	; 0x68dc <Temp_OPeration+0x1ba>
    68e0:	9e 8f       	std	Y+30, r25	; 0x1e
    68e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	if (temp >= 36) {
    68e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    68e6:	98 a9       	ldd	r25, Y+48	; 0x30
    68e8:	a9 a9       	ldd	r26, Y+49	; 0x31
    68ea:	ba a9       	ldd	r27, Y+50	; 0x32
    68ec:	84 32       	cpi	r24, 0x24	; 36
    68ee:	91 05       	cpc	r25, r1
    68f0:	a1 05       	cpc	r26, r1
    68f2:	b1 05       	cpc	r27, r1
    68f4:	08 f4       	brcc	.+2      	; 0x68f8 <Temp_OPeration+0x1d6>
    68f6:	18 c1       	rjmp	.+560    	; 0x6b28 <Temp_OPeration+0x406>
		LCD_SetPosition(0, 7);
    68f8:	80 e0       	ldi	r24, 0x00	; 0
    68fa:	67 e0       	ldi	r22, 0x07	; 7
    68fc:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
		ADC_GetDigitalValue(1, &digital_value);
    6900:	9e 01       	movw	r18, r28
    6902:	29 5c       	subi	r18, 0xC9	; 201
    6904:	3f 4f       	sbci	r19, 0xFF	; 255
    6906:	81 e0       	ldi	r24, 0x01	; 1
    6908:	b9 01       	movw	r22, r18
    690a:	0e 94 86 06 	call	0xd0c	; 0xd0c <ADC_GetDigitalValue>
		analog_value = ((digital_value * (u32) 5000) / 1023);
    690e:	8f a9       	ldd	r24, Y+55	; 0x37
    6910:	98 ad       	ldd	r25, Y+56	; 0x38
    6912:	a9 ad       	ldd	r26, Y+57	; 0x39
    6914:	ba ad       	ldd	r27, Y+58	; 0x3a
    6916:	28 e8       	ldi	r18, 0x88	; 136
    6918:	33 e1       	ldi	r19, 0x13	; 19
    691a:	40 e0       	ldi	r20, 0x00	; 0
    691c:	50 e0       	ldi	r21, 0x00	; 0
    691e:	bc 01       	movw	r22, r24
    6920:	cd 01       	movw	r24, r26
    6922:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    6926:	dc 01       	movw	r26, r24
    6928:	cb 01       	movw	r24, r22
    692a:	2f ef       	ldi	r18, 0xFF	; 255
    692c:	33 e0       	ldi	r19, 0x03	; 3
    692e:	40 e0       	ldi	r20, 0x00	; 0
    6930:	50 e0       	ldi	r21, 0x00	; 0
    6932:	bc 01       	movw	r22, r24
    6934:	cd 01       	movw	r24, r26
    6936:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    693a:	da 01       	movw	r26, r20
    693c:	c9 01       	movw	r24, r18
    693e:	8b a7       	std	Y+43, r24	; 0x2b
    6940:	9c a7       	std	Y+44, r25	; 0x2c
    6942:	ad a7       	std	Y+45, r26	; 0x2d
    6944:	be a7       	std	Y+46, r27	; 0x2e
		temp = analog_value / 10;
    6946:	8b a5       	ldd	r24, Y+43	; 0x2b
    6948:	9c a5       	ldd	r25, Y+44	; 0x2c
    694a:	ad a5       	ldd	r26, Y+45	; 0x2d
    694c:	be a5       	ldd	r27, Y+46	; 0x2e
    694e:	2a e0       	ldi	r18, 0x0A	; 10
    6950:	30 e0       	ldi	r19, 0x00	; 0
    6952:	40 e0       	ldi	r20, 0x00	; 0
    6954:	50 e0       	ldi	r21, 0x00	; 0
    6956:	bc 01       	movw	r22, r24
    6958:	cd 01       	movw	r24, r26
    695a:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    695e:	da 01       	movw	r26, r20
    6960:	c9 01       	movw	r24, r18
    6962:	8f a7       	std	Y+47, r24	; 0x2f
    6964:	98 ab       	std	Y+48, r25	; 0x30
    6966:	a9 ab       	std	Y+49, r26	; 0x31
    6968:	ba ab       	std	Y+50, r27	; 0x32
		Lcd_VoidSendNumber(temp);
    696a:	8f a5       	ldd	r24, Y+47	; 0x2f
    696c:	98 a9       	ldd	r25, Y+48	; 0x30
    696e:	a9 a9       	ldd	r26, Y+49	; 0x31
    6970:	ba a9       	ldd	r27, Y+50	; 0x32
    6972:	bc 01       	movw	r22, r24
    6974:	cd 01       	movw	r24, r26
    6976:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <Lcd_VoidSendNumber>
		DIO_SetPinValue(PORTA, PIN0, HIGH);
    697a:	80 e0       	ldi	r24, 0x00	; 0
    697c:	60 e0       	ldi	r22, 0x00	; 0
    697e:	41 e0       	ldi	r20, 0x01	; 1
    6980:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTA, PIN2, HIGH);
    6984:	80 e0       	ldi	r24, 0x00	; 0
    6986:	62 e0       	ldi	r22, 0x02	; 2
    6988:	41 e0       	ldi	r20, 0x01	; 1
    698a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
    698e:	b5 c0       	rjmp	.+362    	; 0x6afa <Temp_OPeration+0x3d8>
		while (!(temp < 36)) {
			LCD_ClearScreen();
    6990:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
			Lcd_VoidSendString("Warnning ....");
    6994:	84 e1       	ldi	r24, 0x14	; 20
    6996:	91 e0       	ldi	r25, 0x01	; 1
    6998:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
			DIO_TogPinValue(PORTA, PIN2);
    699c:	80 e0       	ldi	r24, 0x00	; 0
    699e:	62 e0       	ldi	r22, 0x02	; 2
    69a0:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_TogPinValue>
			DIO_TogPinValue(PORTA, PIN0);
    69a4:	80 e0       	ldi	r24, 0x00	; 0
    69a6:	60 e0       	ldi	r22, 0x00	; 0
    69a8:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_TogPinValue>
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	aa e7       	ldi	r26, 0x7A	; 122
    69b2:	b4 e4       	ldi	r27, 0x44	; 68
    69b4:	89 8f       	std	Y+25, r24	; 0x19
    69b6:	9a 8f       	std	Y+26, r25	; 0x1a
    69b8:	ab 8f       	std	Y+27, r26	; 0x1b
    69ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69bc:	69 8d       	ldd	r22, Y+25	; 0x19
    69be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	4a ef       	ldi	r20, 0xFA	; 250
    69ca:	54 e4       	ldi	r21, 0x44	; 68
    69cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    69d0:	dc 01       	movw	r26, r24
    69d2:	cb 01       	movw	r24, r22
    69d4:	8d 8b       	std	Y+21, r24	; 0x15
    69d6:	9e 8b       	std	Y+22, r25	; 0x16
    69d8:	af 8b       	std	Y+23, r26	; 0x17
    69da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    69dc:	6d 89       	ldd	r22, Y+21	; 0x15
    69de:	7e 89       	ldd	r23, Y+22	; 0x16
    69e0:	8f 89       	ldd	r24, Y+23	; 0x17
    69e2:	98 8d       	ldd	r25, Y+24	; 0x18
    69e4:	20 e0       	ldi	r18, 0x00	; 0
    69e6:	30 e0       	ldi	r19, 0x00	; 0
    69e8:	40 e8       	ldi	r20, 0x80	; 128
    69ea:	5f e3       	ldi	r21, 0x3F	; 63
    69ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    69f0:	88 23       	and	r24, r24
    69f2:	2c f4       	brge	.+10     	; 0x69fe <Temp_OPeration+0x2dc>
		__ticks = 1;
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	90 e0       	ldi	r25, 0x00	; 0
    69f8:	9c 8b       	std	Y+20, r25	; 0x14
    69fa:	8b 8b       	std	Y+19, r24	; 0x13
    69fc:	3f c0       	rjmp	.+126    	; 0x6a7c <Temp_OPeration+0x35a>
	else if (__tmp > 65535)
    69fe:	6d 89       	ldd	r22, Y+21	; 0x15
    6a00:	7e 89       	ldd	r23, Y+22	; 0x16
    6a02:	8f 89       	ldd	r24, Y+23	; 0x17
    6a04:	98 8d       	ldd	r25, Y+24	; 0x18
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	3f ef       	ldi	r19, 0xFF	; 255
    6a0a:	4f e7       	ldi	r20, 0x7F	; 127
    6a0c:	57 e4       	ldi	r21, 0x47	; 71
    6a0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6a12:	18 16       	cp	r1, r24
    6a14:	4c f5       	brge	.+82     	; 0x6a68 <Temp_OPeration+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a16:	69 8d       	ldd	r22, Y+25	; 0x19
    6a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a1e:	20 e0       	ldi	r18, 0x00	; 0
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	40 e2       	ldi	r20, 0x20	; 32
    6a24:	51 e4       	ldi	r21, 0x41	; 65
    6a26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	cb 01       	movw	r24, r22
    6a2e:	bc 01       	movw	r22, r24
    6a30:	cd 01       	movw	r24, r26
    6a32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6a36:	dc 01       	movw	r26, r24
    6a38:	cb 01       	movw	r24, r22
    6a3a:	9c 8b       	std	Y+20, r25	; 0x14
    6a3c:	8b 8b       	std	Y+19, r24	; 0x13
    6a3e:	0f c0       	rjmp	.+30     	; 0x6a5e <Temp_OPeration+0x33c>
    6a40:	88 ec       	ldi	r24, 0xC8	; 200
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	9a 8b       	std	Y+18, r25	; 0x12
    6a46:	89 8b       	std	Y+17, r24	; 0x11
    6a48:	89 89       	ldd	r24, Y+17	; 0x11
    6a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    6a4c:	01 97       	sbiw	r24, 0x01	; 1
    6a4e:	f1 f7       	brne	.-4      	; 0x6a4c <Temp_OPeration+0x32a>
    6a50:	9a 8b       	std	Y+18, r25	; 0x12
    6a52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a54:	8b 89       	ldd	r24, Y+19	; 0x13
    6a56:	9c 89       	ldd	r25, Y+20	; 0x14
    6a58:	01 97       	sbiw	r24, 0x01	; 1
    6a5a:	9c 8b       	std	Y+20, r25	; 0x14
    6a5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    6a60:	9c 89       	ldd	r25, Y+20	; 0x14
    6a62:	00 97       	sbiw	r24, 0x00	; 0
    6a64:	69 f7       	brne	.-38     	; 0x6a40 <Temp_OPeration+0x31e>
    6a66:	14 c0       	rjmp	.+40     	; 0x6a90 <Temp_OPeration+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a68:	6d 89       	ldd	r22, Y+21	; 0x15
    6a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    6a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    6a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    6a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6a74:	dc 01       	movw	r26, r24
    6a76:	cb 01       	movw	r24, r22
    6a78:	9c 8b       	std	Y+20, r25	; 0x14
    6a7a:	8b 8b       	std	Y+19, r24	; 0x13
    6a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    6a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    6a80:	98 8b       	std	Y+16, r25	; 0x10
    6a82:	8f 87       	std	Y+15, r24	; 0x0f
    6a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a86:	98 89       	ldd	r25, Y+16	; 0x10
    6a88:	01 97       	sbiw	r24, 0x01	; 1
    6a8a:	f1 f7       	brne	.-4      	; 0x6a88 <Temp_OPeration+0x366>
    6a8c:	98 8b       	std	Y+16, r25	; 0x10
    6a8e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			ADC_GetDigitalValue(1, &digital_value);
    6a90:	9e 01       	movw	r18, r28
    6a92:	29 5c       	subi	r18, 0xC9	; 201
    6a94:	3f 4f       	sbci	r19, 0xFF	; 255
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	b9 01       	movw	r22, r18
    6a9a:	0e 94 86 06 	call	0xd0c	; 0xd0c <ADC_GetDigitalValue>
			analog_value = ((digital_value * (u32) 5000) / 1023);
    6a9e:	8f a9       	ldd	r24, Y+55	; 0x37
    6aa0:	98 ad       	ldd	r25, Y+56	; 0x38
    6aa2:	a9 ad       	ldd	r26, Y+57	; 0x39
    6aa4:	ba ad       	ldd	r27, Y+58	; 0x3a
    6aa6:	28 e8       	ldi	r18, 0x88	; 136
    6aa8:	33 e1       	ldi	r19, 0x13	; 19
    6aaa:	40 e0       	ldi	r20, 0x00	; 0
    6aac:	50 e0       	ldi	r21, 0x00	; 0
    6aae:	bc 01       	movw	r22, r24
    6ab0:	cd 01       	movw	r24, r26
    6ab2:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    6ab6:	dc 01       	movw	r26, r24
    6ab8:	cb 01       	movw	r24, r22
    6aba:	2f ef       	ldi	r18, 0xFF	; 255
    6abc:	33 e0       	ldi	r19, 0x03	; 3
    6abe:	40 e0       	ldi	r20, 0x00	; 0
    6ac0:	50 e0       	ldi	r21, 0x00	; 0
    6ac2:	bc 01       	movw	r22, r24
    6ac4:	cd 01       	movw	r24, r26
    6ac6:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    6aca:	da 01       	movw	r26, r20
    6acc:	c9 01       	movw	r24, r18
    6ace:	8b a7       	std	Y+43, r24	; 0x2b
    6ad0:	9c a7       	std	Y+44, r25	; 0x2c
    6ad2:	ad a7       	std	Y+45, r26	; 0x2d
    6ad4:	be a7       	std	Y+46, r27	; 0x2e
			temp = analog_value / 10;
    6ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    6ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    6ada:	ad a5       	ldd	r26, Y+45	; 0x2d
    6adc:	be a5       	ldd	r27, Y+46	; 0x2e
    6ade:	2a e0       	ldi	r18, 0x0A	; 10
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	40 e0       	ldi	r20, 0x00	; 0
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	bc 01       	movw	r22, r24
    6ae8:	cd 01       	movw	r24, r26
    6aea:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodsi4>
    6aee:	da 01       	movw	r26, r20
    6af0:	c9 01       	movw	r24, r18
    6af2:	8f a7       	std	Y+47, r24	; 0x2f
    6af4:	98 ab       	std	Y+48, r25	; 0x30
    6af6:	a9 ab       	std	Y+49, r26	; 0x31
    6af8:	ba ab       	std	Y+50, r27	; 0x32
		analog_value = ((digital_value * (u32) 5000) / 1023);
		temp = analog_value / 10;
		Lcd_VoidSendNumber(temp);
		DIO_SetPinValue(PORTA, PIN0, HIGH);
		DIO_SetPinValue(PORTA, PIN2, HIGH);
		while (!(temp < 36)) {
    6afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    6afc:	98 a9       	ldd	r25, Y+48	; 0x30
    6afe:	a9 a9       	ldd	r26, Y+49	; 0x31
    6b00:	ba a9       	ldd	r27, Y+50	; 0x32
    6b02:	84 32       	cpi	r24, 0x24	; 36
    6b04:	91 05       	cpc	r25, r1
    6b06:	a1 05       	cpc	r26, r1
    6b08:	b1 05       	cpc	r27, r1
    6b0a:	08 f0       	brcs	.+2      	; 0x6b0e <Temp_OPeration+0x3ec>
    6b0c:	41 cf       	rjmp	.-382    	; 0x6990 <Temp_OPeration+0x26e>
			_delay_ms(1000);
			ADC_GetDigitalValue(1, &digital_value);
			analog_value = ((digital_value * (u32) 5000) / 1023);
			temp = analog_value / 10;
		}
		DIO_SetPinValue(PORTA, PIN0, LOW);
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	60 e0       	ldi	r22, 0x00	; 0
    6b12:	40 e0       	ldi	r20, 0x00	; 0
    6b14:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		DIO_SetPinValue(PORTA, PIN2, LOW);
    6b18:	80 e0       	ldi	r24, 0x00	; 0
    6b1a:	62 e0       	ldi	r22, 0x02	; 2
    6b1c:	40 e0       	ldi	r20, 0x00	; 0
    6b1e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
		Temp_OPeration();
    6b22:	0e 94 91 33 	call	0x6722	; 0x6722 <Temp_OPeration>
    6b26:	7a c0       	rjmp	.+244    	; 0x6c1c <Temp_OPeration+0x4fa>
	} else if (USART_VoidReseiveData() == '4') {
    6b28:	0e 94 8e 29 	call	0x531c	; 0x531c <USART_VoidReseiveData>
    6b2c:	84 33       	cpi	r24, 0x34	; 52
    6b2e:	09 f0       	breq	.+2      	; 0x6b32 <Temp_OPeration+0x410>
    6b30:	73 c0       	rjmp	.+230    	; 0x6c18 <Temp_OPeration+0x4f6>
    6b32:	80 e0       	ldi	r24, 0x00	; 0
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	aa e7       	ldi	r26, 0x7A	; 122
    6b38:	b3 e4       	ldi	r27, 0x43	; 67
    6b3a:	8b 87       	std	Y+11, r24	; 0x0b
    6b3c:	9c 87       	std	Y+12, r25	; 0x0c
    6b3e:	ad 87       	std	Y+13, r26	; 0x0d
    6b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b4a:	20 e0       	ldi	r18, 0x00	; 0
    6b4c:	30 e0       	ldi	r19, 0x00	; 0
    6b4e:	4a ef       	ldi	r20, 0xFA	; 250
    6b50:	54 e4       	ldi	r21, 0x44	; 68
    6b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6b56:	dc 01       	movw	r26, r24
    6b58:	cb 01       	movw	r24, r22
    6b5a:	8f 83       	std	Y+7, r24	; 0x07
    6b5c:	98 87       	std	Y+8, r25	; 0x08
    6b5e:	a9 87       	std	Y+9, r26	; 0x09
    6b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b62:	6f 81       	ldd	r22, Y+7	; 0x07
    6b64:	78 85       	ldd	r23, Y+8	; 0x08
    6b66:	89 85       	ldd	r24, Y+9	; 0x09
    6b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b6a:	20 e0       	ldi	r18, 0x00	; 0
    6b6c:	30 e0       	ldi	r19, 0x00	; 0
    6b6e:	40 e8       	ldi	r20, 0x80	; 128
    6b70:	5f e3       	ldi	r21, 0x3F	; 63
    6b72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6b76:	88 23       	and	r24, r24
    6b78:	2c f4       	brge	.+10     	; 0x6b84 <Temp_OPeration+0x462>
		__ticks = 1;
    6b7a:	81 e0       	ldi	r24, 0x01	; 1
    6b7c:	90 e0       	ldi	r25, 0x00	; 0
    6b7e:	9e 83       	std	Y+6, r25	; 0x06
    6b80:	8d 83       	std	Y+5, r24	; 0x05
    6b82:	3f c0       	rjmp	.+126    	; 0x6c02 <Temp_OPeration+0x4e0>
	else if (__tmp > 65535)
    6b84:	6f 81       	ldd	r22, Y+7	; 0x07
    6b86:	78 85       	ldd	r23, Y+8	; 0x08
    6b88:	89 85       	ldd	r24, Y+9	; 0x09
    6b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b8c:	20 e0       	ldi	r18, 0x00	; 0
    6b8e:	3f ef       	ldi	r19, 0xFF	; 255
    6b90:	4f e7       	ldi	r20, 0x7F	; 127
    6b92:	57 e4       	ldi	r21, 0x47	; 71
    6b94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6b98:	18 16       	cp	r1, r24
    6b9a:	4c f5       	brge	.+82     	; 0x6bee <Temp_OPeration+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ba4:	20 e0       	ldi	r18, 0x00	; 0
    6ba6:	30 e0       	ldi	r19, 0x00	; 0
    6ba8:	40 e2       	ldi	r20, 0x20	; 32
    6baa:	51 e4       	ldi	r21, 0x41	; 65
    6bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6bb0:	dc 01       	movw	r26, r24
    6bb2:	cb 01       	movw	r24, r22
    6bb4:	bc 01       	movw	r22, r24
    6bb6:	cd 01       	movw	r24, r26
    6bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6bbc:	dc 01       	movw	r26, r24
    6bbe:	cb 01       	movw	r24, r22
    6bc0:	9e 83       	std	Y+6, r25	; 0x06
    6bc2:	8d 83       	std	Y+5, r24	; 0x05
    6bc4:	0f c0       	rjmp	.+30     	; 0x6be4 <Temp_OPeration+0x4c2>
    6bc6:	88 ec       	ldi	r24, 0xC8	; 200
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	9c 83       	std	Y+4, r25	; 0x04
    6bcc:	8b 83       	std	Y+3, r24	; 0x03
    6bce:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    6bd2:	01 97       	sbiw	r24, 0x01	; 1
    6bd4:	f1 f7       	brne	.-4      	; 0x6bd2 <Temp_OPeration+0x4b0>
    6bd6:	9c 83       	std	Y+4, r25	; 0x04
    6bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bda:	8d 81       	ldd	r24, Y+5	; 0x05
    6bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    6bde:	01 97       	sbiw	r24, 0x01	; 1
    6be0:	9e 83       	std	Y+6, r25	; 0x06
    6be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6be4:	8d 81       	ldd	r24, Y+5	; 0x05
    6be6:	9e 81       	ldd	r25, Y+6	; 0x06
    6be8:	00 97       	sbiw	r24, 0x00	; 0
    6bea:	69 f7       	brne	.-38     	; 0x6bc6 <Temp_OPeration+0x4a4>
    6bec:	17 c0       	rjmp	.+46     	; 0x6c1c <Temp_OPeration+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bee:	6f 81       	ldd	r22, Y+7	; 0x07
    6bf0:	78 85       	ldd	r23, Y+8	; 0x08
    6bf2:	89 85       	ldd	r24, Y+9	; 0x09
    6bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6bfa:	dc 01       	movw	r26, r24
    6bfc:	cb 01       	movw	r24, r22
    6bfe:	9e 83       	std	Y+6, r25	; 0x06
    6c00:	8d 83       	std	Y+5, r24	; 0x05
    6c02:	8d 81       	ldd	r24, Y+5	; 0x05
    6c04:	9e 81       	ldd	r25, Y+6	; 0x06
    6c06:	9a 83       	std	Y+2, r25	; 0x02
    6c08:	89 83       	std	Y+1, r24	; 0x01
    6c0a:	89 81       	ldd	r24, Y+1	; 0x01
    6c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c0e:	01 97       	sbiw	r24, 0x01	; 1
    6c10:	f1 f7       	brne	.-4      	; 0x6c0e <Temp_OPeration+0x4ec>
    6c12:	9a 83       	std	Y+2, r25	; 0x02
    6c14:	89 83       	std	Y+1, r24	; 0x01
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <Temp_OPeration+0x4fa>
		_delay_ms(250);
		return;
	} else {
		Temp_OPeration();
    6c18:	0e 94 91 33 	call	0x6722	; 0x6722 <Temp_OPeration>
	}

}
    6c1c:	ea 96       	adiw	r28, 0x3a	; 58
    6c1e:	0f b6       	in	r0, 0x3f	; 63
    6c20:	f8 94       	cli
    6c22:	de bf       	out	0x3e, r29	; 62
    6c24:	0f be       	out	0x3f, r0	; 63
    6c26:	cd bf       	out	0x3d, r28	; 61
    6c28:	cf 91       	pop	r28
    6c2a:	df 91       	pop	r29
    6c2c:	08 95       	ret

00006c2e <Buzzer_led>:

void Buzzer_led(void) {
    6c2e:	df 93       	push	r29
    6c30:	cf 93       	push	r28
    6c32:	cd b7       	in	r28, 0x3d	; 61
    6c34:	de b7       	in	r29, 0x3e	; 62
    6c36:	2f 97       	sbiw	r28, 0x0f	; 15
    6c38:	0f b6       	in	r0, 0x3f	; 63
    6c3a:	f8 94       	cli
    6c3c:	de bf       	out	0x3e, r29	; 62
    6c3e:	0f be       	out	0x3f, r0	; 63
    6c40:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	DIO_SetPinValue(PORTA, PIN0, HIGH);
    6c42:	80 e0       	ldi	r24, 0x00	; 0
    6c44:	60 e0       	ldi	r22, 0x00	; 0
    6c46:	41 e0       	ldi	r20, 0x01	; 1
    6c48:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	DIO_SetPinValue(PORTA, PIN2, HIGH);
    6c4c:	80 e0       	ldi	r24, 0x00	; 0
    6c4e:	62 e0       	ldi	r22, 0x02	; 2
    6c50:	41 e0       	ldi	r20, 0x01	; 1
    6c52:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPinValue>
	for (i = 0; i < 5; i++) {
    6c56:	1f 86       	std	Y+15, r1	; 0x0f
    6c58:	83 c0       	rjmp	.+262    	; 0x6d60 <Buzzer_led+0x132>
		LCD_ClearScreen();
    6c5a:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
		Lcd_VoidSendString("Warnning ....");
    6c5e:	84 e1       	ldi	r24, 0x14	; 20
    6c60:	91 e0       	ldi	r25, 0x01	; 1
    6c62:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
		DIO_TogPinValue(PORTA, PIN2);
    6c66:	80 e0       	ldi	r24, 0x00	; 0
    6c68:	62 e0       	ldi	r22, 0x02	; 2
    6c6a:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_TogPinValue>
		DIO_TogPinValue(PORTA, PIN0);
    6c6e:	80 e0       	ldi	r24, 0x00	; 0
    6c70:	60 e0       	ldi	r22, 0x00	; 0
    6c72:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_TogPinValue>
    6c76:	80 e0       	ldi	r24, 0x00	; 0
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	aa e7       	ldi	r26, 0x7A	; 122
    6c7c:	b4 e4       	ldi	r27, 0x44	; 68
    6c7e:	8b 87       	std	Y+11, r24	; 0x0b
    6c80:	9c 87       	std	Y+12, r25	; 0x0c
    6c82:	ad 87       	std	Y+13, r26	; 0x0d
    6c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c8e:	20 e0       	ldi	r18, 0x00	; 0
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	4a ef       	ldi	r20, 0xFA	; 250
    6c94:	54 e4       	ldi	r21, 0x44	; 68
    6c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6c9a:	dc 01       	movw	r26, r24
    6c9c:	cb 01       	movw	r24, r22
    6c9e:	8f 83       	std	Y+7, r24	; 0x07
    6ca0:	98 87       	std	Y+8, r25	; 0x08
    6ca2:	a9 87       	std	Y+9, r26	; 0x09
    6ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    6ca8:	78 85       	ldd	r23, Y+8	; 0x08
    6caa:	89 85       	ldd	r24, Y+9	; 0x09
    6cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cae:	20 e0       	ldi	r18, 0x00	; 0
    6cb0:	30 e0       	ldi	r19, 0x00	; 0
    6cb2:	40 e8       	ldi	r20, 0x80	; 128
    6cb4:	5f e3       	ldi	r21, 0x3F	; 63
    6cb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    6cba:	88 23       	and	r24, r24
    6cbc:	2c f4       	brge	.+10     	; 0x6cc8 <Buzzer_led+0x9a>
		__ticks = 1;
    6cbe:	81 e0       	ldi	r24, 0x01	; 1
    6cc0:	90 e0       	ldi	r25, 0x00	; 0
    6cc2:	9e 83       	std	Y+6, r25	; 0x06
    6cc4:	8d 83       	std	Y+5, r24	; 0x05
    6cc6:	3f c0       	rjmp	.+126    	; 0x6d46 <Buzzer_led+0x118>
	else if (__tmp > 65535)
    6cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    6cca:	78 85       	ldd	r23, Y+8	; 0x08
    6ccc:	89 85       	ldd	r24, Y+9	; 0x09
    6cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cd0:	20 e0       	ldi	r18, 0x00	; 0
    6cd2:	3f ef       	ldi	r19, 0xFF	; 255
    6cd4:	4f e7       	ldi	r20, 0x7F	; 127
    6cd6:	57 e4       	ldi	r21, 0x47	; 71
    6cd8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    6cdc:	18 16       	cp	r1, r24
    6cde:	4c f5       	brge	.+82     	; 0x6d32 <Buzzer_led+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ce8:	20 e0       	ldi	r18, 0x00	; 0
    6cea:	30 e0       	ldi	r19, 0x00	; 0
    6cec:	40 e2       	ldi	r20, 0x20	; 32
    6cee:	51 e4       	ldi	r21, 0x41	; 65
    6cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6cf4:	dc 01       	movw	r26, r24
    6cf6:	cb 01       	movw	r24, r22
    6cf8:	bc 01       	movw	r22, r24
    6cfa:	cd 01       	movw	r24, r26
    6cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6d00:	dc 01       	movw	r26, r24
    6d02:	cb 01       	movw	r24, r22
    6d04:	9e 83       	std	Y+6, r25	; 0x06
    6d06:	8d 83       	std	Y+5, r24	; 0x05
    6d08:	0f c0       	rjmp	.+30     	; 0x6d28 <Buzzer_led+0xfa>
    6d0a:	88 ec       	ldi	r24, 0xC8	; 200
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	9c 83       	std	Y+4, r25	; 0x04
    6d10:	8b 83       	std	Y+3, r24	; 0x03
    6d12:	8b 81       	ldd	r24, Y+3	; 0x03
    6d14:	9c 81       	ldd	r25, Y+4	; 0x04
    6d16:	01 97       	sbiw	r24, 0x01	; 1
    6d18:	f1 f7       	brne	.-4      	; 0x6d16 <Buzzer_led+0xe8>
    6d1a:	9c 83       	std	Y+4, r25	; 0x04
    6d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    6d20:	9e 81       	ldd	r25, Y+6	; 0x06
    6d22:	01 97       	sbiw	r24, 0x01	; 1
    6d24:	9e 83       	std	Y+6, r25	; 0x06
    6d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d28:	8d 81       	ldd	r24, Y+5	; 0x05
    6d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d2c:	00 97       	sbiw	r24, 0x00	; 0
    6d2e:	69 f7       	brne	.-38     	; 0x6d0a <Buzzer_led+0xdc>
    6d30:	14 c0       	rjmp	.+40     	; 0x6d5a <Buzzer_led+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d32:	6f 81       	ldd	r22, Y+7	; 0x07
    6d34:	78 85       	ldd	r23, Y+8	; 0x08
    6d36:	89 85       	ldd	r24, Y+9	; 0x09
    6d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6d3e:	dc 01       	movw	r26, r24
    6d40:	cb 01       	movw	r24, r22
    6d42:	9e 83       	std	Y+6, r25	; 0x06
    6d44:	8d 83       	std	Y+5, r24	; 0x05
    6d46:	8d 81       	ldd	r24, Y+5	; 0x05
    6d48:	9e 81       	ldd	r25, Y+6	; 0x06
    6d4a:	9a 83       	std	Y+2, r25	; 0x02
    6d4c:	89 83       	std	Y+1, r24	; 0x01
    6d4e:	89 81       	ldd	r24, Y+1	; 0x01
    6d50:	9a 81       	ldd	r25, Y+2	; 0x02
    6d52:	01 97       	sbiw	r24, 0x01	; 1
    6d54:	f1 f7       	brne	.-4      	; 0x6d52 <Buzzer_led+0x124>
    6d56:	9a 83       	std	Y+2, r25	; 0x02
    6d58:	89 83       	std	Y+1, r24	; 0x01

void Buzzer_led(void) {
	u8 i;
	DIO_SetPinValue(PORTA, PIN0, HIGH);
	DIO_SetPinValue(PORTA, PIN2, HIGH);
	for (i = 0; i < 5; i++) {
    6d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d5c:	8f 5f       	subi	r24, 0xFF	; 255
    6d5e:	8f 87       	std	Y+15, r24	; 0x0f
    6d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d62:	85 30       	cpi	r24, 0x05	; 5
    6d64:	08 f4       	brcc	.+2      	; 0x6d68 <Buzzer_led+0x13a>
    6d66:	79 cf       	rjmp	.-270    	; 0x6c5a <Buzzer_led+0x2c>
		Lcd_VoidSendString("Warnning ....");
		DIO_TogPinValue(PORTA, PIN2);
		DIO_TogPinValue(PORTA, PIN0);
		_delay_ms(1000);
	}
}
    6d68:	2f 96       	adiw	r28, 0x0f	; 15
    6d6a:	0f b6       	in	r0, 0x3f	; 63
    6d6c:	f8 94       	cli
    6d6e:	de bf       	out	0x3e, r29	; 62
    6d70:	0f be       	out	0x3f, r0	; 63
    6d72:	cd bf       	out	0x3d, r28	; 61
    6d74:	cf 91       	pop	r28
    6d76:	df 91       	pop	r29
    6d78:	08 95       	ret

00006d7a <BYBY>:

void BYBY(void) {
    6d7a:	df 93       	push	r29
    6d7c:	cf 93       	push	r28
    6d7e:	cd b7       	in	r28, 0x3d	; 61
    6d80:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    6d82:	0e 94 2b 29 	call	0x5256	; 0x5256 <LCD_ClearScreen>
	Lcd_VoidSendString("Come Again ....");
    6d86:	82 e2       	ldi	r24, 0x22	; 34
    6d88:	91 e0       	ldi	r25, 0x01	; 1
    6d8a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
	LCD_SetPosition(1, 0);
    6d8e:	81 e0       	ldi	r24, 0x01	; 1
    6d90:	60 e0       	ldi	r22, 0x00	; 0
    6d92:	0e 94 8c 28 	call	0x5118	; 0x5118 <LCD_SetPosition>
	Lcd_VoidSendString("Byby salsabeel");
    6d96:	82 e3       	ldi	r24, 0x32	; 50
    6d98:	91 e0       	ldi	r25, 0x01	; 1
    6d9a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <Lcd_VoidSendString>
    6d9e:	ff cf       	rjmp	.-2      	; 0x6d9e <BYBY+0x24>

00006da0 <__mulsi3>:
    6da0:	62 9f       	mul	r22, r18
    6da2:	d0 01       	movw	r26, r0
    6da4:	73 9f       	mul	r23, r19
    6da6:	f0 01       	movw	r30, r0
    6da8:	82 9f       	mul	r24, r18
    6daa:	e0 0d       	add	r30, r0
    6dac:	f1 1d       	adc	r31, r1
    6dae:	64 9f       	mul	r22, r20
    6db0:	e0 0d       	add	r30, r0
    6db2:	f1 1d       	adc	r31, r1
    6db4:	92 9f       	mul	r25, r18
    6db6:	f0 0d       	add	r31, r0
    6db8:	83 9f       	mul	r24, r19
    6dba:	f0 0d       	add	r31, r0
    6dbc:	74 9f       	mul	r23, r20
    6dbe:	f0 0d       	add	r31, r0
    6dc0:	65 9f       	mul	r22, r21
    6dc2:	f0 0d       	add	r31, r0
    6dc4:	99 27       	eor	r25, r25
    6dc6:	72 9f       	mul	r23, r18
    6dc8:	b0 0d       	add	r27, r0
    6dca:	e1 1d       	adc	r30, r1
    6dcc:	f9 1f       	adc	r31, r25
    6dce:	63 9f       	mul	r22, r19
    6dd0:	b0 0d       	add	r27, r0
    6dd2:	e1 1d       	adc	r30, r1
    6dd4:	f9 1f       	adc	r31, r25
    6dd6:	bd 01       	movw	r22, r26
    6dd8:	cf 01       	movw	r24, r30
    6dda:	11 24       	eor	r1, r1
    6ddc:	08 95       	ret

00006dde <__udivmodsi4>:
    6dde:	a1 e2       	ldi	r26, 0x21	; 33
    6de0:	1a 2e       	mov	r1, r26
    6de2:	aa 1b       	sub	r26, r26
    6de4:	bb 1b       	sub	r27, r27
    6de6:	fd 01       	movw	r30, r26
    6de8:	0d c0       	rjmp	.+26     	; 0x6e04 <__udivmodsi4_ep>

00006dea <__udivmodsi4_loop>:
    6dea:	aa 1f       	adc	r26, r26
    6dec:	bb 1f       	adc	r27, r27
    6dee:	ee 1f       	adc	r30, r30
    6df0:	ff 1f       	adc	r31, r31
    6df2:	a2 17       	cp	r26, r18
    6df4:	b3 07       	cpc	r27, r19
    6df6:	e4 07       	cpc	r30, r20
    6df8:	f5 07       	cpc	r31, r21
    6dfa:	20 f0       	brcs	.+8      	; 0x6e04 <__udivmodsi4_ep>
    6dfc:	a2 1b       	sub	r26, r18
    6dfe:	b3 0b       	sbc	r27, r19
    6e00:	e4 0b       	sbc	r30, r20
    6e02:	f5 0b       	sbc	r31, r21

00006e04 <__udivmodsi4_ep>:
    6e04:	66 1f       	adc	r22, r22
    6e06:	77 1f       	adc	r23, r23
    6e08:	88 1f       	adc	r24, r24
    6e0a:	99 1f       	adc	r25, r25
    6e0c:	1a 94       	dec	r1
    6e0e:	69 f7       	brne	.-38     	; 0x6dea <__udivmodsi4_loop>
    6e10:	60 95       	com	r22
    6e12:	70 95       	com	r23
    6e14:	80 95       	com	r24
    6e16:	90 95       	com	r25
    6e18:	9b 01       	movw	r18, r22
    6e1a:	ac 01       	movw	r20, r24
    6e1c:	bd 01       	movw	r22, r26
    6e1e:	cf 01       	movw	r24, r30
    6e20:	08 95       	ret

00006e22 <__prologue_saves__>:
    6e22:	2f 92       	push	r2
    6e24:	3f 92       	push	r3
    6e26:	4f 92       	push	r4
    6e28:	5f 92       	push	r5
    6e2a:	6f 92       	push	r6
    6e2c:	7f 92       	push	r7
    6e2e:	8f 92       	push	r8
    6e30:	9f 92       	push	r9
    6e32:	af 92       	push	r10
    6e34:	bf 92       	push	r11
    6e36:	cf 92       	push	r12
    6e38:	df 92       	push	r13
    6e3a:	ef 92       	push	r14
    6e3c:	ff 92       	push	r15
    6e3e:	0f 93       	push	r16
    6e40:	1f 93       	push	r17
    6e42:	cf 93       	push	r28
    6e44:	df 93       	push	r29
    6e46:	cd b7       	in	r28, 0x3d	; 61
    6e48:	de b7       	in	r29, 0x3e	; 62
    6e4a:	ca 1b       	sub	r28, r26
    6e4c:	db 0b       	sbc	r29, r27
    6e4e:	0f b6       	in	r0, 0x3f	; 63
    6e50:	f8 94       	cli
    6e52:	de bf       	out	0x3e, r29	; 62
    6e54:	0f be       	out	0x3f, r0	; 63
    6e56:	cd bf       	out	0x3d, r28	; 61
    6e58:	09 94       	ijmp

00006e5a <__epilogue_restores__>:
    6e5a:	2a 88       	ldd	r2, Y+18	; 0x12
    6e5c:	39 88       	ldd	r3, Y+17	; 0x11
    6e5e:	48 88       	ldd	r4, Y+16	; 0x10
    6e60:	5f 84       	ldd	r5, Y+15	; 0x0f
    6e62:	6e 84       	ldd	r6, Y+14	; 0x0e
    6e64:	7d 84       	ldd	r7, Y+13	; 0x0d
    6e66:	8c 84       	ldd	r8, Y+12	; 0x0c
    6e68:	9b 84       	ldd	r9, Y+11	; 0x0b
    6e6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    6e6c:	b9 84       	ldd	r11, Y+9	; 0x09
    6e6e:	c8 84       	ldd	r12, Y+8	; 0x08
    6e70:	df 80       	ldd	r13, Y+7	; 0x07
    6e72:	ee 80       	ldd	r14, Y+6	; 0x06
    6e74:	fd 80       	ldd	r15, Y+5	; 0x05
    6e76:	0c 81       	ldd	r16, Y+4	; 0x04
    6e78:	1b 81       	ldd	r17, Y+3	; 0x03
    6e7a:	aa 81       	ldd	r26, Y+2	; 0x02
    6e7c:	b9 81       	ldd	r27, Y+1	; 0x01
    6e7e:	ce 0f       	add	r28, r30
    6e80:	d1 1d       	adc	r29, r1
    6e82:	0f b6       	in	r0, 0x3f	; 63
    6e84:	f8 94       	cli
    6e86:	de bf       	out	0x3e, r29	; 62
    6e88:	0f be       	out	0x3f, r0	; 63
    6e8a:	cd bf       	out	0x3d, r28	; 61
    6e8c:	ed 01       	movw	r28, r26
    6e8e:	08 95       	ret

00006e90 <_exit>:
    6e90:	f8 94       	cli

00006e92 <__stop_program>:
    6e92:	ff cf       	rjmp	.-2      	; 0x6e92 <__stop_program>
